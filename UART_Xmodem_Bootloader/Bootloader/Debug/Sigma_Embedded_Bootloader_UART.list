
SIGMA_Embedded_Bootloader_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e54  08005e54  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000028  08005e84  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08005e84  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 0000003a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ee1  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc7  00000000  00000000  00031f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295ed  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012719  00000000  00000000  0005fb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102690  00000000  00000000  0007228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017491e  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 00000014  00000000  00000000  00174970  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00003558  00000000  00000000  00174984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000028 	.word	0x20000028
 8000210:	00000000 	.word	0x00000000
 8000214:	08005b54 	.word	0x08005b54

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000002c 	.word	0x2000002c
 8000230:	08005b54 	.word	0x08005b54

08000234 <cmox_hash_cleanup>:
 8000234:	2800      	cmp	r0, #0
 8000236:	b580      	push	{r7, lr}
 8000238:	4905      	ldr	r1, [pc, #20]	; (8000250 <cmox_hash_cleanup+0x1c>)
 800023a:	bf1c      	itt	ne
 800023c:	6802      	ldrne	r2, [r0, #0]
 800023e:	2a00      	cmpne	r2, #0
 8000240:	d003      	beq.n	800024a <cmox_hash_cleanup+0x16>
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	b10a      	cbz	r2, 800024a <cmox_hash_cleanup+0x16>
 8000246:	4790      	blx	r2
 8000248:	4601      	mov	r1, r0
 800024a:	4608      	mov	r0, r1
 800024c:	bd02      	pop	{r1, pc}
 800024e:	bf00      	nop
 8000250:	00020003 	.word	0x00020003

08000254 <cmox_hash_init>:
 8000254:	2800      	cmp	r0, #0
 8000256:	b580      	push	{r7, lr}
 8000258:	4905      	ldr	r1, [pc, #20]	; (8000270 <cmox_hash_init+0x1c>)
 800025a:	bf1c      	itt	ne
 800025c:	6802      	ldrne	r2, [r0, #0]
 800025e:	2a00      	cmpne	r2, #0
 8000260:	d003      	beq.n	800026a <cmox_hash_init+0x16>
 8000262:	6852      	ldr	r2, [r2, #4]
 8000264:	b10a      	cbz	r2, 800026a <cmox_hash_init+0x16>
 8000266:	4790      	blx	r2
 8000268:	4601      	mov	r1, r0
 800026a:	4608      	mov	r0, r1
 800026c:	bd02      	pop	{r1, pc}
 800026e:	bf00      	nop
 8000270:	00020003 	.word	0x00020003

08000274 <cmox_hash_setTagLen>:
 8000274:	2800      	cmp	r0, #0
 8000276:	b580      	push	{r7, lr}
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <cmox_hash_setTagLen+0x20>)
 800027a:	bf1c      	itt	ne
 800027c:	6803      	ldrne	r3, [r0, #0]
 800027e:	2b00      	cmpne	r3, #0
 8000280:	d006      	beq.n	8000290 <cmox_hash_setTagLen+0x1c>
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf18      	it	ne
 8000288:	2900      	cmpne	r1, #0
 800028a:	d001      	beq.n	8000290 <cmox_hash_setTagLen+0x1c>
 800028c:	4798      	blx	r3
 800028e:	4602      	mov	r2, r0
 8000290:	4610      	mov	r0, r2
 8000292:	bd02      	pop	{r1, pc}
 8000294:	00020003 	.word	0x00020003

08000298 <cmox_hash_append>:
 8000298:	2800      	cmp	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	6803      	ldrne	r3, [r0, #0]
 800029e:	2b00      	cmpne	r3, #0
 80002a0:	d003      	beq.n	80002aa <cmox_hash_append+0x12>
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	b10b      	cbz	r3, 80002aa <cmox_hash_append+0x12>
 80002a6:	b911      	cbnz	r1, 80002ae <__iar_annotation$$tailcall>
 80002a8:	b112      	cbz	r2, 80002b0 <__iar_annotation$$tailcall+0x2>
 80002aa:	4803      	ldr	r0, [pc, #12]	; (80002b8 <__iar_annotation$$tailcall+0xa>)
 80002ac:	4770      	bx	lr

080002ae <__iar_annotation$$tailcall>:
 80002ae:	4718      	bx	r3
 80002b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	00020003 	.word	0x00020003

080002bc <cmox_hash_generateTag>:
 80002bc:	2800      	cmp	r0, #0
 80002be:	b510      	push	{r4, lr}
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <cmox_hash_generateTag+0x20>)
 80002c2:	bf1c      	itt	ne
 80002c4:	6804      	ldrne	r4, [r0, #0]
 80002c6:	2c00      	cmpne	r4, #0
 80002c8:	d006      	beq.n	80002d8 <cmox_hash_generateTag+0x1c>
 80002ca:	6924      	ldr	r4, [r4, #16]
 80002cc:	2c00      	cmp	r4, #0
 80002ce:	bf18      	it	ne
 80002d0:	2900      	cmpne	r1, #0
 80002d2:	d001      	beq.n	80002d8 <cmox_hash_generateTag+0x1c>
 80002d4:	47a0      	blx	r4
 80002d6:	4603      	mov	r3, r0
 80002d8:	4618      	mov	r0, r3
 80002da:	bd10      	pop	{r4, pc}
 80002dc:	00020003 	.word	0x00020003

080002e0 <cmox_hash_common_compute>:
 80002e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002e4:	4604      	mov	r4, r0
 80002e6:	460e      	mov	r6, r1
 80002e8:	6821      	ldr	r1, [r4, #0]
 80002ea:	4617      	mov	r7, r2
 80002ec:	461d      	mov	r5, r3
 80002ee:	684a      	ldr	r2, [r1, #4]
 80002f0:	4790      	blx	r2
 80002f2:	4680      	mov	r8, r0
 80002f4:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 80002f8:	d119      	bne.n	800032e <cmox_hash_common_compute+0x4e>
 80002fa:	6822      	ldr	r2, [r4, #0]
 80002fc:	9906      	ldr	r1, [sp, #24]
 80002fe:	4620      	mov	r0, r4
 8000300:	6893      	ldr	r3, [r2, #8]
 8000302:	4798      	blx	r3
 8000304:	4680      	mov	r8, r0
 8000306:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 800030a:	d110      	bne.n	800032e <cmox_hash_common_compute+0x4e>
 800030c:	6823      	ldr	r3, [r4, #0]
 800030e:	4631      	mov	r1, r6
 8000310:	463a      	mov	r2, r7
 8000312:	68de      	ldr	r6, [r3, #12]
 8000314:	4620      	mov	r0, r4
 8000316:	47b0      	blx	r6
 8000318:	4680      	mov	r8, r0
 800031a:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 800031e:	d106      	bne.n	800032e <cmox_hash_common_compute+0x4e>
 8000320:	6823      	ldr	r3, [r4, #0]
 8000322:	4629      	mov	r1, r5
 8000324:	9a07      	ldr	r2, [sp, #28]
 8000326:	691d      	ldr	r5, [r3, #16]
 8000328:	4620      	mov	r0, r4
 800032a:	47a8      	blx	r5
 800032c:	4680      	mov	r8, r0
 800032e:	6821      	ldr	r1, [r4, #0]
 8000330:	4620      	mov	r0, r4
 8000332:	680a      	ldr	r2, [r1, #0]
 8000334:	4790      	blx	r2
 8000336:	4640      	mov	r0, r8
 8000338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800033c <cmox_sha256_cleanup>:
 800033c:	b500      	push	{lr}
 800033e:	b081      	sub	sp, #4
 8000340:	6801      	ldr	r1, [r0, #0]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <cmox_sha256_cleanup+0x24>)
 8000344:	4291      	cmp	r1, r2
 8000346:	d100      	bne.n	800034a <cmox_sha256_cleanup+0xe>
 8000348:	b910      	cbnz	r0, 8000350 <cmox_sha256_cleanup+0x14>
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <cmox_sha256_cleanup+0x28>)
 800034c:	b001      	add	sp, #4
 800034e:	bd00      	pop	{pc}
 8000350:	217c      	movs	r1, #124	; 0x7c
 8000352:	f005 fbaf 	bl	8005ab4 <__aeabi_memclr>
 8000356:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800035a:	b001      	add	sp, #4
 800035c:	bd00      	pop	{pc}
 800035e:	bf00      	nop
 8000360:	0800044c 	.word	0x0800044c
 8000364:	00020003 	.word	0x00020003

08000368 <cmox_sha256_init>:
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <cmox_sha256_init+0x38>)
 800036a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800036e:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	4669      	mov	r1, sp
 8000376:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 800037a:	f8d0 9000 	ldr.w	r9, [r0]
 800037e:	f8df a024 	ldr.w	sl, [pc, #36]	; 80003a4 <cmox_sha256_init+0x3c>
 8000382:	45d1      	cmp	r9, sl
 8000384:	d100      	bne.n	8000388 <cmox_sha256_init+0x20>
 8000386:	b918      	cbnz	r0, 8000390 <cmox_sha256_init+0x28>
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <cmox_sha256_init+0x40>)
 800038a:	b008      	add	sp, #32
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	2220      	movs	r2, #32
 8000392:	3008      	adds	r0, #8
 8000394:	f000 f9cf 	bl	8000736 <cmox_md_init>
 8000398:	b008      	add	sp, #32
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	bf00      	nop
 80003a0:	0800042c 	.word	0x0800042c
 80003a4:	0800044c 	.word	0x0800044c
 80003a8:	00020003 	.word	0x00020003

080003ac <cmox_sha256_setTagLen>:
 80003ac:	2921      	cmp	r1, #33	; 0x21
 80003ae:	d204      	bcs.n	80003ba <cmox_sha256_setTagLen+0xe>
 80003b0:	6802      	ldr	r2, [r0, #0]
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <cmox_sha256_setTagLen+0x18>)
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d100      	bne.n	80003ba <cmox_sha256_setTagLen+0xe>
 80003b8:	b908      	cbnz	r0, 80003be <cmox_sha256_setTagLen+0x12>
 80003ba:	4803      	ldr	r0, [pc, #12]	; (80003c8 <cmox_sha256_setTagLen+0x1c>)
 80003bc:	4770      	bx	lr
 80003be:	3008      	adds	r0, #8
 80003c0:	f000 b9c8 	b.w	8000754 <cmox_md_setTagSize>
 80003c4:	0800044c 	.word	0x0800044c
 80003c8:	00020003 	.word	0x00020003

080003cc <cmox_sha256_append>:
 80003cc:	b410      	push	{r4}
 80003ce:	b081      	sub	sp, #4
 80003d0:	4613      	mov	r3, r2
 80003d2:	6802      	ldr	r2, [r0, #0]
 80003d4:	4c07      	ldr	r4, [pc, #28]	; (80003f4 <cmox_sha256_append+0x28>)
 80003d6:	42a2      	cmp	r2, r4
 80003d8:	d100      	bne.n	80003dc <cmox_sha256_append+0x10>
 80003da:	b918      	cbnz	r0, 80003e4 <cmox_sha256_append+0x18>
 80003dc:	b001      	add	sp, #4
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <cmox_sha256_append+0x2c>)
 80003e0:	bc10      	pop	{r4}
 80003e2:	4770      	bx	lr
 80003e4:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80003e8:	b001      	add	sp, #4
 80003ea:	3008      	adds	r0, #8
 80003ec:	bc10      	pop	{r4}
 80003ee:	f000 b9b5 	b.w	800075c <cmox_md_append>
 80003f2:	bf00      	nop
 80003f4:	0800044c 	.word	0x0800044c
 80003f8:	00020003 	.word	0x00020003

080003fc <cmox_sha256_generateTag>:
 80003fc:	b410      	push	{r4}
 80003fe:	b081      	sub	sp, #4
 8000400:	4613      	mov	r3, r2
 8000402:	6802      	ldr	r2, [r0, #0]
 8000404:	4c07      	ldr	r4, [pc, #28]	; (8000424 <cmox_sha256_generateTag+0x28>)
 8000406:	42a2      	cmp	r2, r4
 8000408:	d100      	bne.n	800040c <cmox_sha256_generateTag+0x10>
 800040a:	b918      	cbnz	r0, 8000414 <cmox_sha256_generateTag+0x18>
 800040c:	b001      	add	sp, #4
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <cmox_sha256_generateTag+0x2c>)
 8000410:	bc10      	pop	{r4}
 8000412:	4770      	bx	lr
 8000414:	460a      	mov	r2, r1
 8000416:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800041a:	b001      	add	sp, #4
 800041c:	3008      	adds	r0, #8
 800041e:	bc10      	pop	{r4}
 8000420:	f000 b9f0 	b.w	8000804 <cmox_md_generateTag>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	00020003 	.word	0x00020003
 800042c:	6a09e667 	.word	0x6a09e667
 8000430:	bb67ae85 	.word	0xbb67ae85
 8000434:	3c6ef372 	.word	0x3c6ef372
 8000438:	a54ff53a 	.word	0xa54ff53a
 800043c:	510e527f 	.word	0x510e527f
 8000440:	9b05688c 	.word	0x9b05688c
 8000444:	1f83d9ab 	.word	0x1f83d9ab
 8000448:	5be0cd19 	.word	0x5be0cd19

0800044c <CMOX_SHA256_VTABLE>:
 800044c:	0800033d 08000369 080003ad 080003cd     =...i...........
 800045c:	080003fd                                ....

08000460 <cmox_sha256_compute>:
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	4604      	mov	r4, r0
 8000464:	b0a3      	sub	sp, #140	; 0x8c
 8000466:	480b      	ldr	r0, [pc, #44]	; (8000494 <cmox_sha256_compute+0x34>)
 8000468:	460d      	mov	r5, r1
 800046a:	4616      	mov	r6, r2
 800046c:	461f      	mov	r7, r3
 800046e:	9002      	str	r0, [sp, #8]
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <cmox_sha256_compute+0x38>)
 8000472:	2208      	movs	r2, #8
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	a804      	add	r0, sp, #16
 8000478:	f000 f959 	bl	800072e <cmox_md_construct>
 800047c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800047e:	9700      	str	r7, [sp, #0]
 8000480:	4633      	mov	r3, r6
 8000482:	9001      	str	r0, [sp, #4]
 8000484:	462a      	mov	r2, r5
 8000486:	4621      	mov	r1, r4
 8000488:	a802      	add	r0, sp, #8
 800048a:	f7ff ff29 	bl	80002e0 <cmox_hash_common_compute>
 800048e:	b023      	add	sp, #140	; 0x8c
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	bf00      	nop
 8000494:	0800044c 	.word	0x0800044c
 8000498:	08005db4 	.word	0x08005db4

0800049c <cmox_sha256_construct>:
 800049c:	b510      	push	{r4, lr}
 800049e:	0004      	movs	r4, r0
 80004a0:	bf08      	it	eq
 80004a2:	2400      	moveq	r4, #0
 80004a4:	d008      	beq.n	80004b8 <cmox_sha256_construct+0x1c>
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <cmox_sha256_construct+0x20>)
 80004a8:	6020      	str	r0, [r4, #0]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <cmox_sha256_construct+0x24>)
 80004ac:	2208      	movs	r2, #8
 80004ae:	2140      	movs	r1, #64	; 0x40
 80004b0:	f104 0008 	add.w	r0, r4, #8
 80004b4:	f000 f93b 	bl	800072e <cmox_md_construct>
 80004b8:	4620      	mov	r0, r4
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	0800044c 	.word	0x0800044c
 80004c0:	08005db4 	.word	0x08005db4

080004c4 <cmox_sha256_transform>:
 80004c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c8:	b0c1      	sub	sp, #260	; 0x104
 80004ca:	680b      	ldr	r3, [r1, #0]
 80004cc:	4602      	mov	r2, r0
 80004ce:	a801      	add	r0, sp, #4
 80004d0:	ba1b      	rev	r3, r3
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	684b      	ldr	r3, [r1, #4]
 80004d6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80004da:	ba1b      	rev	r3, r3
 80004dc:	6043      	str	r3, [r0, #4]
 80004de:	688b      	ldr	r3, [r1, #8]
 80004e0:	ba1b      	rev	r3, r3
 80004e2:	6083      	str	r3, [r0, #8]
 80004e4:	68cb      	ldr	r3, [r1, #12]
 80004e6:	ba1b      	rev	r3, r3
 80004e8:	60c3      	str	r3, [r0, #12]
 80004ea:	690b      	ldr	r3, [r1, #16]
 80004ec:	ba1b      	rev	r3, r3
 80004ee:	6103      	str	r3, [r0, #16]
 80004f0:	694b      	ldr	r3, [r1, #20]
 80004f2:	ba1b      	rev	r3, r3
 80004f4:	6143      	str	r3, [r0, #20]
 80004f6:	698b      	ldr	r3, [r1, #24]
 80004f8:	ba1b      	rev	r3, r3
 80004fa:	6183      	str	r3, [r0, #24]
 80004fc:	69cb      	ldr	r3, [r1, #28]
 80004fe:	ba1b      	rev	r3, r3
 8000500:	61c3      	str	r3, [r0, #28]
 8000502:	6a0b      	ldr	r3, [r1, #32]
 8000504:	ba1b      	rev	r3, r3
 8000506:	6203      	str	r3, [r0, #32]
 8000508:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800050a:	ba1b      	rev	r3, r3
 800050c:	6243      	str	r3, [r0, #36]	; 0x24
 800050e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000510:	ba1b      	rev	r3, r3
 8000512:	6283      	str	r3, [r0, #40]	; 0x28
 8000514:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000516:	ba1b      	rev	r3, r3
 8000518:	62c3      	str	r3, [r0, #44]	; 0x2c
 800051a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800051c:	ba1b      	rev	r3, r3
 800051e:	6303      	str	r3, [r0, #48]	; 0x30
 8000520:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000522:	ba1b      	rev	r3, r3
 8000524:	6343      	str	r3, [r0, #52]	; 0x34
 8000526:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000528:	ba1b      	rev	r3, r3
 800052a:	6383      	str	r3, [r0, #56]	; 0x38
 800052c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800052e:	ba09      	rev	r1, r1
 8000530:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000532:	2018      	movs	r0, #24
 8000534:	f85c ec08 	ldr.w	lr, [ip, #-8]
 8000538:	ea4f 41fe 	mov.w	r1, lr, ror #19
 800053c:	ea91 437e 	eors.w	r3, r1, lr, ror #17
 8000540:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 8000544:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8000548:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 800054c:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8000550:	f85c ec1c 	ldr.w	lr, [ip, #-28]
 8000554:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8000558:	4473      	add	r3, lr
 800055a:	18f3      	adds	r3, r6, r3
 800055c:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8000560:	18f3      	adds	r3, r6, r3
 8000562:	f8cc 3000 	str.w	r3, [ip]
 8000566:	f85c ec04 	ldr.w	lr, [ip, #-4]
 800056a:	ea4f 46fe 	mov.w	r6, lr, ror #19
 800056e:	ea96 437e 	eors.w	r3, r6, lr, ror #17
 8000572:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 8000576:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 800057a:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 800057e:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8000582:	f85c ec18 	ldr.w	lr, [ip, #-24]
 8000586:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 800058a:	4473      	add	r3, lr
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	18c9      	adds	r1, r1, r3
 8000590:	f8cc 1004 	str.w	r1, [ip, #4]
 8000594:	f10c 0c08 	add.w	ip, ip, #8
 8000598:	1e40      	subs	r0, r0, #1
 800059a:	d1cb      	bne.n	8000534 <cmox_sha256_transform+0x70>
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	4610      	mov	r0, r2
 80005a0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80005a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80005a4:	f8d0 e060 	ldr.w	lr, [r0, #96]	; 0x60
 80005a8:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
 80005ac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80005ae:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80005b0:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 80005b4:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80005b6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80006b4 <cmox_sha256_transform+0x1f0>
 80005ba:	f10d 0c04 	add.w	ip, sp, #4
 80005be:	2020      	movs	r0, #32
 80005c0:	ea4f 16b3 	mov.w	r6, r3, ror #6
 80005c4:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 80005c8:	f85c 7b04 	ldr.w	r7, [ip], #4
 80005cc:	ea4e 0b01 	orr.w	fp, lr, r1
 80005d0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 80005d4:	ea0b 0b02 	and.w	fp, fp, r2
 80005d8:	1975      	adds	r5, r6, r5
 80005da:	ea84 0608 	eor.w	r6, r4, r8
 80005de:	401e      	ands	r6, r3
 80005e0:	4066      	eors	r6, r4
 80005e2:	1975      	adds	r5, r6, r5
 80005e4:	f859 6b04 	ldr.w	r6, [r9], #4
 80005e8:	1975      	adds	r5, r6, r5
 80005ea:	197e      	adds	r6, r7, r5
 80005ec:	ea4f 07b1 	mov.w	r7, r1, ror #2
 80005f0:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 80005f4:	ea0e 0501 	and.w	r5, lr, r1
 80005f8:	ea4b 0505 	orr.w	r5, fp, r5
 80005fc:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8000600:	19ef      	adds	r7, r5, r7
 8000602:	4645      	mov	r5, r8
 8000604:	eb06 080a 	add.w	r8, r6, sl
 8000608:	4692      	mov	sl, r2
 800060a:	4672      	mov	r2, lr
 800060c:	eb07 0e06 	add.w	lr, r7, r6
 8000610:	ea4f 16b8 	mov.w	r6, r8, ror #6
 8000614:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8000618:	f85c 7b04 	ldr.w	r7, [ip], #4
 800061c:	ea41 0b0e 	orr.w	fp, r1, lr
 8000620:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8000624:	ea0b 0b02 	and.w	fp, fp, r2
 8000628:	1934      	adds	r4, r6, r4
 800062a:	ea85 0603 	eor.w	r6, r5, r3
 800062e:	ea06 0608 	and.w	r6, r6, r8
 8000632:	406e      	eors	r6, r5
 8000634:	1934      	adds	r4, r6, r4
 8000636:	f859 6b04 	ldr.w	r6, [r9], #4
 800063a:	1934      	adds	r4, r6, r4
 800063c:	193e      	adds	r6, r7, r4
 800063e:	ea4f 07be 	mov.w	r7, lr, ror #2
 8000642:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 8000646:	ea01 040e 	and.w	r4, r1, lr
 800064a:	ea4b 0404 	orr.w	r4, fp, r4
 800064e:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 8000652:	19e7      	adds	r7, r4, r7
 8000654:	461c      	mov	r4, r3
 8000656:	eb06 030a 	add.w	r3, r6, sl
 800065a:	4692      	mov	sl, r2
 800065c:	460a      	mov	r2, r1
 800065e:	19b9      	adds	r1, r7, r6
 8000660:	1e40      	subs	r0, r0, #1
 8000662:	d1ad      	bne.n	80005c0 <cmox_sha256_transform+0xfc>
 8000664:	9800      	ldr	r0, [sp, #0]
 8000666:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 800066a:	4449      	add	r1, r9
 800066c:	65c1      	str	r1, [r0, #92]	; 0x5c
 800066e:	9900      	ldr	r1, [sp, #0]
 8000670:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8000672:	4486      	add	lr, r0
 8000674:	f8c1 e060 	str.w	lr, [r1, #96]	; 0x60
 8000678:	9800      	ldr	r0, [sp, #0]
 800067a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800067c:	1852      	adds	r2, r2, r1
 800067e:	6642      	str	r2, [r0, #100]	; 0x64
 8000680:	9900      	ldr	r1, [sp, #0]
 8000682:	6e88      	ldr	r0, [r1, #104]	; 0x68
 8000684:	4482      	add	sl, r0
 8000686:	f8c1 a068 	str.w	sl, [r1, #104]	; 0x68
 800068a:	9800      	ldr	r0, [sp, #0]
 800068c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800068e:	185b      	adds	r3, r3, r1
 8000690:	66c3      	str	r3, [r0, #108]	; 0x6c
 8000692:	9900      	ldr	r1, [sp, #0]
 8000694:	6f08      	ldr	r0, [r1, #112]	; 0x70
 8000696:	4480      	add	r8, r0
 8000698:	f8c1 8070 	str.w	r8, [r1, #112]	; 0x70
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80006a0:	1864      	adds	r4, r4, r1
 80006a2:	6744      	str	r4, [r0, #116]	; 0x74
 80006a4:	9900      	ldr	r1, [sp, #0]
 80006a6:	6f88      	ldr	r0, [r1, #120]	; 0x78
 80006a8:	182d      	adds	r5, r5, r0
 80006aa:	678d      	str	r5, [r1, #120]	; 0x78
 80006ac:	b041      	add	sp, #260	; 0x104
 80006ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006b2:	bf00      	nop
 80006b4:	08005cb4 	.word	0x08005cb4

080006b8 <cmox_md_updateState_small>:
 80006b8:	2220      	movs	r2, #32
 80006ba:	305c      	adds	r0, #92	; 0x5c
 80006bc:	f005 b9fd 	b.w	8005aba <__aeabi_memcpy>

080006c0 <cmox_md_copyLastState_small>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	6883      	ldr	r3, [r0, #8]
 80006c4:	2400      	movs	r4, #0
 80006c6:	089a      	lsrs	r2, r3, #2
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	e00f      	b.n	80006ee <cmox_md_copyLastState_small+0x2e>
 80006ce:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 80006d2:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 80006d4:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 80006d8:	1c64      	adds	r4, r4, #1
 80006da:	70ef      	strb	r7, [r5, #3]
 80006dc:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 80006de:	0a3f      	lsrs	r7, r7, #8
 80006e0:	70af      	strb	r7, [r5, #2]
 80006e2:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 80006e4:	0c3f      	lsrs	r7, r7, #16
 80006e6:	706f      	strb	r7, [r5, #1]
 80006e8:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 80006ea:	0e36      	lsrs	r6, r6, #24
 80006ec:	702e      	strb	r6, [r5, #0]
 80006ee:	4294      	cmp	r4, r2
 80006f0:	d3ed      	bcc.n	80006ce <cmox_md_copyLastState_small+0xe>
 80006f2:	2400      	movs	r4, #0
 80006f4:	e00b      	b.n	800070e <cmox_md_copyLastState_small+0x4e>
 80006f6:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 80006fa:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 80006fe:	00e5      	lsls	r5, r4, #3
 8000700:	f1c5 0518 	rsb	r5, r5, #24
 8000704:	40ee      	lsrs	r6, r5
 8000706:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 800070a:	55ce      	strb	r6, [r1, r7]
 800070c:	1c64      	adds	r4, r4, #1
 800070e:	429c      	cmp	r4, r3
 8000710:	d3f1      	bcc.n	80006f6 <cmox_md_copyLastState_small+0x36>
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000714 <cmox_md_padMsgLen_small>:
 8000714:	b530      	push	{r4, r5, lr}
 8000716:	68c4      	ldr	r4, [r0, #12]
 8000718:	6903      	ldr	r3, [r0, #16]
 800071a:	2200      	movs	r2, #0
 800071c:	1ae3      	subs	r3, r4, r3
 800071e:	5c8c      	ldrb	r4, [r1, r2]
 8000720:	18d5      	adds	r5, r2, r3
 8000722:	4405      	add	r5, r0
 8000724:	1c52      	adds	r2, r2, #1
 8000726:	772c      	strb	r4, [r5, #28]
 8000728:	2a08      	cmp	r2, #8
 800072a:	d3f8      	bcc.n	800071e <cmox_md_padMsgLen_small+0xa>
 800072c:	bd30      	pop	{r4, r5, pc}

0800072e <cmox_md_construct>:
 800072e:	6003      	str	r3, [r0, #0]
 8000730:	60c1      	str	r1, [r0, #12]
 8000732:	6102      	str	r2, [r0, #16]
 8000734:	4770      	bx	lr

08000736 <cmox_md_init>:
 8000736:	b538      	push	{r3, r4, r5, lr}
 8000738:	4615      	mov	r5, r2
 800073a:	4604      	mov	r4, r0
 800073c:	2200      	movs	r2, #0
 800073e:	6062      	str	r2, [r4, #4]
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	4790      	blx	r2
 8000746:	2000      	movs	r0, #0
 8000748:	6160      	str	r0, [r4, #20]
 800074a:	61a0      	str	r0, [r4, #24]
 800074c:	60a5      	str	r5, [r4, #8]
 800074e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000752:	bd32      	pop	{r1, r4, r5, pc}

08000754 <cmox_md_setTagSize>:
 8000754:	6081      	str	r1, [r0, #8]
 8000756:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800075a:	4770      	bx	lr

0800075c <cmox_md_append>:
 800075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000760:	4604      	mov	r4, r0
 8000762:	7920      	ldrb	r0, [r4, #4]
 8000764:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8000768:	0745      	lsls	r5, r0, #29
 800076a:	bf48      	it	mi
 800076c:	4824      	ldrmi	r0, [pc, #144]	; (8000800 <cmox_md_append+0xa4>)
 800076e:	d444      	bmi.n	80007fa <cmox_md_append+0x9e>
 8000770:	6966      	ldr	r6, [r4, #20]
 8000772:	461d      	mov	r5, r3
 8000774:	f1a8 0001 	sub.w	r0, r8, #1
 8000778:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 800077c:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8000780:	6166      	str	r6, [r4, #20]
 8000782:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 8000786:	d202      	bcs.n	800078e <cmox_md_append+0x32>
 8000788:	69a6      	ldr	r6, [r4, #24]
 800078a:	1c76      	adds	r6, r6, #1
 800078c:	61a6      	str	r6, [r4, #24]
 800078e:	69a6      	ldr	r6, [r4, #24]
 8000790:	4617      	mov	r7, r2
 8000792:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 8000796:	61a6      	str	r6, [r4, #24]
 8000798:	460e      	mov	r6, r1
 800079a:	18e9      	adds	r1, r5, r3
 800079c:	4288      	cmp	r0, r1
 800079e:	d224      	bcs.n	80007ea <cmox_md_append+0x8e>
 80007a0:	eba8 0903 	sub.w	r9, r8, r3
 80007a4:	464a      	mov	r2, r9
 80007a6:	4631      	mov	r1, r6
 80007a8:	18f8      	adds	r0, r7, r3
 80007aa:	f005 f986 	bl	8005aba <__aeabi_memcpy>
 80007ae:	6822      	ldr	r2, [r4, #0]
 80007b0:	4639      	mov	r1, r7
 80007b2:	e00e      	b.n	80007d2 <cmox_md_append+0x76>
 80007b4:	4642      	mov	r2, r8
 80007b6:	4638      	mov	r0, r7
 80007b8:	f005 f97f 	bl	8005aba <__aeabi_memcpy>
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	4639      	mov	r1, r7
 80007c0:	4620      	mov	r0, r4
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4790      	blx	r2
 80007c6:	e007      	b.n	80007d8 <cmox_md_append+0x7c>
 80007c8:	1831      	adds	r1, r6, r0
 80007ca:	f011 0003 	ands.w	r0, r1, #3
 80007ce:	d1f1      	bne.n	80007b4 <cmox_md_append+0x58>
 80007d0:	6822      	ldr	r2, [r4, #0]
 80007d2:	4620      	mov	r0, r4
 80007d4:	6813      	ldr	r3, [r2, #0]
 80007d6:	4798      	blx	r3
 80007d8:	4648      	mov	r0, r9
 80007da:	eb00 0908 	add.w	r9, r0, r8
 80007de:	f1a9 0101 	sub.w	r1, r9, #1
 80007e2:	42a9      	cmp	r1, r5
 80007e4:	d3f0      	bcc.n	80007c8 <cmox_md_append+0x6c>
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <cmox_md_append+0x90>
 80007ea:	2000      	movs	r0, #0
 80007ec:	1a2a      	subs	r2, r5, r0
 80007ee:	1831      	adds	r1, r6, r0
 80007f0:	18f8      	adds	r0, r7, r3
 80007f2:	f005 f962 	bl	8005aba <__aeabi_memcpy>
 80007f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007fa:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 80007fe:	bf00      	nop
 8000800:	00020004 	.word	0x00020004

08000804 <cmox_md_generateTag>:
 8000804:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000808:	b085      	sub	sp, #20
 800080a:	4602      	mov	r2, r0
 800080c:	68d0      	ldr	r0, [r2, #12]
 800080e:	6913      	ldr	r3, [r2, #16]
 8000810:	2700      	movs	r7, #0
 8000812:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8000980 <cmox_md_generateTag+0x17c>
 8000816:	eba0 0a03 	sub.w	sl, r0, r3
 800081a:	6850      	ldr	r0, [r2, #4]
 800081c:	f10d 0e0c 	add.w	lr, sp, #12
 8000820:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8000984 <cmox_md_generateTag+0x180>
 8000824:	f040 0004 	orr.w	r0, r0, #4
 8000828:	6050      	str	r0, [r2, #4]
 800082a:	a803      	add	r0, sp, #12
 800082c:	9002      	str	r0, [sp, #8]
 800082e:	e9d8 3400 	ldrd	r3, r4, [r8]
 8000832:	a803      	add	r0, sp, #12
 8000834:	4d54      	ldr	r5, [pc, #336]	; (8000988 <cmox_md_generateTag+0x184>)
 8000836:	e9c0 3400 	strd	r3, r4, [r0]
 800083a:	7828      	ldrb	r0, [r5, #0]
 800083c:	4d53      	ldr	r5, [pc, #332]	; (800098c <cmox_md_generateTag+0x188>)
 800083e:	2800      	cmp	r0, #0
 8000840:	bf0c      	ite	eq
 8000842:	2300      	moveq	r3, #0
 8000844:	2304      	movne	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	f85c 3003 	ldr.w	r3, [ip, r3]
 800084c:	f85e 4009 	ldr.w	r4, [lr, r9]
 8000850:	2601      	movs	r6, #1
 8000852:	4423      	add	r3, r4
 8000854:	601d      	str	r5, [r3, #0]
 8000856:	681c      	ldr	r4, [r3, #0]
 8000858:	609e      	str	r6, [r3, #8]
 800085a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800085e:	9d03      	ldr	r5, [sp, #12]
 8000860:	f8dc 9000 	ldr.w	r9, [ip]
 8000864:	f8de 6004 	ldr.w	r6, [lr, #4]
 8000868:	405d      	eors	r5, r3
 800086a:	4065      	eors	r5, r4
 800086c:	4c48      	ldr	r4, [pc, #288]	; (8000990 <cmox_md_generateTag+0x18c>)
 800086e:	4065      	eors	r5, r4
 8000870:	ea89 0606 	eor.w	r6, r9, r6
 8000874:	4c47      	ldr	r4, [pc, #284]	; (8000994 <cmox_md_generateTag+0x190>)
 8000876:	4066      	eors	r6, r4
 8000878:	1975      	adds	r5, r6, r5
 800087a:	4c47      	ldr	r4, [pc, #284]	; (8000998 <cmox_md_generateTag+0x194>)
 800087c:	e9d8 6b00 	ldrd	r6, fp, [r8]
 8000880:	4065      	eors	r5, r4
 8000882:	2800      	cmp	r0, #0
 8000884:	ac03      	add	r4, sp, #12
 8000886:	e9c4 6b00 	strd	r6, fp, [r4]
 800088a:	9e02      	ldr	r6, [sp, #8]
 800088c:	bf0e      	itee	eq
 800088e:	2400      	moveq	r4, #0
 8000890:	2004      	movne	r0, #4
 8000892:	2404      	movne	r4, #4
 8000894:	f85c 0000 	ldr.w	r0, [ip, r0]
 8000898:	5934      	ldr	r4, [r6, r4]
 800089a:	2601      	movs	r6, #1
 800089c:	1820      	adds	r0, r4, r0
 800089e:	4c3f      	ldr	r4, [pc, #252]	; (800099c <cmox_md_generateTag+0x198>)
 80008a0:	6004      	str	r4, [r0, #0]
 80008a2:	6804      	ldr	r4, [r0, #0]
 80008a4:	6086      	str	r6, [r0, #8]
 80008a6:	9803      	ldr	r0, [sp, #12]
 80008a8:	9e02      	ldr	r6, [sp, #8]
 80008aa:	4043      	eors	r3, r0
 80008ac:	4063      	eors	r3, r4
 80008ae:	6870      	ldr	r0, [r6, #4]
 80008b0:	4c37      	ldr	r4, [pc, #220]	; (8000990 <cmox_md_generateTag+0x18c>)
 80008b2:	4063      	eors	r3, r4
 80008b4:	ea89 0000 	eor.w	r0, r9, r0
 80008b8:	4c36      	ldr	r4, [pc, #216]	; (8000994 <cmox_md_generateTag+0x190>)
 80008ba:	4060      	eors	r0, r4
 80008bc:	4403      	add	r3, r0
 80008be:	4838      	ldr	r0, [pc, #224]	; (80009a0 <cmox_md_generateTag+0x19c>)
 80008c0:	4043      	eors	r3, r0
 80008c2:	0028      	movs	r0, r5
 80008c4:	bf18      	it	ne
 80008c6:	2001      	movne	r0, #1
 80008c8:	1e5b      	subs	r3, r3, #1
 80008ca:	419b      	sbcs	r3, r3
 80008cc:	2f04      	cmp	r7, #4
 80008ce:	bf2c      	ite	cs
 80008d0:	b2c0      	uxtbcs	r0, r0
 80008d2:	0fd8      	lsrcc	r0, r3, #31
 80008d4:	f102 0314 	add.w	r3, r2, #20
 80008d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80008dc:	f007 0303 	and.w	r3, r7, #3
 80008e0:	f1c3 0303 	rsb	r3, r3, #3
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	f80d 0007 	strb.w	r0, [sp, r7]
 80008ec:	1c7f      	adds	r7, r7, #1
 80008ee:	2f08      	cmp	r7, #8
 80008f0:	d39d      	bcc.n	800082e <cmox_md_generateTag+0x2a>
 80008f2:	4615      	mov	r5, r2
 80008f4:	696a      	ldr	r2, [r5, #20]
 80008f6:	69ab      	ldr	r3, [r5, #24]
 80008f8:	68e8      	ldr	r0, [r5, #12]
 80008fa:	08d2      	lsrs	r2, r2, #3
 80008fc:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8000900:	1e40      	subs	r0, r0, #1
 8000902:	2300      	movs	r3, #0
 8000904:	ea00 0702 	and.w	r7, r0, r2
 8000908:	4002      	ands	r2, r0
 800090a:	460c      	mov	r4, r1
 800090c:	429b      	cmp	r3, r3
 800090e:	d80a      	bhi.n	8000926 <cmox_md_generateTag+0x122>
 8000910:	4552      	cmp	r2, sl
 8000912:	d208      	bcs.n	8000926 <cmox_md_generateTag+0x122>
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	55e0      	strb	r0, [r4, r7]
 8000918:	1c7f      	adds	r7, r7, #1
 800091a:	4557      	cmp	r7, sl
 800091c:	d216      	bcs.n	800094c <cmox_md_generateTag+0x148>
 800091e:	ebaa 0107 	sub.w	r1, sl, r7
 8000922:	19e0      	adds	r0, r4, r7
 8000924:	e010      	b.n	8000948 <cmox_md_generateTag+0x144>
 8000926:	2080      	movs	r0, #128	; 0x80
 8000928:	55e0      	strb	r0, [r4, r7]
 800092a:	e000      	b.n	800092e <cmox_md_generateTag+0x12a>
 800092c:	55e3      	strb	r3, [r4, r7]
 800092e:	68e8      	ldr	r0, [r5, #12]
 8000930:	1c7f      	adds	r7, r7, #1
 8000932:	4287      	cmp	r7, r0
 8000934:	d3fa      	bcc.n	800092c <cmox_md_generateTag+0x128>
 8000936:	682a      	ldr	r2, [r5, #0]
 8000938:	4628      	mov	r0, r5
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	4798      	blx	r3
 800093e:	f1ba 0f00 	cmp.w	sl, #0
 8000942:	d003      	beq.n	800094c <cmox_md_generateTag+0x148>
 8000944:	4651      	mov	r1, sl
 8000946:	4620      	mov	r0, r4
 8000948:	f005 f8b4 	bl	8005ab4 <__aeabi_memclr>
 800094c:	682a      	ldr	r2, [r5, #0]
 800094e:	9e06      	ldr	r6, [sp, #24]
 8000950:	9f05      	ldr	r7, [sp, #20]
 8000952:	6893      	ldr	r3, [r2, #8]
 8000954:	4669      	mov	r1, sp
 8000956:	4628      	mov	r0, r5
 8000958:	4798      	blx	r3
 800095a:	682a      	ldr	r2, [r5, #0]
 800095c:	4621      	mov	r1, r4
 800095e:	4628      	mov	r0, r5
 8000960:	f8d2 9000 	ldr.w	r9, [r2]
 8000964:	47c8      	blx	r9
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	4639      	mov	r1, r7
 800096a:	4628      	mov	r0, r5
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	4790      	blx	r2
 8000970:	b10e      	cbz	r6, 8000976 <cmox_md_generateTag+0x172>
 8000972:	68a8      	ldr	r0, [r5, #8]
 8000974:	6030      	str	r0, [r6, #0]
 8000976:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800097a:	b007      	add	sp, #28
 800097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000980:	08005dc4 	.word	0x08005dc4
 8000984:	080009a4 	.word	0x080009a4
 8000988:	20000044 	.word	0x20000044
 800098c:	9310c55f 	.word	0x9310c55f
 8000990:	12008504 	.word	0x12008504
 8000994:	7a0168fc 	.word	0x7a0168fc
 8000998:	ff24f5c0 	.word	0xff24f5c0
 800099c:	d433af24 	.word	0xd433af24
 80009a0:	8b69af26 	.word	0x8b69af26
 80009a4:	0101b004 	.word	0x0101b004
 80009a8:	45011700 	.word	0x45011700

080009ac <__aeabi_memset>:
 80009ac:	b470      	push	{r4, r5, r6}
 80009ae:	0784      	lsls	r4, r0, #30
 80009b0:	d046      	beq.n	8000a40 <__aeabi_memset+0x94>
 80009b2:	1e4c      	subs	r4, r1, #1
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d041      	beq.n	8000a3c <__aeabi_memset+0x90>
 80009b8:	b2d5      	uxtb	r5, r2
 80009ba:	4603      	mov	r3, r0
 80009bc:	e002      	b.n	80009c4 <__aeabi_memset+0x18>
 80009be:	1e61      	subs	r1, r4, #1
 80009c0:	b3e4      	cbz	r4, 8000a3c <__aeabi_memset+0x90>
 80009c2:	460c      	mov	r4, r1
 80009c4:	f803 5b01 	strb.w	r5, [r3], #1
 80009c8:	0799      	lsls	r1, r3, #30
 80009ca:	d1f8      	bne.n	80009be <__aeabi_memset+0x12>
 80009cc:	2c03      	cmp	r4, #3
 80009ce:	d92e      	bls.n	8000a2e <__aeabi_memset+0x82>
 80009d0:	b2d5      	uxtb	r5, r2
 80009d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80009d6:	2c0f      	cmp	r4, #15
 80009d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80009dc:	d919      	bls.n	8000a12 <__aeabi_memset+0x66>
 80009de:	4626      	mov	r6, r4
 80009e0:	f103 0110 	add.w	r1, r3, #16
 80009e4:	3e10      	subs	r6, #16
 80009e6:	2e0f      	cmp	r6, #15
 80009e8:	f841 5c10 	str.w	r5, [r1, #-16]
 80009ec:	f841 5c0c 	str.w	r5, [r1, #-12]
 80009f0:	f841 5c08 	str.w	r5, [r1, #-8]
 80009f4:	f841 5c04 	str.w	r5, [r1, #-4]
 80009f8:	f101 0110 	add.w	r1, r1, #16
 80009fc:	d8f2      	bhi.n	80009e4 <__aeabi_memset+0x38>
 80009fe:	f1a4 0110 	sub.w	r1, r4, #16
 8000a02:	f021 010f 	bic.w	r1, r1, #15
 8000a06:	f004 040f 	and.w	r4, r4, #15
 8000a0a:	3110      	adds	r1, #16
 8000a0c:	2c03      	cmp	r4, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	d90d      	bls.n	8000a2e <__aeabi_memset+0x82>
 8000a12:	461e      	mov	r6, r3
 8000a14:	4621      	mov	r1, r4
 8000a16:	3904      	subs	r1, #4
 8000a18:	2903      	cmp	r1, #3
 8000a1a:	f846 5b04 	str.w	r5, [r6], #4
 8000a1e:	d8fa      	bhi.n	8000a16 <__aeabi_memset+0x6a>
 8000a20:	1f21      	subs	r1, r4, #4
 8000a22:	f021 0103 	bic.w	r1, r1, #3
 8000a26:	3104      	adds	r1, #4
 8000a28:	440b      	add	r3, r1
 8000a2a:	f004 0403 	and.w	r4, r4, #3
 8000a2e:	b12c      	cbz	r4, 8000a3c <__aeabi_memset+0x90>
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	441c      	add	r4, r3
 8000a34:	f803 2b01 	strb.w	r2, [r3], #1
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d1fb      	bne.n	8000a34 <__aeabi_memset+0x88>
 8000a3c:	bc70      	pop	{r4, r5, r6}
 8000a3e:	4770      	bx	lr
 8000a40:	460c      	mov	r4, r1
 8000a42:	4603      	mov	r3, r0
 8000a44:	e7c2      	b.n	80009cc <__aeabi_memset+0x20>
	...

08000a48 <__aeabi_uldivmod>:
 8000a48:	b953      	cbnz	r3, 8000a60 <__aeabi_uldivmod+0x18>
 8000a4a:	b94a      	cbnz	r2, 8000a60 <__aeabi_uldivmod+0x18>
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	bf08      	it	eq
 8000a50:	2800      	cmpeq	r0, #0
 8000a52:	bf1c      	itt	ne
 8000a54:	f04f 31ff 	movne.w	r1, #4294967295
 8000a58:	f04f 30ff 	movne.w	r0, #4294967295
 8000a5c:	f000 b982 	b.w	8000d64 <__aeabi_idiv0>
 8000a60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a68:	f000 f806 	bl	8000a78 <__udivmoddi4>
 8000a6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a74:	b004      	add	sp, #16
 8000a76:	4770      	bx	lr

08000a78 <__udivmoddi4>:
 8000a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a7e:	4604      	mov	r4, r0
 8000a80:	460f      	mov	r7, r1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d148      	bne.n	8000b18 <__udivmoddi4+0xa0>
 8000a86:	428a      	cmp	r2, r1
 8000a88:	4694      	mov	ip, r2
 8000a8a:	d961      	bls.n	8000b50 <__udivmoddi4+0xd8>
 8000a8c:	fab2 f382 	clz	r3, r2
 8000a90:	b143      	cbz	r3, 8000aa4 <__udivmoddi4+0x2c>
 8000a92:	f1c3 0120 	rsb	r1, r3, #32
 8000a96:	409f      	lsls	r7, r3
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	409c      	lsls	r4, r3
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	430f      	orrs	r7, r1
 8000aa4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aa8:	fa1f fe8c 	uxth.w	lr, ip
 8000aac:	0c22      	lsrs	r2, r4, #16
 8000aae:	fbb7 f6f1 	udiv	r6, r7, r1
 8000ab2:	fb01 7716 	mls	r7, r1, r6, r7
 8000ab6:	fb06 f00e 	mul.w	r0, r6, lr
 8000aba:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x5c>
 8000ac2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac6:	f106 37ff 	add.w	r7, r6, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x5a>
 8000acc:	4290      	cmp	r0, r2
 8000ace:	f200 8137 	bhi.w	8000d40 <__udivmoddi4+0x2c8>
 8000ad2:	463e      	mov	r6, r7
 8000ad4:	1a12      	subs	r2, r2, r0
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb2 f0f1 	udiv	r0, r2, r1
 8000adc:	fb01 2210 	mls	r2, r1, r0, r2
 8000ae0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x86>
 8000aec:	eb1c 0404 	adds.w	r4, ip, r4
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	d202      	bcs.n	8000afc <__udivmoddi4+0x84>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f200 811c 	bhi.w	8000d34 <__udivmoddi4+0x2bc>
 8000afc:	4610      	mov	r0, r2
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	eba4 040e 	sub.w	r4, r4, lr
 8000b06:	2600      	movs	r6, #0
 8000b08:	b11d      	cbz	r5, 8000b12 <__udivmoddi4+0x9a>
 8000b0a:	40dc      	lsrs	r4, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e9c5 4300 	strd	r4, r3, [r5]
 8000b12:	4631      	mov	r1, r6
 8000b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0xb8>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	f000 80fd 	beq.w	8000d1c <__udivmoddi4+0x2a4>
 8000b22:	2600      	movs	r6, #0
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	4630      	mov	r0, r6
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b30:	fab3 f683 	clz	r6, r3
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d14b      	bne.n	8000bd0 <__udivmoddi4+0x158>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	f0c0 80f2 	bcc.w	8000d22 <__udivmoddi4+0x2aa>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f240 80ef 	bls.w	8000d22 <__udivmoddi4+0x2aa>
 8000b44:	4630      	mov	r0, r6
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e3      	beq.n	8000b12 <__udivmoddi4+0x9a>
 8000b4a:	e9c5 4700 	strd	r4, r7, [r5]
 8000b4e:	e7e0      	b.n	8000b12 <__udivmoddi4+0x9a>
 8000b50:	b902      	cbnz	r2, 8000b54 <__udivmoddi4+0xdc>
 8000b52:	deff      	udf	#255	; 0xff
 8000b54:	fab2 f382 	clz	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f040 809d 	bne.w	8000c98 <__udivmoddi4+0x220>
 8000b5e:	1a89      	subs	r1, r1, r2
 8000b60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b64:	b297      	uxth	r7, r2
 8000b66:	2601      	movs	r6, #1
 8000b68:	0c20      	lsrs	r0, r4, #16
 8000b6a:	fbb1 f2fe 	udiv	r2, r1, lr
 8000b6e:	fb0e 1112 	mls	r1, lr, r2, r1
 8000b72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b76:	fb07 f002 	mul.w	r0, r7, r2
 8000b7a:	4288      	cmp	r0, r1
 8000b7c:	d90f      	bls.n	8000b9e <__udivmoddi4+0x126>
 8000b7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b82:	f102 38ff 	add.w	r8, r2, #4294967295
 8000b86:	bf2c      	ite	cs
 8000b88:	f04f 0901 	movcs.w	r9, #1
 8000b8c:	f04f 0900 	movcc.w	r9, #0
 8000b90:	4288      	cmp	r0, r1
 8000b92:	d903      	bls.n	8000b9c <__udivmoddi4+0x124>
 8000b94:	f1b9 0f00 	cmp.w	r9, #0
 8000b98:	f000 80cf 	beq.w	8000d3a <__udivmoddi4+0x2c2>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	1a09      	subs	r1, r1, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000baa:	fb00 f707 	mul.w	r7, r0, r7
 8000bae:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb2:	42a7      	cmp	r7, r4
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x150>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14e>
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	f200 80b4 	bhi.w	8000d2e <__udivmoddi4+0x2b6>
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	1be4      	subs	r4, r4, r7
 8000bca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000bce:	e79b      	b.n	8000b08 <__udivmoddi4+0x90>
 8000bd0:	f1c6 0720 	rsb	r7, r6, #32
 8000bd4:	40b3      	lsls	r3, r6
 8000bd6:	fa01 f406 	lsl.w	r4, r1, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	40f9      	lsrs	r1, r7
 8000be0:	40b2      	lsls	r2, r6
 8000be2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	fa1f fe8c 	uxth.w	lr, ip
 8000bf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfe:	fb09 1118 	mls	r1, r9, r8, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d90f      	bls.n	8000c2e <__udivmoddi4+0x1b6>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c16:	bf2c      	ite	cs
 8000c18:	f04f 0b01 	movcs.w	fp, #1
 8000c1c:	f04f 0b00 	movcc.w	fp, #0
 8000c20:	4288      	cmp	r0, r1
 8000c22:	d903      	bls.n	8000c2c <__udivmoddi4+0x1b4>
 8000c24:	f1bb 0f00 	cmp.w	fp, #0
 8000c28:	f000 808d 	beq.w	8000d46 <__udivmoddi4+0x2ce>
 8000c2c:	46d0      	mov	r8, sl
 8000c2e:	1a09      	subs	r1, r1, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c36:	fb09 1110 	mls	r1, r9, r0, r1
 8000c3a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c42:	458e      	cmp	lr, r1
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1de>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4e:	d201      	bcs.n	8000c54 <__udivmoddi4+0x1dc>
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d87f      	bhi.n	8000d54 <__udivmoddi4+0x2dc>
 8000c54:	4620      	mov	r0, r4
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	eba1 010e 	sub.w	r1, r1, lr
 8000c5e:	fba0 9802 	umull	r9, r8, r0, r2
 8000c62:	4541      	cmp	r1, r8
 8000c64:	464c      	mov	r4, r9
 8000c66:	46c6      	mov	lr, r8
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0x1f8>
 8000c6a:	d106      	bne.n	8000c7a <__udivmoddi4+0x202>
 8000c6c:	454b      	cmp	r3, r9
 8000c6e:	d204      	bcs.n	8000c7a <__udivmoddi4+0x202>
 8000c70:	3801      	subs	r0, #1
 8000c72:	ebb9 0402 	subs.w	r4, r9, r2
 8000c76:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d070      	beq.n	8000d60 <__udivmoddi4+0x2e8>
 8000c7e:	1b1a      	subs	r2, r3, r4
 8000c80:	eb61 010e 	sbc.w	r1, r1, lr
 8000c84:	fa22 f306 	lsr.w	r3, r2, r6
 8000c88:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8c:	40f1      	lsrs	r1, r6
 8000c8e:	2600      	movs	r6, #0
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	e73c      	b.n	8000b12 <__udivmoddi4+0x9a>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0020 	rsb	r0, r3, #32
 8000ca0:	fa01 f203 	lsl.w	r2, r1, r3
 8000ca4:	fa21 f600 	lsr.w	r6, r1, r0
 8000ca8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cac:	fa24 f100 	lsr.w	r1, r4, r0
 8000cb0:	fa1f f78c 	uxth.w	r7, ip
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	4311      	orrs	r1, r2
 8000cb8:	fbb6 f0fe 	udiv	r0, r6, lr
 8000cbc:	0c0a      	lsrs	r2, r1, #16
 8000cbe:	fb0e 6610 	mls	r6, lr, r0, r6
 8000cc2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000cc6:	fb00 f607 	mul.w	r6, r0, r7
 8000cca:	4296      	cmp	r6, r2
 8000ccc:	d90e      	bls.n	8000cec <__udivmoddi4+0x274>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd6:	bf2c      	ite	cs
 8000cd8:	f04f 0901 	movcs.w	r9, #1
 8000cdc:	f04f 0900 	movcc.w	r9, #0
 8000ce0:	4296      	cmp	r6, r2
 8000ce2:	d902      	bls.n	8000cea <__udivmoddi4+0x272>
 8000ce4:	f1b9 0f00 	cmp.w	r9, #0
 8000ce8:	d031      	beq.n	8000d4e <__udivmoddi4+0x2d6>
 8000cea:	4640      	mov	r0, r8
 8000cec:	1b92      	subs	r2, r2, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb2 f6fe 	udiv	r6, r2, lr
 8000cf4:	fb0e 2216 	mls	r2, lr, r6, r2
 8000cf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000cfc:	fb06 f207 	mul.w	r2, r6, r7
 8000d00:	428a      	cmp	r2, r1
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x29c>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x29a>
 8000d0e:	428a      	cmp	r2, r1
 8000d10:	d823      	bhi.n	8000d5a <__udivmoddi4+0x2e2>
 8000d12:	4646      	mov	r6, r8
 8000d14:	1a89      	subs	r1, r1, r2
 8000d16:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1a:	e725      	b.n	8000b68 <__udivmoddi4+0xf0>
 8000d1c:	462e      	mov	r6, r5
 8000d1e:	4628      	mov	r0, r5
 8000d20:	e6f7      	b.n	8000b12 <__udivmoddi4+0x9a>
 8000d22:	1a84      	subs	r4, r0, r2
 8000d24:	eb61 0303 	sbc.w	r3, r1, r3
 8000d28:	2001      	movs	r0, #1
 8000d2a:	461f      	mov	r7, r3
 8000d2c:	e70b      	b.n	8000b46 <__udivmoddi4+0xce>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	e749      	b.n	8000bc8 <__udivmoddi4+0x150>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	e6e1      	b.n	8000afe <__udivmoddi4+0x86>
 8000d3a:	3a02      	subs	r2, #2
 8000d3c:	4461      	add	r1, ip
 8000d3e:	e72e      	b.n	8000b9e <__udivmoddi4+0x126>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4462      	add	r2, ip
 8000d44:	e6c6      	b.n	8000ad4 <__udivmoddi4+0x5c>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	e76f      	b.n	8000c2e <__udivmoddi4+0x1b6>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4462      	add	r2, ip
 8000d52:	e7cb      	b.n	8000cec <__udivmoddi4+0x274>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4461      	add	r1, ip
 8000d58:	e77d      	b.n	8000c56 <__udivmoddi4+0x1de>
 8000d5a:	3e02      	subs	r6, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	e7d9      	b.n	8000d14 <__udivmoddi4+0x29c>
 8000d60:	462e      	mov	r6, r5
 8000d62:	e6d6      	b.n	8000b12 <__udivmoddi4+0x9a>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <SIGMA_GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t SIGMA_GetPage(uint32_t Addr)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00e      	beq.n	8000d9e <SIGMA_GetPage+0x36>
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <SIGMA_GetPage+0x32>
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	029b      	lsls	r3, r3, #10
 8000d8e:	085a      	lsrs	r2, r3, #1
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <SIGMA_GetPage+0x90>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000d98:	e002      	b.n	8000da0 <SIGMA_GetPage+0x38>
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <SIGMA_GetPage+0x94>)
 8000d9c:	e000      	b.n	8000da0 <SIGMA_GetPage+0x38>
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <SIGMA_GetPage+0x94>)
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d905      	bls.n	8000db2 <SIGMA_GetPage+0x4a>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000dac:	0adb      	lsrs	r3, r3, #11
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e019      	b.n	8000de6 <SIGMA_GetPage+0x7e>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00e      	beq.n	8000ddc <SIGMA_GetPage+0x74>
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <SIGMA_GetPage+0x70>
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <SIGMA_GetPage+0x8c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	029b      	lsls	r3, r3, #10
 8000dcc:	085a      	lsrs	r2, r3, #1
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SIGMA_GetPage+0x90>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000dd6:	e002      	b.n	8000dde <SIGMA_GetPage+0x76>
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <SIGMA_GetPage+0x94>)
 8000dda:	e000      	b.n	8000dde <SIGMA_GetPage+0x76>
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <SIGMA_GetPage+0x94>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	0adb      	lsrs	r3, r3, #11
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	0bfa05e0 	.word	0x0bfa05e0
 8000df8:	001ffe00 	.word	0x001ffe00
 8000dfc:	08040000 	.word	0x08040000

08000e00 <SIGMA_GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t SIGMA_GetBank(uint32_t Addr)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SIGMA_Iflash_Erase>:
 * Unlocking Internal Flash before doing any action
 *
 * @return  Standard 1/FALSE
 */

HAL_StatusTypeDef SIGMA_Iflash_Erase (uint32_t address) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
      
	HAL_StatusTypeDef      status          = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77fb      	strb	r3, [r7, #31]
	uint32_t               PageError       = 0u;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
	FLASH_EraseInitTypeDef EraseInitStruct = {};
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]

	//
	// Unlock the flash to enable the flash control register access.
	//
	HAL_FLASH_Unlock();
 8000e36:	f001 f859 	bl	8001eec <HAL_FLASH_Unlock>

  /* Erase the user Flash area
  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  /* Get the 1st page to erase */
  FirstPage = SIGMA_GetPage(address);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff94 	bl	8000d68 <SIGMA_GetPage>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <SIGMA_Iflash_Erase+0x94>)
 8000e44:	6013      	str	r3, [r2, #0]

  /* Get the last page to erase */
  LastPage = SIGMA_GetPage(FLASH_BANK1_END);
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <SIGMA_Iflash_Erase+0x98>)
 8000e48:	f7ff ff8e 	bl	8000d68 <SIGMA_GetPage>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <SIGMA_Iflash_Erase+0x9c>)
 8000e50:	6013      	str	r3, [r2, #0]

  /* Get the number of pages to erase from 1st page */
  NbOfPages = LastPage - FirstPage + 1;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <SIGMA_Iflash_Erase+0x9c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <SIGMA_Iflash_Erase+0x94>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <SIGMA_Iflash_Erase+0xa0>)
 8000e60:	6013      	str	r3, [r2, #0]

  /* Get the bank */
  BankNumber = SIGMA_GetBank(address);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffcc 	bl	8000e00 <SIGMA_GetBank>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <SIGMA_Iflash_Erase+0xa4>)
 8000e6c:	6013      	str	r3, [r2, #0]

	//
	// Setup to erase the user flash area a sector at a time.
	//
	EraseInitStruct.Banks         = BankNumber;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <SIGMA_Iflash_Erase+0xa4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbPages       = NbOfPages;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <SIGMA_Iflash_Erase+0xa0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Page          = FirstPage;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <SIGMA_Iflash_Erase+0x94>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]

	//
	// Erase sectors in increasing order until complete or error encountered.
	//

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8000e84:	f107 0218 	add.w	r2, r7, #24
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 f8e6 	bl	8002060 <HAL_FLASHEx_Erase>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SIGMA_Iflash_Erase+0x86>
		status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	77fb      	strb	r3, [r7, #31]

	//
	// Lock the flash to disable the flash control register access. (recommended
	// to protect the flash memory against possible unwanted operation)
	//
	HAL_FLASH_Lock();
 8000e9e:	f001 f847 	bl	8001f30 <HAL_FLASH_Lock>

	ERROR:
	    //
	    // If any unahndled error still remains, return 1, otherwise 0.
	    //
	    return status;
 8000ea2:	7ffb      	ldrb	r3, [r7, #31]
    
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000004c 	.word	0x2000004c
 8000eb0:	0803ffff 	.word	0x0803ffff
 8000eb4:	20000050 	.word	0x20000050
 8000eb8:	20000054 	.word	0x20000054
 8000ebc:	20000058 	.word	0x20000058

08000ec0 <SIGMA_Iflash_Write>:
 * @param   size     Size of the data buffer
 * @return  Standard 1/0
 */
HAL_StatusTypeDef SIGMA_Iflash_Write(   uint32_t             address,
                                        uint8_t     *        pData,
                                        uint32_t             size) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]

	uint32_t  nBytesWritten       = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef   status    = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	74fb      	strb	r3, [r7, #19]

	//
	// If the size of the data buffer is zero, skip.
	//
	if (!size) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <SIGMA_Iflash_Write+0x20>
	  status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	74fb      	strb	r3, [r7, #19]
    goto ERROR;
 8000ede:	e020      	b.n	8000f22 <SIGMA_Iflash_Write+0x62>
	}
	//
	// Unlock the flash to enable the flash control register access.
	//
	HAL_FLASH_Unlock();
 8000ee0:	f001 f804 	bl	8001eec <HAL_FLASH_Unlock>
	// Program the user flash area a user double word at a time.
	//

	do {

	  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t *) pData)) == HAL_OK){
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	68f9      	ldr	r1, [r7, #12]
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 ffbb 	bl	8001e68 <HAL_FLASH_Program>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d109      	bne.n	8000f0c <SIGMA_Iflash_Write+0x4c>
      address        += IFLASH_DOUBLE_WORD_SIZE ;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3308      	adds	r3, #8
 8000efc:	60fb      	str	r3, [r7, #12]
	    nBytesWritten  += IFLASH_DOUBLE_WORD_SIZE ;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3308      	adds	r3, #8
 8000f02:	617b      	str	r3, [r7, #20]
      pData          += IFLASH_DOUBLE_WORD_SIZE ; // Point to next Double word
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3308      	adds	r3, #8
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	e001      	b.n	8000f10 <SIGMA_Iflash_Write+0x50>

    }else{
      status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	74fb      	strb	r3, [r7, #19]
    }

	} while ((nBytesWritten < size) && (status != HAL_ERROR));
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d202      	bcs.n	8000f1e <SIGMA_Iflash_Write+0x5e>
 8000f18:	7cfb      	ldrb	r3, [r7, #19]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d1e2      	bne.n	8000ee4 <SIGMA_Iflash_Write+0x24>

	//
	// Lock the flash to disable the flash control register access. (recommended
	// to protect the flash memory against possible unwanted operation)
	//
	HAL_FLASH_Lock();
 8000f1e:	f001 f807 	bl	8001f30 <HAL_FLASH_Lock>

	ERROR:
	  //
	  // If any unahndled error still remains, return 1, otherwise 0.
	  //
	  return status;
 8000f22:	7cfb      	ldrb	r3, [r7, #19]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <JumpToAPP>:
 * @brief   Jump to Main Application.
 * @param   void
 * @return  void
 */

void JumpToAPP(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f32:	b672      	cpsid	i
}
 8000f34:	bf00      	nop

	/* Disable Systick interrupt */
	__disable_irq();
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <JumpToAPP+0x50>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <JumpToAPP+0x50>)
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	6013      	str	r3, [r2, #0]

	/* Initialize user application's Stack Pointer & Jump to user application */
	JumpToApplication = (pFunction) (*(__IO uint32_t*) (FLASH_APP_START_ADDRESS + 4));
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <JumpToAPP+0x54>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <JumpToAPP+0x58>)
 8000f4a:	601a      	str	r2, [r3, #0]

	__set_MSP(*(__IO uint32_t*) FLASH_APP_START_ADDRESS);
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <JumpToAPP+0x5c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f383 8808 	msr	MSP, r3
}
 8000f58:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f60:	f3bf 8f5f 	dmb	sy
}
 8000f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f66:	f3bf 8f6f 	isb	sy
}
 8000f6a:	bf00      	nop
  __DSB();
  __DMB();
  __ISB();

	JumpToApplication();
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <JumpToAPP+0x58>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4798      	blx	r3
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010
 8000f80:	08020004 	.word	0x08020004
 8000f84:	20000048 	.word	0x20000048
 8000f88:	08020000 	.word	0x08020000

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fcf9 	bl	8001986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f85c 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f8f8 	bl	800118c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f9c:	f000 f8aa 	bl	80010f4 <MX_LPUART1_UART_Init>
  SIGMA_Iflash_Read(FLASH_APP_START_ADDRESS, IFLASH_Read_Buffer, sizeof(IFLASH_Read_Buffer));
  // Verify Data Write
  uint8_t IFLASH_Test_Result = memcmp(IFLASH_Read_Buffer, IFLASH_Write_Buffer, sizeof(IFLASH_Read_Buffer));
#endif

  SIGMA_Uart_Transmit_str((uint8_t*)"\n\r================================\n\r");
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <main+0x98>)
 8000fa2:	f000 f939 	bl	8001218 <SIGMA_Uart_Transmit_str>
  SIGMA_Uart_Transmit_str((uint8_t*)"Mar7aba To Sigma Embedded Projects\n\r");  
 8000fa6:	4820      	ldr	r0, [pc, #128]	; (8001028 <main+0x9c>)
 8000fa8:	f000 f936 	bl	8001218 <SIGMA_Uart_Transmit_str>
  
  while(1){
	  if(SIGMA_Uart_Receive(&Serial_CMD, 1) == UART_OK){
 8000fac:	2101      	movs	r1, #1
 8000fae:	481f      	ldr	r0, [pc, #124]	; (800102c <main+0xa0>)
 8000fb0:	f000 f916 	bl	80011e0 <SIGMA_Uart_Receive>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f8      	bne.n	8000fac <main+0x20>
		  if(Serial_CMD == 'S'){ // Run Secure Boot
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <main+0xa0>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b53      	cmp	r3, #83	; 0x53
 8000fc0:	d103      	bne.n	8000fca <main+0x3e>
			  Secure_Boot = 1;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <main+0xa4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		  }else if (Serial_CMD == 'F'){ // Run FlashBootloader
        Secure_Boot = 0;
		  }

		  break;
 8000fc8:	e006      	b.n	8000fd8 <main+0x4c>
		  }else if (Serial_CMD == 'F'){ // Run FlashBootloader
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <main+0xa0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b46      	cmp	r3, #70	; 0x46
 8000fd0:	d102      	bne.n	8000fd8 <main+0x4c>
        Secure_Boot = 0;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <main+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
		  break;
 8000fd8:	bf00      	nop
	  }
  }

  if(Secure_Boot){
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <main+0xa4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d014      	beq.n	800100c <main+0x80>
    SIGMA_Uart_Transmit_str((uint8_t*)"Secure Boot Example\n\r");
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xa8>)
 8000fe4:	f000 f918 	bl	8001218 <SIGMA_Uart_Transmit_str>

    // Verify the Integrity of the Application
    if (FW_Hash_Verify() == HASH_SUCCESS){
 8000fe8:	f000 fade 	bl	80015a8 <FW_Hash_Verify>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <main+0x78>
      // Jump to Application
      SIGMA_Uart_Transmit_str((uint8_t*)"Hash Verification OK! L3aaaz Khadam \n\r");
 8000ff2:	4811      	ldr	r0, [pc, #68]	; (8001038 <main+0xac>)
 8000ff4:	f000 f910 	bl	8001218 <SIGMA_Uart_Transmit_str>
      SIGMA_Uart_Transmit_str((uint8_t*)"Jump to Application\n\r");
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <main+0xb0>)
 8000ffa:	f000 f90d 	bl	8001218 <SIGMA_Uart_Transmit_str>
      JumpToAPP();
 8000ffe:	f7ff ff95 	bl	8000f2c <JumpToAPP>
 8001002:	e002      	b.n	800100a <main+0x7e>
    }else{
      SIGMA_Uart_Transmit_str((uint8_t*)"Hash Verification NOK! Hadchi Makhadamch\n\r");
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <main+0xb4>)
 8001006:	f000 f907 	bl	8001218 <SIGMA_Uart_Transmit_str>
    }

    while(1){
 800100a:	e7fe      	b.n	800100a <main+0x7e>
      // Do nothing
    }

  }else{
    /* USER CODE END 2 */
    SIGMA_Uart_Transmit_str((uint8_t*)"UART Bootloader Example\n\r");
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <main+0xb8>)
 800100e:	f000 f903 	bl	8001218 <SIGMA_Uart_Transmit_str>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      /* The use has to send file via Tera Term. */
      SIGMA_Uart_Transmit_str((uint8_t*)"\n\rPlease send your file!\n\r");
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <main+0xbc>)
 8001014:	f000 f900 	bl	8001218 <SIGMA_Uart_Transmit_str>
      /* Start polling for Data */
      SIGMA_Xmodem_Receive();
 8001018:	f000 f948 	bl	80012ac <SIGMA_Xmodem_Receive>
      /* Reach here only if it fails */
      SIGMA_Uart_Transmit_str((uint8_t*)"\n\rSystem Error! Please Try Again!\n\r");
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <main+0xc0>)
 800101e:	f000 f8fb 	bl	8001218 <SIGMA_Uart_Transmit_str>
    {
 8001022:	e7f6      	b.n	8001012 <main+0x86>
 8001024:	08005b6c 	.word	0x08005b6c
 8001028:	08005b94 	.word	0x08005b94
 800102c:	200000f0 	.word	0x200000f0
 8001030:	200000f1 	.word	0x200000f1
 8001034:	08005bbc 	.word	0x08005bbc
 8001038:	08005bd4 	.word	0x08005bd4
 800103c:	08005bfc 	.word	0x08005bfc
 8001040:	08005c14 	.word	0x08005c14
 8001044:	08005c40 	.word	0x08005c40
 8001048:	08005c5c 	.word	0x08005c5c
 800104c:	08005c78 	.word	0x08005c78

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b098      	sub	sp, #96	; 0x60
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	2248      	movs	r2, #72	; 0x48
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fd6f 	bl	8005b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001072:	2000      	movs	r0, #0
 8001074:	f001 fa72 	bl	800255c <HAL_PWREx_ControlVoltageScaling>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800107e:	f000 f8a9 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001082:	2310      	movs	r3, #16
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800108e:	2360      	movs	r3, #96	; 0x60
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001096:	2301      	movs	r3, #1
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800109e:	2337      	movs	r3, #55	; 0x37
 80010a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fae2 	bl	800267c <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010be:	f000 f889 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2105      	movs	r1, #5
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 ffa4 	bl	8003028 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010e6:	f000 f875 	bl	80011d4 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3760      	adds	r7, #96	; 0x60
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_LPUART1_UART_Init+0x94>)
 80010fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 800113e:	f002 ff6d 	bl	800401c <HAL_UART_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001148:	f000 f844 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001150:	f004 fb29 	bl	80057a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800115a:	f000 f83b 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001162:	f004 fb5e 	bl	8005822 <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800116c:	f000 f832 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001172:	f004 fadf 	bl	8005734 <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800117c:	f000 f82a 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000005c 	.word	0x2000005c
 8001188:	40008000 	.word	0x40008000

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_GPIO_Init+0x44>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <MX_GPIO_Init+0x44>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_GPIO_Init+0x44>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_GPIO_Init+0x44>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x44>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_GPIO_Init+0x44>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80011c2:	f001 fa27 	bl	8002614 <HAL_PWREx_EnableVddIO2>

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <SIGMA_Uart_Receive>:
 * @param   data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status SIGMA_Uart_Receive(uint8_t *data, uint16_t length)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
  uart_status status = UART_ERROR;
 80011ec:	23ff      	movs	r3, #255	; 0xff
 80011ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&hlpuart1, data, length, UART_TIMEOUT))
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <SIGMA_Uart_Receive+0x34>)
 80011fa:	f002 ffed 	bl	80041d8 <HAL_UART_Receive>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <SIGMA_Uart_Receive+0x28>
  {
    status = UART_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000005c 	.word	0x2000005c

08001218 <SIGMA_Uart_Transmit_str>:
 * @param   data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */

uart_status SIGMA_Uart_Transmit_str(uint8_t *data)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8001224:	2300      	movs	r3, #0
 8001226:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8001228:	e002      	b.n	8001230 <SIGMA_Uart_Transmit_str+0x18>
  {
    length++;
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f6      	bne.n	800122a <SIGMA_Uart_Transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, data, length, UART_TIMEOUT))
 800123c:	89ba      	ldrh	r2, [r7, #12]
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <SIGMA_Uart_Transmit_str+0x48>)
 8001246:	f002 ff39 	bl	80040bc <HAL_UART_Transmit>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <SIGMA_Uart_Transmit_str+0x3c>
  {
    status = UART_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000005c 	.word	0x2000005c

08001264 <SIGMA_Uart_Transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status SIGMA_Uart_Transmit_ch(uint8_t data)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  uart_status status = UART_ERROR;
 800126e:	23ff      	movs	r3, #255	; 0xff
 8001270:	73fb      	strb	r3, [r7, #15]

  /* Make available the UART module. */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&hlpuart1))
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <SIGMA_Uart_Transmit_ch+0x44>)
 8001274:	f003 fcca 	bl	8004c0c <HAL_UART_GetState>
 8001278:	4603      	mov	r3, r0
 800127a:	2ba0      	cmp	r3, #160	; 0xa0
 800127c:	d102      	bne.n	8001284 <SIGMA_Uart_Transmit_ch+0x20>
  {
    HAL_UART_Abort(&hlpuart1);
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <SIGMA_Uart_Transmit_ch+0x44>)
 8001280:	f003 f872 	bl	8004368 <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, &data, 1u, UART_TIMEOUT))
 8001284:	1df9      	adds	r1, r7, #7
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	2201      	movs	r2, #1
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <SIGMA_Uart_Transmit_ch+0x44>)
 800128e:	f002 ff15 	bl	80040bc <HAL_UART_Transmit>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <SIGMA_Uart_Transmit_ch+0x38>
  {
    status = UART_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000005c 	.word	0x2000005c

080012ac <SIGMA_Xmodem_Receive>:

// Rx Buffer
uint8_t packet_data[PACKET_SIZE_1024];

// XMODEM receive file function
XmodemStatus SIGMA_Xmodem_Receive(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  XmodemPacket packet;
  uint8_t expected_packet_number = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]
  uint32_t bytes_received = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef flash_status;
  XmodemStatus receive_status;
  uint8_t is_packet_received = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75bb      	strb	r3, [r7, #22]

  // Send 'C' to initiate the transfer
  while (!is_packet_received) {
 80012be:	e017      	b.n	80012f0 <SIGMA_Xmodem_Receive+0x44>
    SIGMA_Uart_Transmit_ch('C');  // Send 'C' to the host to start transmission
 80012c0:	2043      	movs	r0, #67	; 0x43
 80012c2:	f7ff ffcf 	bl	8001264 <SIGMA_Uart_Transmit_ch>
    receive_status = SIGMA_Xmodem_receive_packet(&packet);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f87b 	bl	80013c4 <SIGMA_Xmodem_receive_packet>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]

    if (receive_status == XMODEM_OK && (packet.header == SOH || packet.header == STX)) {
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <SIGMA_Xmodem_Receive+0x3e>
 80012d8:	793b      	ldrb	r3, [r7, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d002      	beq.n	80012e4 <SIGMA_Xmodem_Receive+0x38>
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d102      	bne.n	80012ea <SIGMA_Xmodem_Receive+0x3e>
        is_packet_received = 0x01;
 80012e4:	2301      	movs	r3, #1
 80012e6:	75bb      	strb	r3, [r7, #22]
 80012e8:	e002      	b.n	80012f0 <SIGMA_Xmodem_Receive+0x44>
    } else {
        // Small delay between sending 'C'
        HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f000 fbc2 	bl	8001a74 <HAL_Delay>
  while (!is_packet_received) {
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0e4      	beq.n	80012c0 <SIGMA_Xmodem_Receive+0x14>
    }
  }

  // Erase flash memory at the start
  flash_status = SIGMA_Iflash_Erase(FLASH_APP_START_ADDRESS);
 80012f6:	4831      	ldr	r0, [pc, #196]	; (80013bc <SIGMA_Xmodem_Receive+0x110>)
 80012f8:	f7ff fd8e 	bl	8000e18 <SIGMA_Iflash_Erase>
 80012fc:	4603      	mov	r3, r0
 80012fe:	757b      	strb	r3, [r7, #21]

  if (flash_status != HAL_OK) {
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SIGMA_Xmodem_Receive+0x5e>
    return XMODEM_FLASH_ERROR;  // Flash erase failed
 8001306:	2304      	movs	r3, #4
 8001308:	e053      	b.n	80013b2 <SIGMA_Xmodem_Receive+0x106>
  }

  while (1) {
    if (receive_status == XMODEM_OK) {
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d134      	bne.n	800137a <SIGMA_Xmodem_Receive+0xce>

      if (packet.packet_number[0] == expected_packet_number) {
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	7ffa      	ldrb	r2, [r7, #31]
 8001314:	429a      	cmp	r2, r3
 8001316:	d12d      	bne.n	8001374 <SIGMA_Xmodem_Receive+0xc8>
        uint32_t packet_size = (packet.header == SOH) ? PACKET_SIZE_128 : PACKET_SIZE_1024;
 8001318:	793b      	ldrb	r3, [r7, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <SIGMA_Xmodem_Receive+0x76>
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	e001      	b.n	8001326 <SIGMA_Xmodem_Receive+0x7a>
 8001322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
        // Ensure data fits within flash size
        uint32_t app_size = FLASH_APP_END_ADDRESS - FLASH_APP_START_ADDRESS;
 8001328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132c:	60fb      	str	r3, [r7, #12]
        if (bytes_received + packet_size > app_size) {
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d201      	bcs.n	800133e <SIGMA_Xmodem_Receive+0x92>
          return XMODEM_FLASH_ERROR;  // Exceeds flash size
 800133a:	2304      	movs	r3, #4
 800133c:	e039      	b.n	80013b2 <SIGMA_Xmodem_Receive+0x106>
        }

        // Write data to flash memory
        flash_status = SIGMA_Iflash_Write(FLASH_APP_START_ADDRESS + bytes_received, packet_data, packet_size);
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001344:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	491d      	ldr	r1, [pc, #116]	; (80013c0 <SIGMA_Xmodem_Receive+0x114>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fdb7 	bl	8000ec0 <SIGMA_Iflash_Write>
 8001352:	4603      	mov	r3, r0
 8001354:	757b      	strb	r3, [r7, #21]

        if (flash_status != HAL_OK) {
 8001356:	7d7b      	ldrb	r3, [r7, #21]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SIGMA_Xmodem_Receive+0xb4>
          return XMODEM_FLASH_ERROR;  // Flash write failed
 800135c:	2304      	movs	r3, #4
 800135e:	e028      	b.n	80013b2 <SIGMA_Xmodem_Receive+0x106>
        }

        bytes_received += packet_size;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        expected_packet_number++;
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	3301      	adds	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]
        SIGMA_Xmodem_send_ack();  // Acknowledge successful packet reception
 800136e:	f000 f8cb 	bl	8001508 <SIGMA_Xmodem_send_ack>
 8001372:	e017      	b.n	80013a4 <SIGMA_Xmodem_Receive+0xf8>
      } else {
        SIGMA_Xmodem_send_nack();  // Packet number mismatch
 8001374:	f000 f8cf 	bl	8001516 <SIGMA_Xmodem_send_nack>
 8001378:	e014      	b.n	80013a4 <SIGMA_Xmodem_Receive+0xf8>
      }

    }else {
      // Handle error status
      switch (receive_status) {
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d00c      	beq.n	800139a <SIGMA_Xmodem_Receive+0xee>
 8001380:	2b03      	cmp	r3, #3
 8001382:	dc0d      	bgt.n	80013a0 <SIGMA_Xmodem_Receive+0xf4>
 8001384:	2b01      	cmp	r3, #1
 8001386:	d002      	beq.n	800138e <SIGMA_Xmodem_Receive+0xe2>
 8001388:	2b02      	cmp	r3, #2
 800138a:	d003      	beq.n	8001394 <SIGMA_Xmodem_Receive+0xe8>
 800138c:	e008      	b.n	80013a0 <SIGMA_Xmodem_Receive+0xf4>
        case XMODEM_CRC_ERROR:
          SIGMA_Xmodem_send_nack();  // CRC error, request retransmission
 800138e:	f000 f8c2 	bl	8001516 <SIGMA_Xmodem_send_nack>
          break;
 8001392:	e007      	b.n	80013a4 <SIGMA_Xmodem_Receive+0xf8>
        case XMODEM_TIMEOUT_ERROR:
          SIGMA_Xmodem_send_nack();  // Timeout error
 8001394:	f000 f8bf 	bl	8001516 <SIGMA_Xmodem_send_nack>
          break;
 8001398:	e004      	b.n	80013a4 <SIGMA_Xmodem_Receive+0xf8>
        case XMODEM_PACKET_NUM_ERROR:
          SIGMA_Xmodem_send_nack();  // Packet number mismatch
 800139a:	f000 f8bc 	bl	8001516 <SIGMA_Xmodem_send_nack>
          break;
 800139e:	e001      	b.n	80013a4 <SIGMA_Xmodem_Receive+0xf8>
        default:
          return XMODEM_UNKNOWN_ERROR;  // Unknown error occurred
 80013a0:	2305      	movs	r3, #5
 80013a2:	e006      	b.n	80013b2 <SIGMA_Xmodem_Receive+0x106>
      }
    }

    // Get next packet
    receive_status = SIGMA_Xmodem_receive_packet(&packet);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f80c 	bl	80013c4 <SIGMA_Xmodem_receive_packet>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]
    if (receive_status == XMODEM_OK) {
 80013b0:	e7ab      	b.n	800130a <SIGMA_Xmodem_Receive+0x5e>
  }
  return XMODEM_OK;  // File received successfully
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08020000 	.word	0x08020000
 80013c0:	200000f4 	.word	0x200000f4

080013c4 <SIGMA_Xmodem_receive_packet>:

// Function to receive a packet over UART
XmodemStatus SIGMA_Xmodem_receive_packet(XmodemPacket *packet) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  // Receive header : SOH, STX, EOT
  if (SIGMA_Uart_Receive(&packet->header, header_size) != UART_OK) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff05 	bl	80011e0 <SIGMA_Uart_Receive>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SIGMA_Xmodem_receive_packet+0x1c>
    return XMODEM_TIMEOUT_ERROR;  // Timeout or UART error
 80013dc:	2302      	movs	r3, #2
 80013de:	e04c      	b.n	800147a <SIGMA_Xmodem_receive_packet+0xb6>
  }

  // Check if it's an end of Transmission
  if(packet->header == EOT){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d106      	bne.n	80013f6 <SIGMA_Xmodem_receive_packet+0x32>
	  SIGMA_Uart_Transmit_str((uint8_t*)"Jump to Application\n\r");
 80013e8:	4826      	ldr	r0, [pc, #152]	; (8001484 <SIGMA_Xmodem_receive_packet+0xc0>)
 80013ea:	f7ff ff15 	bl	8001218 <SIGMA_Uart_Transmit_str>
	  SIGMA_Xmodem_send_ack();
 80013ee:	f000 f88b 	bl	8001508 <SIGMA_Xmodem_send_ack>
	  JumpToAPP();
 80013f2:	f7ff fd9b 	bl	8000f2c <JumpToAPP>
  }

  if (SIGMA_Uart_Receive(packet->packet_number, packet_number_size) != UART_OK) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff feef 	bl	80011e0 <SIGMA_Uart_Receive>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SIGMA_Xmodem_receive_packet+0x48>
    return XMODEM_TIMEOUT_ERROR;  // Timeout or UART error
 8001408:	2302      	movs	r3, #2
 800140a:	e036      	b.n	800147a <SIGMA_Xmodem_receive_packet+0xb6>
  }

  uint16_t packet_size = (packet->header == SOH) ? PACKET_SIZE_128 : PACKET_SIZE_1024;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <SIGMA_Xmodem_receive_packet+0x54>
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	e001      	b.n	800141c <SIGMA_Xmodem_receive_packet+0x58>
 8001418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141c:	81fb      	strh	r3, [r7, #14]

  // Receive packet data
  if (SIGMA_Uart_Receive(packet_data, packet_size) != UART_OK) {
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	4619      	mov	r1, r3
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <SIGMA_Xmodem_receive_packet+0xc4>)
 8001424:	f7ff fedc 	bl	80011e0 <SIGMA_Uart_Receive>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SIGMA_Xmodem_receive_packet+0x6e>
    return XMODEM_TIMEOUT_ERROR;  // Timeout or UART error
 800142e:	2302      	movs	r3, #2
 8001430:	e023      	b.n	800147a <SIGMA_Xmodem_receive_packet+0xb6>
  }

  // Receive CRC
  uint8_t crc_buf[crc_size];
  if (SIGMA_Uart_Receive(crc_buf, crc_size) != UART_OK) {
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2102      	movs	r1, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fed1 	bl	80011e0 <SIGMA_Uart_Receive>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SIGMA_Xmodem_receive_packet+0x84>
    return XMODEM_TIMEOUT_ERROR;  // Timeout or UART error
 8001444:	2302      	movs	r3, #2
 8001446:	e018      	b.n	800147a <SIGMA_Xmodem_receive_packet+0xb6>
  }

  packet->crc = (crc_buf[0] << 8) | crc_buf[1];
 8001448:	7a3b      	ldrb	r3, [r7, #8]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b21a      	sxth	r2, r3
 800144e:	7a7b      	ldrb	r3, [r7, #9]
 8001450:	b21b      	sxth	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	809a      	strh	r2, [r3, #4]

  // Verify CRC
  uint16_t calculated_crc = SIGMA_Xmodem_calculate_crc16(packet_data, packet_size);
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	4619      	mov	r1, r3
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <SIGMA_Xmodem_receive_packet+0xc4>)
 8001462:	f000 f813 	bl	800148c <SIGMA_Xmodem_calculate_crc16>
 8001466:	4603      	mov	r3, r0
 8001468:	81bb      	strh	r3, [r7, #12]

  if (calculated_crc != packet->crc) {
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	89ba      	ldrh	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <SIGMA_Xmodem_receive_packet+0xb4>
    return XMODEM_CRC_ERROR;  // CRC mismatch
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <SIGMA_Xmodem_receive_packet+0xb6>
  }

  return XMODEM_OK;  // Packet received successfully
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08005c9c 	.word	0x08005c9c
 8001488:	200000f4 	.word	0x200000f4

0800148c <SIGMA_Xmodem_calculate_crc16>:

// Example CRC-16 calculation function
uint16_t SIGMA_Xmodem_calculate_crc16(const uint8_t *data, uint16_t length) {
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
  uint16_t crc = 0x0000;
 8001498:	2300      	movs	r3, #0
 800149a:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < length; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	81bb      	strh	r3, [r7, #12]
 80014a0:	e027      	b.n	80014f2 <SIGMA_Xmodem_calculate_crc16+0x66>
    crc ^= (uint16_t)data[i] << 8;
 80014a2:	89bb      	ldrh	r3, [r7, #12]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b2:	4053      	eors	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t j = 0; j < 8; j++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	72fb      	strb	r3, [r7, #11]
 80014bc:	e013      	b.n	80014e6 <SIGMA_Xmodem_calculate_crc16+0x5a>
      if (crc & 0x8000) {
 80014be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da09      	bge.n	80014da <SIGMA_Xmodem_calculate_crc16+0x4e>
        crc = (crc << 1) ^ 0x1021;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	81fb      	strh	r3, [r7, #14]
 80014d8:	e002      	b.n	80014e0 <SIGMA_Xmodem_calculate_crc16+0x54>
      } else {
        crc <<= 1;
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	81fb      	strh	r3, [r7, #14]
    for (uint8_t j = 0; j < 8; j++) {
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	3301      	adds	r3, #1
 80014e4:	72fb      	strb	r3, [r7, #11]
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d9e8      	bls.n	80014be <SIGMA_Xmodem_calculate_crc16+0x32>
  for (uint16_t i = 0; i < length; i++) {
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	81bb      	strh	r3, [r7, #12]
 80014f2:	89ba      	ldrh	r2, [r7, #12]
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3d3      	bcc.n	80014a2 <SIGMA_Xmodem_calculate_crc16+0x16>
      }
    }
  }

  return crc;
 80014fa:	89fb      	ldrh	r3, [r7, #14]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SIGMA_Xmodem_send_ack>:

// Function to send ACK
void SIGMA_Xmodem_send_ack(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  SIGMA_Uart_Transmit_ch(ACK);
 800150c:	2006      	movs	r0, #6
 800150e:	f7ff fea9 	bl	8001264 <SIGMA_Uart_Transmit_ch>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <SIGMA_Xmodem_send_nack>:

// Function to send nack
void SIGMA_Xmodem_send_nack(void) {
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  SIGMA_Uart_Transmit_ch(NACK); 
 800151a:	2015      	movs	r0, #21
 800151c:	f7ff fea2 	bl	8001264 <SIGMA_Uart_Transmit_ch>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <STM32_SHA256_HASH_DigestCompute>:
  *         HASH_ERR_BAD_PARAMETER, HASH_ERR_BAD_CONTEXT,
  *         HASH_ERR_BAD_OPERATION if error occured.
  */
int32_t STM32_SHA256_HASH_DigestCompute(uint8_t* InputMessage, uint32_t InputMessageLength,
                                        uint8_t *MessageDigest, int32_t* MessageDigestLength)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0aa      	sub	sp, #168	; 0xa8
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  SHA256ctx_stt P_pSHA256ctx;
  uint32_t error_status = HASH_SUCCESS; 
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  /* Set the size of the desired hash digest */
  P_pSHA256ctx.mTagSize = CRL_SHA256_SIZE;
 8001538:	2320      	movs	r3, #32
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  /* Set flag field to default value */
  P_pSHA256ctx.mFlags = E_HASH_DEFAULT;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  error_status = SHA256_Init(&P_pSHA256ctx);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4618      	mov	r0, r3
 800154a:	f004 f9f7 	bl	800593c <SHA256_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  /* check for initialization errors */
  if (error_status == HASH_SUCCESS)
 8001554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d117      	bne.n	800158c <STM32_SHA256_HASH_DigestCompute+0x68>
  {
    /* Add data to be hashed */
    error_status = SHA256_Append(&P_pSHA256ctx,
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	68f9      	ldr	r1, [r7, #12]
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fa1b 	bl	80059a0 <SHA256_Append>
 800156a:	4603      	mov	r3, r0
 800156c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                 InputMessage,
                                 InputMessageLength);

    if (error_status == HASH_SUCCESS)
 8001570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <STM32_SHA256_HASH_DigestCompute+0x68>
    {
      /* retrieve */
      error_status = SHA256_Finish(&P_pSHA256ctx, MessageDigest, MessageDigestLength);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	f004 fa43 	bl	8005a0c <SHA256_Finish>
 8001586:	4603      	mov	r3, r0
 8001588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }
  }

  return error_status;
 800158c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8001590:	4618      	mov	r0, r3
 8001592:	37a8      	adds	r7, #168	; 0xa8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Fatal_Error_Handler>:

void Fatal_Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  // Do nothing for the moment
  // TODO : Will be covered in another Video Inchaelah
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <FW_Hash_Verify>:
  *         those protections not impacted by a Reset. They are set using the Option Bytes
  *         When the device is locked (RDP Level2), these protections cannot be changed anymore
  * @param  None
  */
uint8_t FW_Hash_Verify(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
  uint8_t MessageDigest[HASH_SIZE];
  int32_t MessageDigestLength = HASH_SIZE;
 80015ae:	2320      	movs	r3, #32
 80015b0:	60bb      	str	r3, [r7, #8]
  int32_t result = -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* enable CRC to allow cryptolib to work */ 
  __CRC_RELEASE_RESET();
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <FW_Hash_Verify+0x80>)
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <FW_Hash_Verify+0x80>)
 80015be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015c2:	6293      	str	r3, [r2, #40]	; 0x28
  __CRC_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <FW_Hash_Verify+0x80>)
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <FW_Hash_Verify+0x80>)
 80015ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ce:	6493      	str	r3, [r2, #72]	; 0x48
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <FW_Hash_Verify+0x80>)
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
     
  result = STM32_SHA256_HASH_DigestCompute((uint8_t*)FLASH_APP_START_ADDRESS, 
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <FW_Hash_Verify+0x84>)
 80015ea:	f7ff ff9b 	bl	8001524 <STM32_SHA256_HASH_DigestCompute>
 80015ee:	62f8      	str	r0, [r7, #44]	; 0x2c
                                       (uint32_t)(FLASH_APP_Size - HASH_SIZE), 
                                       MessageDigest, 
                                       &MessageDigestLength);
  if ( result == HASH_SUCCESS && MessageDigestLength == HASH_SIZE) 
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <FW_Hash_Verify+0x6c>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d10b      	bne.n	8001614 <FW_Hash_Verify+0x6c>
  {
    if (memcmp((uint8_t*)(HASH_ADD), MessageDigest, (uint32_t)HASH_SIZE) == 0)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2220      	movs	r2, #32
 8001602:	4619      	mov	r1, r3
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <FW_Hash_Verify+0x88>)
 8001606:	f004 fa7f 	bl	8005b08 <memcmp>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <FW_Hash_Verify+0x70>
    {
      return HASH_SUCCESS;
 8001610:	2300      	movs	r3, #0
 8001612:	e004      	b.n	800161e <FW_Hash_Verify+0x76>
      goto Machakil; 
    }
  }
  else
  {
    goto Machakil;
 8001614:	bf00      	nop
 8001616:	e000      	b.n	800161a <FW_Hash_Verify+0x72>
      goto Machakil; 
 8001618:	bf00      	nop
  }
  return;
  
Machakil:
  Fatal_Error_Handler();
 800161a:	f7ff ffbd 	bl	8001598 <Fatal_Error_Handler>
}
 800161e:	4618      	mov	r0, r3
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	08020000 	.word	0x08020000
 8001630:	0802ffe0 	.word	0x0802ffe0

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x44>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x44>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6593      	str	r3, [r2, #88]	; 0x58
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ae      	sub	sp, #184	; 0xb8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2294      	movs	r2, #148	; 0x94
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fa50 	bl	8005b42 <memset>
  if(huart->Instance==LPUART1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a26      	ldr	r2, [pc, #152]	; (8001740 <HAL_UART_MspInit+0xc4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d145      	bne.n	8001738 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016ac:	2320      	movs	r3, #32
 80016ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ff99 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c4:	f7ff fd86 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_UART_MspInit+0xc8>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80016f8:	f000 ff8c 	bl	8002614 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001716:	2308      	movs	r3, #8
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001720:	4619      	mov	r1, r3
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_UART_MspInit+0xcc>)
 8001724:	f000 fd8c 	bl	8002240 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2042      	movs	r0, #66	; 0x42
 800172e:	f000 faa0 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001732:	2042      	movs	r0, #66	; 0x42
 8001734:	f000 fab7 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	37b8      	adds	r7, #184	; 0xb8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40008000 	.word	0x40008000
 8001744:	40021000 	.word	0x40021000
 8001748:	42021800 	.word	0x42021800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 f94c 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <LPUART1_IRQHandler+0x10>)
 80017a6:	f002 feed 	bl	8004584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000005c 	.word	0x2000005c

080017b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <SystemCoreClockUpdate+0x144>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80017ea:	4b4c      	ldr	r3, [pc, #304]	; (800191c <SystemCoreClockUpdate+0x144>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e005      	b.n	8001806 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80017fa:	4b48      	ldr	r3, [pc, #288]	; (800191c <SystemCoreClockUpdate+0x144>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <SystemCoreClockUpdate+0x148>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <SystemCoreClockUpdate+0x144>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d866      	bhi.n	80018ea <SystemCoreClockUpdate+0x112>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <SystemCoreClockUpdate+0x4c>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001859 	.word	0x08001859
 8001828:	080018eb 	.word	0x080018eb
 800182c:	080018eb 	.word	0x080018eb
 8001830:	080018eb 	.word	0x080018eb
 8001834:	08001861 	.word	0x08001861
 8001838:	080018eb 	.word	0x080018eb
 800183c:	080018eb 	.word	0x080018eb
 8001840:	080018eb 	.word	0x080018eb
 8001844:	08001869 	.word	0x08001869
 8001848:	080018eb 	.word	0x080018eb
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	08001871 	.word	0x08001871
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	6013      	str	r3, [r2, #0]
      break;
 800185e:	e048      	b.n	80018f2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <SystemCoreClockUpdate+0x150>)
 8001864:	601a      	str	r2, [r3, #0]
      break;
 8001866:	e044      	b.n	80018f2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 800186a:	4a30      	ldr	r2, [pc, #192]	; (800192c <SystemCoreClockUpdate+0x154>)
 800186c:	601a      	str	r2, [r3, #0]
      break;
 800186e:	e040      	b.n	80018f2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <SystemCoreClockUpdate+0x144>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <SystemCoreClockUpdate+0x144>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	3301      	adds	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <SystemCoreClockUpdate+0xbe>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d006      	beq.n	80018a2 <SystemCoreClockUpdate+0xca>
 8001894:	e00b      	b.n	80018ae <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <SystemCoreClockUpdate+0x150>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	613b      	str	r3, [r7, #16]
          break;
 80018a0:	e00b      	b.n	80018ba <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <SystemCoreClockUpdate+0x154>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	613b      	str	r3, [r7, #16]
          break;
 80018ac:	e005      	b.n	80018ba <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	613b      	str	r3, [r7, #16]
          break;
 80018b8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <SystemCoreClockUpdate+0x144>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <SystemCoreClockUpdate+0x144>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0e5b      	lsrs	r3, r3, #25
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 80018e6:	6013      	str	r3, [r2, #0]
      break;
 80018e8:	e003      	b.n	80018f2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	6013      	str	r3, [r2, #0]
      break;
 80018f0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <SystemCoreClockUpdate+0x144>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <SystemCoreClockUpdate+0x158>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemCoreClockUpdate+0x14c>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	08005de4 	.word	0x08005de4
 8001924:	20000000 	.word	0x20000000
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200
 8001930:	08005dcc 	.word	0x08005dcc

08001934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001938:	f7ff ff3c 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800193c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800193e:	e003      	b.n	8001948 <LoopCopyDataInit>

08001940 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001942:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001944:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001946:	3104      	adds	r1, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <LoopForever+0xa>)
	ldr	r3, =_edata
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <LoopForever+0xe>)
	adds	r2, r0, r1
 800194c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800194e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001950:	d3f6      	bcc.n	8001940 <CopyDataInit>
	ldr	r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001954:	e002      	b.n	800195c <LoopFillZerobss>

08001956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001956:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001958:	f842 3b04 	str.w	r3, [r2], #4

0800195c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LoopForever+0x16>)
	cmp	r2, r3
 800195e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001960:	d3f9      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001962:	f004 f8ad 	bl	8005ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001966:	f7ff fb11 	bl	8000f8c <main>

0800196a <LoopForever>:

LoopForever:
    b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800196c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001970:	08005e5c 	.word	0x08005e5c
	ldr	r0, =_sdata
 8001974:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001978:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 800197c:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8001980:	200004f8 	.word	0x200004f8

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>

08001986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001990:	2004      	movs	r0, #4
 8001992:	f000 f963 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001996:	f7ff ff1f 	bl	80017d8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f80e 	bl	80019bc <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e001      	b.n	80019b0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ac:	f7ff fe42 	bl	8001634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_InitTick+0x6c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_InitTick+0x70>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_InitTick+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f96b 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b07      	cmp	r3, #7
 80019f6:	d809      	bhi.n	8001a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f937 	bl	8001c72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_InitTick+0x74>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e004      	b.n	8001a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e001      	b.n	8001a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	200004f4 	.word	0x200004f4

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200004f4 	.word	0x200004f4

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0152      	lsls	r2, r2, #5
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0152      	lsls	r2, r2, #5
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	bf28      	it	cs
 8001bce:	2303      	movcs	r3, #3
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b04      	subs	r3, #4
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	2107      	movs	r1, #7
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff40 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff33 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa4 	bl	8001c18 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d008      	beq.n	8001d04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e040      	b.n	8001d86 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020e 	bic.w	r2, r2, #14
 8001d12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 021c 	and.w	r2, r3, #28
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d005      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2204      	movs	r2, #4
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e047      	b.n	8001e46 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 020e 	bic.w	r2, r2, #14
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 021c 	and.w	r2, r3, #28
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e02:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001e24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
    }
  }
  return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_FLASH_Program+0x1a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e02c      	b.n	8001edc <HAL_FLASH_Program+0x74>
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e92:	f000 f867 	bl	8001f64 <FLASH_WaitForLastOperation>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d119      	bne.n	8001ed4 <HAL_FLASH_Program+0x6c>
  {
    pFlash.ProcedureOnGoing = TypeProgram;
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6093      	str	r3, [r2, #8]
    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_FLASH_Program+0x80>)
 8001ea8:	613b      	str	r3, [r7, #16]

    /* Program double-word (64-bit) at a specified address */
    FLASH_Program_DoubleWord(Address, Data);
 8001eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f000 f8a0 	bl	8001ff4 <FLASH_Program_DoubleWord>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb8:	f000 f854 	bl	8001f64 <FLASH_WaitForLastOperation>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_FLASH_Program+0x7c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]

  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	40022028 	.word	0x40022028

08001eec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_FLASH_Unlock+0x38>)
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da0b      	bge.n	8001f16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_FLASH_Unlock+0x38>)
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_FLASH_Unlock+0x3c>)
 8001f02:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_FLASH_Unlock+0x38>)
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_FLASH_Unlock+0x40>)
 8001f08:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_FLASH_Unlock+0x38>)
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da01      	bge.n	8001f16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif

  return status;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40022000 	.word	0x40022000
 8001f28:	45670123 	.word	0x45670123
 8001f2c:	cdef89ab 	.word	0xcdef89ab

08001f30 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_FLASH_Lock+0x30>)
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_FLASH_Lock+0x30>)
 8001f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f44:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_FLASH_Lock+0x30>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da01      	bge.n	8001f52 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif

  return status;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40022000 	.word	0x40022000

08001f64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8001f6c:	f7ff fd76 	bl	8001a5c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f78:	e00b      	b.n	8001f92 <FLASH_WaitForLastOperation+0x2e>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d007      	beq.n	8001f92 <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 8001f82:	f7ff fd6b 	bl	8001a5c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d801      	bhi.n	8001f92 <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e025      	b.n	8001fde <FLASH_WaitForLastOperation+0x7a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <FLASH_WaitForLastOperation+0x84>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ed      	bne.n	8001f7a <FLASH_WaitForLastOperation+0x16>
      }
    }
  }
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <FLASH_WaitForLastOperation+0x88>)
 8001fa0:	613b      	str	r3, [r7, #16]

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f242 03fa 	movw	r3, #8442	; 0x20fa
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <FLASH_WaitForLastOperation+0x8c>)
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <FLASH_WaitForLastOperation+0x8c>)
 8001fbe:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e009      	b.n	8001fde <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40022020 	.word	0x40022020
 8001ff0:	2000000c 	.word	0x2000000c

08001ff4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	e9c7 2300 	strd	r2, r3, [r7]
  __IO uint32_t *reg;
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <FLASH_Program_DoubleWord+0x68>)
 8002002:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002004:	f3ef 8310 	mrs	r3, PRIMASK
 8002008:	613b      	str	r3, [r7, #16]
  return(result);
 800200a:	693b      	ldr	r3, [r7, #16]

  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
 800200c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800200e:	b672      	cpsid	i
}
 8002010:	bf00      	nop
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	601a      	str	r2, [r3, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002024:	f3bf 8f6f 	isb	sy
}
 8002028:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 800202a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	000a      	movs	r2, r1
 8002038:	2300      	movs	r3, #0
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	3104      	adds	r1, #4
 800203e:	4613      	mov	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f383 8810 	msr	PRIMASK, r3
}
 800204c:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40022028 	.word	0x40022028

08002060 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_FLASHEx_Erase+0x16>
 8002072:	2302      	movs	r3, #2
 8002074:	e05c      	b.n	8002130 <HAL_FLASHEx_Erase+0xd0>
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 800207e:	2200      	movs	r2, #0
 8002080:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002086:	f7ff ff6d 	bl	8001f64 <FLASH_WaitForLastOperation>
 800208a:	4603      	mov	r3, r0
 800208c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d149      	bne.n	8002128 <HAL_FLASHEx_Erase+0xc8>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 800209a:	6093      	str	r3, [r2, #8]

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_FLASHEx_Erase+0xdc>)
 800209e:	60fb      	str	r3, [r7, #12]

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a8:	f248 0204 	movw	r2, #32772	; 0x8004
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10b      	bne.n	80020c8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f843 	bl	8002140 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020be:	f7ff ff51 	bl	8001f64 <FLASH_WaitForLastOperation>
 80020c2:	4603      	mov	r3, r0
 80020c4:	75fb      	strb	r3, [r7, #23]
 80020c6:	e025      	b.n	8002114 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f04f 32ff 	mov.w	r2, #4294967295
 80020ce:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e015      	b.n	8002104 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4619      	mov	r1, r3
 80020de:	6938      	ldr	r0, [r7, #16]
 80020e0:	f000 f86a 	bl	80021b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e8:	f7ff ff3c 	bl	8001f64 <FLASH_WaitForLastOperation>
 80020ec:	4603      	mov	r3, r0
 80020ee:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	601a      	str	r2, [r3, #0]
          break;
 80020fc:	e00a      	b.n	8002114 <HAL_FLASHEx_Erase+0xb4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	3301      	adds	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d3e1      	bcc.n	80020d8 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_FLASHEx_Erase+0xd8>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

  return status;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000000c 	.word	0x2000000c
 800213c:	40022028 	.word	0x40022028

08002140 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <FLASH_MassErase+0x70>)
 800214a:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <FLASH_MassErase+0x74>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <FLASH_MassErase+0x46>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <FLASH_MassErase+0x2e>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <FLASH_MassErase+0x56>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e007      	b.n	8002196 <FLASH_MassErase+0x56>
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	6013      	str	r3, [r2, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40022028 	.word	0x40022028
 80021b4:	40022000 	.word	0x40022000

080021b8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  primask_bit = __get_PRIMASK();
  __disable_irq();
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <FLASH_PageErase+0x80>)
 80021c4:	60fb      	str	r3, [r7, #12]

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <FLASH_PageErase+0x84>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <FLASH_PageErase+0x28>
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e011      	b.n	8002204 <FLASH_PageErase+0x4c>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <FLASH_PageErase+0x40>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e005      	b.n	8002204 <FLASH_PageErase+0x4c>
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	00d2      	lsls	r2, r2, #3
 8002214:	4313      	orrs	r3, r2
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40022028 	.word	0x40022028
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800224e:	e158      	b.n	8002502 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 814a 	beq.w	80024fc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80a4 	beq.w	80024fc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80023b4:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3318      	adds	r3, #24
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x2e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d025      	beq.n	800242c <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_GPIO_Init+0x2e8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01f      	beq.n	8002428 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_GPIO_Init+0x2ec>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d019      	beq.n	8002424 <HAL_GPIO_Init+0x1e4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <HAL_GPIO_Init+0x2f0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x1e0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <HAL_GPIO_Init+0x2f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4d      	ldr	r2, [pc, #308]	; (8002538 <HAL_GPIO_Init+0x2f8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1d8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_GPIO_Init+0x2fc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1d4>
 8002410:	2306      	movs	r3, #6
 8002412:	e00c      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002414:	2307      	movs	r3, #7
 8002416:	e00a      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002418:	2305      	movs	r3, #5
 800241a:	e008      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 800241c:	2304      	movs	r3, #4
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002420:	2303      	movs	r3, #3
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 800242c:	2300      	movs	r3, #0
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	00d2      	lsls	r2, r2, #3
 8002436:	4093      	lsls	r3, r2
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800243e:	4938      	ldr	r1, [pc, #224]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3318      	adds	r3, #24
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002470:	4a2b      	ldr	r2, [pc, #172]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 80024d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_GPIO_Init+0x2e0>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f ae9f 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	4002f400 	.word	0x4002f400
 8002524:	42020000 	.word	0x42020000
 8002528:	42020400 	.word	0x42020400
 800252c:	42020800 	.word	0x42020800
 8002530:	42020c00 	.word	0x42020c00
 8002534:	42021000 	.word	0x42021000
 8002538:	42021400 	.word	0x42021400
 800253c:	42021800 	.word	0x42021800

08002540 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_PWREx_GetVoltageRange+0x18>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40007000 	.word	0x40007000

0800255c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800256e:	f000 f861 	bl	8002634 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002572:	4603      	mov	r3, r0
 8002574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002578:	d101      	bne.n	800257e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e03e      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800257e:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258a:	d101      	bne.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e035      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d101      	bne.n	800259c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e02f      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80025a4:	4917      	ldr	r1, [pc, #92]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	09db      	lsrs	r3, r3, #7
 80025ba:	2232      	movs	r2, #50	; 0x32
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	4a13      	ldr	r2, [pc, #76]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025cc:	e002      	b.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e0:	d102      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f2      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d101      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e000      	b.n	80025fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40007000 	.word	0x40007000
 8002608:	20000000 	.word	0x20000000
 800260c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002610:	cccccccd 	.word	0xcccccccd

08002614 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_PWREx_EnableVddIO2+0x1c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_PWREx_EnableVddIO2+0x1c>)
 800261e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002622:	6053      	str	r3, [r2, #4]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	e00a      	b.n	8002668 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800265c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	e001      	b.n	8002668 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40007000 	.word	0x40007000

0800267c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f000 bcc2 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002690:	4b99      	ldr	r3, [pc, #612]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269a:	4b97      	ldr	r3, [pc, #604]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e9 	beq.w	8002884 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_RCC_OscConfig+0x4a>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	f040 8083 	bne.w	80027c6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d17f      	bne.n	80027c6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c6:	4b8c      	ldr	r3, [pc, #560]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <HAL_RCC_OscConfig+0x64>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f000 bc9a 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e4:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_RCC_OscConfig+0x7e>
 80026f0:	4b81      	ldr	r3, [pc, #516]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f8:	e005      	b.n	8002706 <HAL_RCC_OscConfig+0x8a>
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	4293      	cmp	r3, r2
 8002708:	d224      	bcs.n	8002754 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe9c 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f000 bc7a 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002720:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b72      	ldr	r3, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	496f      	ldr	r1, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273e:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	496a      	ldr	r1, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
 8002752:	e026      	b.n	80027a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002754:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a67      	ldr	r2, [pc, #412]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	4962      	ldr	r1, [pc, #392]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	495d      	ldr	r1, [pc, #372]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fe5b 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f000 bc39 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027a2:	f000 fe17 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_RCC_OscConfig+0x280>)
 80027aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ac:	4b54      	ldr	r3, [pc, #336]	; (8002900 <HAL_RCC_OscConfig+0x284>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f903 	bl	80019bc <HAL_InitTick>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d060      	beq.n	8002882 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	f000 bc27 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d039      	beq.n	8002842 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027da:	f7ff f93f 	bl	8001a5c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e0:	e00f      	b.n	8002802 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e2:	f7ff f93b 	bl	8001a5c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d908      	bls.n	8002802 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f0:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	f000 bc09 	b.w	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0e9      	beq.n	80027e2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	4934      	ldr	r1, [pc, #208]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	492f      	ldr	r1, [pc, #188]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e020      	b.n	8002884 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284e:	f7ff f905 	bl	8001a5c <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002854:	e00e      	b.n	8002874 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002856:	f7ff f901 	bl	8001a5c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d907      	bls.n	8002874 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e3cf      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ea      	bne.n	8002856 <HAL_RCC_OscConfig+0x1da>
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002882:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d07e      	beq.n	800298e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d005      	beq.n	80028a2 <HAL_RCC_OscConfig+0x226>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b0c      	cmp	r3, #12
 800289a:	d10e      	bne.n	80028ba <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d06e      	beq.n	800298c <HAL_RCC_OscConfig+0x310>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d16a      	bne.n	800298c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e3ac      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x256>
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e024      	b.n	800291c <HAL_RCC_OscConfig+0x2a0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028da:	d113      	bne.n	8002904 <HAL_RCC_OscConfig+0x288>
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a02      	ldr	r2, [pc, #8]	; (80028f8 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e012      	b.n	800291c <HAL_RCC_OscConfig+0x2a0>
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004
 8002904:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8a      	ldr	r2, [pc, #552]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a87      	ldr	r2, [pc, #540]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d019      	beq.n	8002958 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f89a 	bl	8001a5c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292a:	e00e      	b.n	800294a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff f896 	bl	8001a5c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d907      	bls.n	800294a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293a:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e364      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	4b7a      	ldr	r3, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ea      	beq.n	800292c <HAL_RCC_OscConfig+0x2b0>
 8002956:	e01a      	b.n	800298e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff f880 	bl	8001a5c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295e:	e00e      	b.n	800297e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff f87c 	bl	8001a5c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d907      	bls.n	800297e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296e:	4b71      	ldr	r3, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e34a      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ea      	bne.n	8002960 <HAL_RCC_OscConfig+0x2e4>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x330>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d119      	bne.n	80029da <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d116      	bne.n	80029da <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ac:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x348>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e327      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4958      	ldr	r1, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	e04c      	b.n	8002a74 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d029      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a53      	ldr	r2, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7ff f835 	bl	8001a5c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	e00e      	b.n	8002a14 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7ff f831 	bl	8001a5c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d907      	bls.n	8002a14 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e2ff      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ea      	beq.n	80029f6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	4941      	ldr	r1, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
 8002a34:	e01e      	b.n	8002a74 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7ff f80b 	bl	8001a5c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a48:	e00e      	b.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff f807 	bl	8001a5c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d907      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e2d5      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ea      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d062      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d038      	beq.n	8002afa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002a98:	f023 0310 	bic.w	r3, r3, #16
 8002a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002aa0:	e007      	b.n	8002ab2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe ffcb 	bl	8001a5c <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac8:	e00f      	b.n	8002aea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe ffc7 	bl	8001a5c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	d908      	bls.n	8002aea <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e294      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0e8      	beq.n	8002aca <HAL_RCC_OscConfig+0x44e>
 8002af8:	e025      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b00:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe ffa7 	bl	8001a5c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b10:	e012      	b.n	8002b38 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe ffa3 	bl	8001a5c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d90b      	bls.n	8002b38 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e270      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b38:	4ba8      	ldr	r3, [pc, #672]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e5      	bne.n	8002b12 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 812d 	beq.w	8002dae <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b58:	4ba0      	ldr	r3, [pc, #640]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b9d      	ldr	r3, [pc, #628]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	4a9c      	ldr	r2, [pc, #624]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b70:	4b9a      	ldr	r3, [pc, #616]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b80:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <HAL_RCC_OscConfig+0x764>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11e      	bne.n	8002bca <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8c:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <HAL_RCC_OscConfig+0x764>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a93      	ldr	r2, [pc, #588]	; (8002de0 <HAL_RCC_OscConfig+0x764>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b98:	f7fe ff60 	bl	8001a5c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9e:	e00e      	b.n	8002bbe <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe ff5c 	bl	8001a5c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d907      	bls.n	8002bbe <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x764>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e22a      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x764>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ea      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01f      	beq.n	8002c16 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002be2:	4b7e      	ldr	r3, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	4a78      	ldr	r2, [pc, #480]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c02:	e018      	b.n	8002c36 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c14:	e00f      	b.n	8002c36 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	4a6f      	ldr	r2, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c26:	4b6d      	ldr	r3, [pc, #436]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d068      	beq.n	8002d10 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe ff0d 	bl	8001a5c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c44:	e011      	b.n	8002c6a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe ff09 	bl	8001a5c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d908      	bls.n	8002c6a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c58:	4b60      	ldr	r3, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1d4      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0e6      	beq.n	8002c46 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d022      	beq.n	8002cca <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c94:	e011      	b.n	8002cba <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe fee1 	bl	8001a5c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d908      	bls.n	8002cba <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ca8:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1ac      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cba:	4b48      	ldr	r3, [pc, #288]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0e6      	beq.n	8002c96 <HAL_RCC_OscConfig+0x61a>
 8002cc8:	e068      	b.n	8002d9c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cca:	4b44      	ldr	r3, [pc, #272]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a42      	ldr	r2, [pc, #264]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cda:	e011      	b.n	8002d00 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe febe 	bl	8001a5c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d908      	bls.n	8002d00 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e189      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e6      	bne.n	8002cdc <HAL_RCC_OscConfig+0x660>
 8002d0e:	e045      	b.n	8002d9c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fea4 	bl	8001a5c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d16:	e011      	b.n	8002d3c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe fea0 	bl	8001a5c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e16b      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e6      	bne.n	8002d18 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d021      	beq.n	8002d9c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d68:	e011      	b.n	8002d8e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fe77 	bl	8001a5c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e142      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e6      	bne.n	8002d6a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04f      	beq.n	8002e5a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_OscConfig+0x760>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fe43 	bl	8001a5c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x788>
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de4:	f7fe fe3a 	bl	8001a5c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002df2:	4b8a      	ldr	r3, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e107      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e04:	4b85      	ldr	r3, [pc, #532]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0e8      	beq.n	8002de4 <HAL_RCC_OscConfig+0x768>
 8002e12:	e022      	b.n	8002e5a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1a:	4a80      	ldr	r2, [pc, #512]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fe1a 	bl	8001a5c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2c:	f7fe fe16 	bl	8001a5c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e3a:	4b78      	ldr	r3, [pc, #480]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0e3      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e8      	bne.n	8002e2c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80d7 	beq.w	8003012 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e64:	4b6d      	ldr	r3, [pc, #436]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	f000 8091 	beq.w	8002f94 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d166      	bne.n	8002f48 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b68      	ldr	r3, [pc, #416]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a67      	ldr	r2, [pc, #412]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe fde9 	bl	8001a5c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fde5 	bl	8001a5c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9c:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0b3      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eac:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x9a4>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed2:	0212      	lsls	r2, r2, #8
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0552      	lsls	r2, r2, #21
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0652      	lsls	r2, r2, #25
 8002eec:	4311      	orrs	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ef2:	06d2      	lsls	r2, r2, #27
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	4949      	ldr	r1, [pc, #292]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a46      	ldr	r2, [pc, #280]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f08:	4b44      	ldr	r3, [pc, #272]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fda2 	bl	8001a5c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	e00e      	b.n	8002f3a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fd9e 	bl	8001a5c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d907      	bls.n	8002f3a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e06c      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ea      	beq.n	8002f1c <HAL_RCC_OscConfig+0x8a0>
 8002f46:	e064      	b.n	8003012 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fd82 	bl	8001a5c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5a:	e00e      	b.n	8002f7a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fd7e 	bl	8001a5c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d907      	bls.n	8002f7a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04c      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ea      	bne.n	8002f5c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f86:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	4924      	ldr	r1, [pc, #144]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_OscConfig+0x9a8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
 8002f92:	e03e      	b.n	8003012 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e039      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_OscConfig+0x9a0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d12c      	bne.n	800300e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d123      	bne.n	800300e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11b      	bne.n	800300e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d113      	bne.n	800300e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	019f800c 	.word	0x019f800c
 8003024:	feeefffc 	.word	0xfeeefffc

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e11c      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b90      	ldr	r3, [pc, #576]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b8d      	ldr	r3, [pc, #564]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	498b      	ldr	r1, [pc, #556]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b89      	ldr	r3, [pc, #548]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e104      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	497b      	ldr	r1, [pc, #492]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8085 	beq.w	80031b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d11f      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b74      	ldr	r3, [pc, #464]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0da      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030c4:	f000 fa26 	bl	8003514 <RCC_GetSysClockFreqFromPLLSource>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4a6f      	ldr	r2, [pc, #444]	; (800328c <HAL_RCC_ClockConfig+0x264>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d947      	bls.n	8003162 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030d2:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d141      	bne.n	8003162 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e6:	4a68      	ldr	r2, [pc, #416]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e036      	b.n	8003162 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fc:	4b62      	ldr	r3, [pc, #392]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d115      	bne.n	8003134 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b6      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d107      	bne.n	8003124 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003114:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0aa      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0a2      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003134:	f000 f8b0 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x264>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d90f      	bls.n	8003162 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003142:	4b51      	ldr	r3, [pc, #324]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003156:	4a4c      	ldr	r2, [pc, #304]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4946      	ldr	r1, [pc, #280]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe fc72 	bl	8001a5c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e013      	b.n	80031a4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fc6e 	bl	8001a5c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d90a      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e06a      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 020c 	and.w	r2, r3, #12
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d1e2      	bne.n	800317c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031bc:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d208      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d210      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003204:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 020f 	bic.w	r2, r3, #15
 800320c:	491d      	ldr	r1, [pc, #116]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e029      	b.n	800327a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	4912      	ldr	r1, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	490a      	ldr	r1, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003264:	f000 f8b6 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8003268:	4603      	mov	r3, r0
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x268>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fba2 	bl	80019bc <HAL_InitTick>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000
 8003288:	40021000 	.word	0x40021000
 800328c:	04c4b400 	.word	0x04c4b400
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b0:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d121      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d11e      	bne.n	800330a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032cc:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80032f4:	4a34      	ldr	r2, [pc, #208]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x130>)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d102      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <HAL_RCC_GetSysClockFreq+0x134>)
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e004      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d101      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 800331e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d146      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3301      	adds	r3, #1
 800333c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xb4>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d00d      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0xce>
 800334a:	e019      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_RCC_GetSysClockFreq+0x134>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003356:	68d2      	ldr	r2, [r2, #12]
 8003358:	0a12      	lsrs	r2, r2, #8
 800335a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
        break;
 8003364:	e019      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003366:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003370:	68d2      	ldr	r2, [r2, #12]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
        break;
 800337e:	e00c      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800338a:	68d2      	ldr	r2, [r2, #12]
 800338c:	0a12      	lsrs	r2, r2, #8
 800338e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	617b      	str	r3, [r7, #20]
        break;
 8003398:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	0e5b      	lsrs	r3, r3, #25
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	3301      	adds	r3, #1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033b4:	69bb      	ldr	r3, [r7, #24]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08005de4 	.word	0x08005de4
 80033cc:	00f42400 	.word	0x00f42400
 80033d0:	007a1200 	.word	0x007a1200

080033d4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80033d8:	f7ff ff5e 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08005dcc 	.word	0x08005dcc

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff ffe8 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	08005ddc 	.word	0x08005ddc

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffd4 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08005ddc 	.word	0x08005ddc

0800344c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003458:	4b2c      	ldr	r3, [pc, #176]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003464:	f7ff f86c 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 8003468:	6138      	str	r0, [r7, #16]
 800346a:	e014      	b.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003484:	f7ff f85c 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 8003488:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a2:	d10b      	bne.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d919      	bls.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2ba0      	cmp	r3, #160	; 0xa0
 80034ae:	d902      	bls.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b0:	2302      	movs	r3, #2
 80034b2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80034b4:	e013      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80034ba:	e010      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d902      	bls.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034c2:	2303      	movs	r3, #3
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e00a      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d102      	bne.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ce:	2302      	movs	r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e004      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b70      	cmp	r3, #112	; 0x70
 80034d8:	d101      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034da:	2301      	movs	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	40022000 	.word	0x40022000

08003514 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d015      	beq.n	8003564 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d839      	bhi.n	80035b2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d01c      	beq.n	800357e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d133      	bne.n	80035b2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800354a:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003554:	68d2      	ldr	r2, [r2, #12]
 8003556:	0a12      	lsrs	r2, r2, #8
 8003558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
      break;
 8003562:	e029      	b.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800356e:	68d2      	ldr	r2, [r2, #12]
 8003570:	0a12      	lsrs	r2, r2, #8
 8003572:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	613b      	str	r3, [r7, #16]
      break;
 800357c:	e01c      	b.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e005      	b.n	80035a6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	613b      	str	r3, [r7, #16]
        break;
 80035b0:	e002      	b.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0e5b      	lsrs	r3, r3, #25
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80035d2:	683b      	ldr	r3, [r7, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40021000 	.word	0x40021000
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200
 80035ec:	08005de4 	.word	0x08005de4

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035fc:	2300      	movs	r3, #0
 80035fe:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003608:	2b00      	cmp	r3, #0
 800360a:	d040      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d02a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d825      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d026      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d821      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d006      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d81d      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d010      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003630:	e018      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003632:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a8e      	ldr	r2, [pc, #568]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800363e:	e015      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fb56 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003650:	e00c      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3320      	adds	r3, #32
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fc33 	bl	8003ec4 <RCCEx_PLLSAI2_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003662:	e003      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]
        break;
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800366a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366c:	7ffb      	ldrb	r3, [r7, #31]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003672:	4b7f      	ldr	r3, [pc, #508]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003678:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003680:	497b      	ldr	r1, [pc, #492]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003688:	e001      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d047      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d030      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d82a      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d02a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80036b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d81e      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ca:	d010      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036cc:	e018      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ce:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a67      	ldr	r2, [pc, #412]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80036da:	e015      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb08 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80036ec:	e00c      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3320      	adds	r3, #32
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fbe5 	bl	8003ec4 <RCCEx_PLLSAI2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
        break;
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800370e:	4b58      	ldr	r3, [pc, #352]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4954      	ldr	r1, [pc, #336]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003724:	e001      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80ab 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	4a48      	ldr	r2, [pc, #288]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6593      	str	r3, [r2, #88]	; 0x58
 8003754:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a42      	ldr	r2, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003770:	f7fe f974 	bl	8001a5c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003776:	e00f      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe f970 	bl	8001a5c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d908      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003796:	e006      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0e9      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80037a6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d164      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d019      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a20      	ldr	r2, [pc, #128]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01f      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe f927 	bl	8001a5c <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003810:	e012      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe f923 	bl	8001a5c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d909      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003836:	e007      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0e5      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003848:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10c      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003868:	e008      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	77bb      	strb	r3, [r7, #30]
 800386e:	e005      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b9c      	ldr	r3, [pc, #624]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	4a9b      	ldr	r2, [pc, #620]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389a:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	4992      	ldr	r1, [pc, #584]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038bc:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f023 020c 	bic.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	498a      	ldr	r1, [pc, #552]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038de:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	4981      	ldr	r1, [pc, #516]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003900:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4979      	ldr	r1, [pc, #484]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003922:	4b74      	ldr	r3, [pc, #464]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	4970      	ldr	r1, [pc, #448]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003944:	4b6b      	ldr	r3, [pc, #428]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	4968      	ldr	r1, [pc, #416]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	495f      	ldr	r1, [pc, #380]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003988:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003996:	4957      	ldr	r1, [pc, #348]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80039aa:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b8:	494e      	ldr	r1, [pc, #312]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d031      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d4:	d00e      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80039d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039da:	d814      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d015      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80039f2:	e00c      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f97c 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	77fb      	strb	r3, [r7, #31]
        break;
 8003a0a:	e000      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a14:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a22:	4934      	ldr	r1, [pc, #208]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a2a:	e001      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7ffb      	ldrb	r3, [r7, #31]
 8003a2e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	492a      	ldr	r1, [pc, #168]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5e:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	4921      	ldr	r1, [pc, #132]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	4919      	ldr	r1, [pc, #100]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa8:	f023 0203 	bic.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4910      	ldr	r1, [pc, #64]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
 8003af0:	e014      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f8f5 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d04a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b30:	d108      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b38:	4a6e      	ldr	r2, [pc, #440]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b42:	e012      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003b44:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	4968      	ldr	r1, [pc, #416]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b5a:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b60:	4a64      	ldr	r2, [pc, #400]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f8bc 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b84:	7ffb      	ldrb	r3, [r7, #31]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	77bb      	strb	r3, [r7, #30]
 8003b8e:	e016      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4a55      	ldr	r2, [pc, #340]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba4:	60d3      	str	r3, [r2, #12]
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb2:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4a4f      	ldr	r2, [pc, #316]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d028      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd8:	4946      	ldr	r1, [pc, #280]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a41      	ldr	r2, [pc, #260]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf4:	60d3      	str	r3, [r2, #12]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f875 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c38:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2102      	movs	r1, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f850 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003c5c:	7ffb      	ldrb	r3, [r7, #31]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c78:	f023 0204 	bic.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	491c      	ldr	r1, [pc, #112]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9c:	f023 0218 	bic.w	r2, r3, #24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	4913      	ldr	r1, [pc, #76]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d017      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003cea:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d018      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x48>
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d81f      	bhi.n	8003d52 <RCCEx_PLLSAI1_Config+0x5a>
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <RCCEx_PLLSAI1_Config+0x24>
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d009      	beq.n	8003d2e <RCCEx_PLLSAI1_Config+0x36>
 8003d1a:	e01a      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1c:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d117      	bne.n	8003d58 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e014      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2e:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d110      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3e:	e00d      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003d40:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d50:	e006      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      break;
 8003d56:	e004      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8003d60:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 809f 	bne.w	8003ea8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d6a:	4b52      	ldr	r3, [pc, #328]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a51      	ldr	r2, [pc, #324]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d76:	f7fd fe71 	bl	8001a5c <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d7c:	e00f      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7e:	f7fd fe6d 	bl	8001a5c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d908      	bls.n	8003d9e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8c:	4b49      	ldr	r3, [pc, #292]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d9c:	e006      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d9e:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e9      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0x86>
 8003daa:	e000      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8003dac:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d179      	bne.n	8003ea8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <RCCEx_PLLSAI1_Config+0x1c0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	0211      	lsls	r1, r2, #8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68d2      	ldr	r2, [r2, #12]
 8003dcc:	06d2      	lsls	r2, r2, #27
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	3a01      	subs	r2, #1
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	4311      	orrs	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	4934      	ldr	r1, [pc, #208]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	610b      	str	r3, [r1, #16]
 8003de6:	e033      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d118      	bne.n	8003e20 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dee:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <RCCEx_PLLSAI1_Config+0x1c4>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	0211      	lsls	r1, r2, #8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6912      	ldr	r2, [r2, #16]
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0552      	lsls	r2, r2, #21
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6852      	ldr	r2, [r2, #4]
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	4926      	ldr	r1, [pc, #152]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
 8003e1e:	e017      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	0211      	lsls	r1, r2, #8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6852      	ldr	r2, [r2, #4]
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	4311      	orrs	r1, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	491a      	ldr	r1, [pc, #104]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e50:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fdfe 	bl	8001a5c <HAL_GetTick>
 8003e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e62:	e00f      	b.n	8003e84 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e64:	f7fd fdfa 	bl	8001a5c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d908      	bls.n	8003e84 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003e82:	e006      	b.n	8003e92 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0e9      	beq.n	8003e64 <RCCEx_PLLSAI1_Config+0x16c>
 8003e90:	e000      	b.n	8003e94 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003e92:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	07ff800c 	.word	0x07ff800c
 8003ebc:	ff9f800c 	.word	0xff9f800c
 8003ec0:	f9ff800c 	.word	0xf9ff800c

08003ec4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d018      	beq.n	8003f0c <RCCEx_PLLSAI2_Config+0x48>
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d81f      	bhi.n	8003f1e <RCCEx_PLLSAI2_Config+0x5a>
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d002      	beq.n	8003ee8 <RCCEx_PLLSAI2_Config+0x24>
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d009      	beq.n	8003efa <RCCEx_PLLSAI2_Config+0x36>
 8003ee6:	e01a      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d117      	bne.n	8003f24 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef8:	e014      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003efa:	4b46      	ldr	r3, [pc, #280]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d110      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0a:	e00d      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8003f0c:	4b41      	ldr	r3, [pc, #260]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e006      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
      break;
 8003f22:	e004      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8003f2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d169      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f34:	4b37      	ldr	r3, [pc, #220]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a36      	ldr	r2, [pc, #216]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fd fd8c 	bl	8001a5c <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f46:	e00f      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fd fd88 	bl	8001a5c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d908      	bls.n	8003f68 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f68:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e9      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0x84>
 8003f74:	e000      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8003f76:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d144      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d115      	bne.n	8003fb0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <RCCEx_PLLSAI2_Config+0x154>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6892      	ldr	r2, [r2, #8]
 8003f90:	0211      	lsls	r1, r2, #8
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	06d2      	lsls	r2, r2, #27
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6852      	ldr	r2, [r2, #4]
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	491a      	ldr	r1, [pc, #104]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fd4e 	bl	8001a5c <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fc2:	e00f      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc4:	f7fd fd4a 	bl	8001a5c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d908      	bls.n	8003fe4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003fe2:	e006      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0e9      	beq.n	8003fc4 <RCCEx_PLLSAI2_Config+0x100>
 8003ff0:	e000      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8003ff2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4904      	ldr	r1, [pc, #16]	; (8004014 <RCCEx_PLLSAI2_Config+0x150>)
 8004004:	4313      	orrs	r3, r2
 8004006:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	07ff800c 	.word	0x07ff800c

0800401c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e042      	b.n	80040b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd fb1b 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 f8e6 	bl	8005238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fde3 	bl	8004c38 <UART_SetConfig>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e01b      	b.n	80040b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 f965 	bl	800537c <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d17b      	bne.n	80041ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_UART_Transmit+0x26>
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e074      	b.n	80041d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2221      	movs	r2, #33	; 0x21
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fcb1 	bl	8001a5c <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d108      	bne.n	8004128 <HAL_UART_Transmit+0x6c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e003      	b.n	8004130 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004130:	e030      	b.n	8004194 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f001 f9c7 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e03d      	b.n	80041d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	3302      	adds	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	e007      	b.n	8004182 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1c8      	bne.n	8004132 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f001 f990 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e006      	b.n	80041d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 80b5 	bne.w	800435e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Receive+0x28>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0ad      	b.n	8004360 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	; 0x22
 8004210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421a:	f7fd fc1f 	bl	8001a5c <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d10e      	bne.n	8004258 <HAL_UART_Receive+0x80>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_UART_Receive+0x76>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004248:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800424c:	e02d      	b.n	80042aa <HAL_UART_Receive+0xd2>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004256:	e028      	b.n	80042aa <HAL_UART_Receive+0xd2>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_UART_Receive+0xa4>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_UART_Receive+0x9a>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004270:	e01b      	b.n	80042aa <HAL_UART_Receive+0xd2>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	227f      	movs	r2, #127	; 0x7f
 8004276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800427a:	e016      	b.n	80042aa <HAL_UART_Receive+0xd2>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004284:	d10d      	bne.n	80042a2 <HAL_UART_Receive+0xca>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_UART_Receive+0xc0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	227f      	movs	r2, #127	; 0x7f
 8004292:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004296:	e008      	b.n	80042aa <HAL_UART_Receive+0xd2>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80042a0:	e003      	b.n	80042aa <HAL_UART_Receive+0xd2>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d108      	bne.n	80042ce <HAL_UART_Receive+0xf6>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e003      	b.n	80042d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80042d6:	e036      	b.n	8004346 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2120      	movs	r1, #32
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 f8f4 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e032      	b.n	8004360 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10c      	bne.n	800431a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	b29a      	uxth	r2, r3
 8004308:	8a7b      	ldrh	r3, [r7, #18]
 800430a:	4013      	ands	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	3302      	adds	r3, #2
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e00c      	b.n	8004334 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8a7b      	ldrh	r3, [r7, #18]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4013      	ands	r3, r2
 8004328:	b2da      	uxtb	r2, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3301      	adds	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1c2      	bne.n	80042d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b0a0      	sub	sp, #128	; 0x80
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800437e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004380:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800439c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e6      	bne.n	8004370 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b4:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043c6:	657a      	str	r2, [r7, #84]	; 0x54
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d118      	bne.n	8004414 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	677b      	str	r3, [r7, #116]	; 0x74
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004400:	643b      	str	r3, [r7, #64]	; 0x40
 8004402:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e6      	bne.n	80043e2 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d137      	bne.n	8004492 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	61fb      	str	r3, [r7, #28]
   return(result);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	673b      	str	r3, [r7, #112]	; 0x70
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fc35 	bl	8001cda <HAL_DMA_Abort>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fce8 	bl	8001e50 <HAL_DMA_GetError>
 8004480:	4603      	mov	r3, r0
 8004482:	2b20      	cmp	r3, #32
 8004484:	d105      	bne.n	8004492 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2210      	movs	r2, #16
 800448a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e073      	b.n	800457a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d13b      	bne.n	8004518 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044c0:	61ba      	str	r2, [r7, #24]
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	613b      	str	r3, [r7, #16]
   return(result);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01c      	beq.n	8004518 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fbf3 	bl	8001cda <HAL_DMA_Abort>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fca5 	bl	8001e50 <HAL_DMA_GetError>
 8004506:	4603      	mov	r3, r0
 8004508:	2b20      	cmp	r3, #32
 800450a:	d105      	bne.n	8004518 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2210      	movs	r2, #16
 8004510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e030      	b.n	800457a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	220f      	movs	r2, #15
 800452e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004538:	d107      	bne.n	800454a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0210 	orr.w	r2, r2, #16
 8004548:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0208 	orr.w	r2, r2, #8
 8004558:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3780      	adds	r7, #128	; 0x80
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b0ba      	sub	sp, #232	; 0xe8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80045b2:	4013      	ands	r3, r2
 80045b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11b      	bne.n	80045f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 82e3 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
      }
      return;
 80045f6:	e2dd      	b.n	8004bb4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8123 	beq.w	8004848 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004602:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004606:	4b8d      	ldr	r3, [pc, #564]	; (800483c <HAL_UART_IRQHandler+0x2b8>)
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800460e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004612:	4b8b      	ldr	r3, [pc, #556]	; (8004840 <HAL_UART_IRQHandler+0x2bc>)
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 8116 	beq.w	8004848 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d011      	beq.n	800464c <HAL_UART_IRQHandler+0xc8>
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d011      	beq.n	800467c <HAL_UART_IRQHandler+0xf8>
 8004658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2202      	movs	r2, #2
 800466a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f043 0204 	orr.w	r2, r3, #4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d011      	beq.n	80046ac <HAL_UART_IRQHandler+0x128>
 8004688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00b      	beq.n	80046ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2204      	movs	r2, #4
 800469a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f043 0202 	orr.w	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80046c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80046c8:	4b5c      	ldr	r3, [pc, #368]	; (800483c <HAL_UART_IRQHandler+0x2b8>)
 80046ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00b      	beq.n	80046e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f043 0208 	orr.w	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d012      	beq.n	800471a <HAL_UART_IRQHandler+0x196>
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8249 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d105      	bne.n	800474a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800473e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004776:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d054      	beq.n	8004828 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 ff13 	bl	80055aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d146      	bne.n	8004820 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1d9      	bne.n	8004792 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d017      	beq.n	8004818 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <HAL_UART_IRQHandler+0x2c0>)
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fd faca 	bl	8001d92 <HAL_DMA_Abort_IT>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d019      	beq.n	8004838 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004812:	4610      	mov	r0, r2
 8004814:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004816:	e00f      	b.n	8004838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f9e1 	bl	8004be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481e:	e00b      	b.n	8004838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9dd 	bl	8004be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004826:	e007      	b.n	8004838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9d9 	bl	8004be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004836:	e1bf      	b.n	8004bb8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	bf00      	nop
    return;
 800483a:	e1bd      	b.n	8004bb8 <HAL_UART_IRQHandler+0x634>
 800483c:	10000001 	.word	0x10000001
 8004840:	04000120 	.word	0x04000120
 8004844:	08005677 	.word	0x08005677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484c:	2b01      	cmp	r3, #1
 800484e:	f040 8153 	bne.w	8004af8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 814c 	beq.w	8004af8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8145 	beq.w	8004af8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	f040 80bb 	bne.w	80049fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 818f 	beq.w	8004bbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f080 8187 	bcs.w	8004bbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8087 	bne.w	80049da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800490e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1da      	bne.n	80048cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800493a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800493e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800494c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e1      	bne.n	8004916 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800497c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80049bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e4      	bne.n	8004998 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd f980 	bl	8001cda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8fd 	bl	8004bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049fa:	e0df      	b.n	8004bbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80d1 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80cc 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e4      	bne.n	8004a28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a86:	633a      	str	r2, [r7, #48]	; 0x30
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e1      	bne.n	8004a5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0310 	bic.w	r3, r3, #16
 8004ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e4      	bne.n	8004aae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aee:	4619      	mov	r1, r3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f87f 	bl	8004bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004af6:	e063      	b.n	8004bc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <HAL_UART_IRQHandler+0x59e>
 8004b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fdec 	bl	80056f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b20:	e051      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03a      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
    }
    return;
 8004b56:	e035      	b.n	8004bc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_UART_IRQHandler+0x5f4>
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd96 	bl	80056a2 <UART_EndTransmit_IT>
    return;
 8004b76:	e026      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x614>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fdc5 	bl	8005720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b96:	e016      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d010      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x642>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da0c      	bge.n	8004bc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fdad 	bl	800570c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bb2:	e008      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004bb4:	bf00      	nop
 8004bb6:	e006      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8004bb8:	bf00      	nop
 8004bba:	e004      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8004bc4:	bf00      	nop
  }
}
 8004bc6:	37e8      	adds	r7, #232	; 0xe8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c22:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4313      	orrs	r3, r2
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b08c      	sub	sp, #48	; 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4baa      	ldr	r3, [pc, #680]	; (8004f10 <UART_SetConfig+0x2d8>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a9f      	ldr	r2, [pc, #636]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	f023 010f 	bic.w	r1, r3, #15
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a90      	ldr	r2, [pc, #576]	; (8004f18 <UART_SetConfig+0x2e0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d125      	bne.n	8004d28 <UART_SetConfig+0xf0>
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d81a      	bhi.n	8004d20 <UART_SetConfig+0xe8>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0xb8>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e116      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e112      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e10e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e10a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e106      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <UART_SetConfig+0x2e8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d138      	bne.n	8004da4 <UART_SetConfig+0x16c>
 8004d32:	4b7a      	ldr	r3, [pc, #488]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d82d      	bhi.n	8004d9c <UART_SetConfig+0x164>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x110>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e0d8      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d84:	2302      	movs	r3, #2
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e0d4      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e0d0      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	e0cc      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da2:	e0c8      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <UART_SetConfig+0x2ec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d125      	bne.n	8004dfa <UART_SetConfig+0x1c2>
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	d016      	beq.n	8004dea <UART_SetConfig+0x1b2>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d818      	bhi.n	8004df2 <UART_SetConfig+0x1ba>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d00a      	beq.n	8004dda <UART_SetConfig+0x1a2>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d814      	bhi.n	8004df2 <UART_SetConfig+0x1ba>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <UART_SetConfig+0x19a>
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d008      	beq.n	8004de2 <UART_SetConfig+0x1aa>
 8004dd0:	e00f      	b.n	8004df2 <UART_SetConfig+0x1ba>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd8:	e0ad      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de0:	e0a9      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004de2:	2304      	movs	r3, #4
 8004de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de8:	e0a5      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dea:	2308      	movs	r3, #8
 8004dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df0:	e0a1      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004df2:	2310      	movs	r3, #16
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df8:	e09d      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <UART_SetConfig+0x2f0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d125      	bne.n	8004e50 <UART_SetConfig+0x218>
 8004e04:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e10:	d016      	beq.n	8004e40 <UART_SetConfig+0x208>
 8004e12:	2bc0      	cmp	r3, #192	; 0xc0
 8004e14:	d818      	bhi.n	8004e48 <UART_SetConfig+0x210>
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d00a      	beq.n	8004e30 <UART_SetConfig+0x1f8>
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d814      	bhi.n	8004e48 <UART_SetConfig+0x210>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0x1f0>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d008      	beq.n	8004e38 <UART_SetConfig+0x200>
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x210>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e082      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e07e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e07a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e076      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e072      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a35      	ldr	r2, [pc, #212]	; (8004f2c <UART_SetConfig+0x2f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d12a      	bne.n	8004eb0 <UART_SetConfig+0x278>
 8004e5a:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e68:	d01a      	beq.n	8004ea0 <UART_SetConfig+0x268>
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6e:	d81b      	bhi.n	8004ea8 <UART_SetConfig+0x270>
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e74:	d00c      	beq.n	8004e90 <UART_SetConfig+0x258>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7a:	d815      	bhi.n	8004ea8 <UART_SetConfig+0x270>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <UART_SetConfig+0x250>
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d008      	beq.n	8004e98 <UART_SetConfig+0x260>
 8004e86:	e00f      	b.n	8004ea8 <UART_SetConfig+0x270>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e052      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e96:	e04e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9e:	e04a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea6:	e046      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eae:	e042      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <UART_SetConfig+0x2dc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d13a      	bne.n	8004f30 <UART_SetConfig+0x2f8>
 8004eba:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <UART_SetConfig+0x2e4>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec8:	d01a      	beq.n	8004f00 <UART_SetConfig+0x2c8>
 8004eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ece:	d81b      	bhi.n	8004f08 <UART_SetConfig+0x2d0>
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d00c      	beq.n	8004ef0 <UART_SetConfig+0x2b8>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eda:	d815      	bhi.n	8004f08 <UART_SetConfig+0x2d0>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <UART_SetConfig+0x2b0>
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d008      	beq.n	8004ef8 <UART_SetConfig+0x2c0>
 8004ee6:	e00f      	b.n	8004f08 <UART_SetConfig+0x2d0>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eee:	e022      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef6:	e01e      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e01a      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e016      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e012      	b.n	8004f36 <UART_SetConfig+0x2fe>
 8004f10:	cfff69f3 	.word	0xcfff69f3
 8004f14:	40008000 	.word	0x40008000
 8004f18:	40013800 	.word	0x40013800
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40004400 	.word	0x40004400
 8004f24:	40004800 	.word	0x40004800
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	40005000 	.word	0x40005000
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4ab0      	ldr	r2, [pc, #704]	; (80051fc <UART_SetConfig+0x5c4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	f040 809b 	bne.w	8005078 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d827      	bhi.n	8004f9a <UART_SetConfig+0x362>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x318>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f8b 	.word	0x08004f8b
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7fe fa42 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f7a:	e014      	b.n	8004fa6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f7c:	f7fe fa52 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8004f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f82:	e010      	b.n	8004fa6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b9e      	ldr	r3, [pc, #632]	; (8005200 <UART_SetConfig+0x5c8>)
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f88:	e00d      	b.n	8004fa6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7fe f985 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f90:	e009      	b.n	8004fa6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f98:	e005      	b.n	8004fa6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8130 	beq.w	800520e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	4a94      	ldr	r2, [pc, #592]	; (8005204 <UART_SetConfig+0x5cc>)
 8004fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d305      	bcc.n	8004fde <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d903      	bls.n	8004fe6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fe4:	e113      	b.n	800520e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2200      	movs	r2, #0
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	60fa      	str	r2, [r7, #12]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	4a84      	ldr	r2, [pc, #528]	; (8005204 <UART_SetConfig+0x5cc>)
 8004ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005008:	f7fb fd1e 	bl	8000a48 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	020b      	lsls	r3, r1, #8
 800501e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005022:	0202      	lsls	r2, r0, #8
 8005024:	6979      	ldr	r1, [r7, #20]
 8005026:	6849      	ldr	r1, [r1, #4]
 8005028:	0849      	lsrs	r1, r1, #1
 800502a:	2000      	movs	r0, #0
 800502c:	460c      	mov	r4, r1
 800502e:	4605      	mov	r5, r0
 8005030:	eb12 0804 	adds.w	r8, r2, r4
 8005034:	eb43 0905 	adc.w	r9, r3, r5
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	469a      	mov	sl, r3
 8005040:	4693      	mov	fp, r2
 8005042:	4652      	mov	r2, sl
 8005044:	465b      	mov	r3, fp
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb fcfd 	bl	8000a48 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4613      	mov	r3, r2
 8005054:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505c:	d308      	bcc.n	8005070 <UART_SetConfig+0x438>
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005064:	d204      	bcs.n	8005070 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6a3a      	ldr	r2, [r7, #32]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e0ce      	b.n	800520e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005076:	e0ca      	b.n	800520e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	d166      	bne.n	8005150 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005086:	2b08      	cmp	r3, #8
 8005088:	d827      	bhi.n	80050da <UART_SetConfig+0x4a2>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x458>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050db 	.word	0x080050db
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050d3 	.word	0x080050d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fe f9a2 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ba:	e014      	b.n	80050e6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050bc:	f7fe f9b2 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050c2:	e010      	b.n	80050e6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c4:	4b4e      	ldr	r3, [pc, #312]	; (8005200 <UART_SetConfig+0x5c8>)
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050c8:	e00d      	b.n	80050e6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fe f8e5 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80050ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050d0:	e009      	b.n	80050e6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050d8:	e005      	b.n	80050e6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8090 	beq.w	800520e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	4a44      	ldr	r2, [pc, #272]	; (8005204 <UART_SetConfig+0x5cc>)
 80050f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005100:	005a      	lsls	r2, r3, #1
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	441a      	add	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d916      	bls.n	8005148 <UART_SetConfig+0x510>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d212      	bcs.n	8005148 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f023 030f 	bic.w	r3, r3, #15
 800512a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	b29a      	uxth	r2, r3
 8005138:	8bfb      	ldrh	r3, [r7, #30]
 800513a:	4313      	orrs	r3, r2
 800513c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	8bfa      	ldrh	r2, [r7, #30]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e062      	b.n	800520e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800514e:	e05e      	b.n	800520e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005154:	2b08      	cmp	r3, #8
 8005156:	d828      	bhi.n	80051aa <UART_SetConfig+0x572>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0x528>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005185 	.word	0x08005185
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005195 	.word	0x08005195
 800516c:	080051ab 	.word	0x080051ab
 8005170:	0800519b 	.word	0x0800519b
 8005174:	080051ab 	.word	0x080051ab
 8005178:	080051ab 	.word	0x080051ab
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe f93a 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800518a:	e014      	b.n	80051b6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe f94a 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8005190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <UART_SetConfig+0x5c8>)
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fe f87d 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051b4:	bf00      	nop
    }

    if (pclk != 0U)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d028      	beq.n	800520e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <UART_SetConfig+0x5cc>)
 80051c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c6:	461a      	mov	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	441a      	add	r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b0f      	cmp	r3, #15
 80051e4:	d910      	bls.n	8005208 <UART_SetConfig+0x5d0>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d20c      	bcs.n	8005208 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	e009      	b.n	800520e <UART_SetConfig+0x5d6>
 80051fa:	bf00      	nop
 80051fc:	40008000 	.word	0x40008000
 8005200:	00f42400 	.word	0x00f42400
 8005204:	08005e24 	.word	0x08005e24
      }
      else
      {
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2201      	movs	r2, #1
 8005212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2201      	movs	r2, #1
 800521a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2200      	movs	r2, #0
 8005228:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800522a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01a      	beq.n	800534e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005336:	d10a      	bne.n	800534e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b098      	sub	sp, #96	; 0x60
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800538c:	f7fc fb66 	bl	8001a5c <HAL_GetTick>
 8005390:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b08      	cmp	r3, #8
 800539e:	d12f      	bne.n	8005400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a8:	2200      	movs	r2, #0
 80053aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f88e 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d022      	beq.n	8005400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ce:	653b      	str	r3, [r7, #80]	; 0x50
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e063      	b.n	80054c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d149      	bne.n	80054a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	2200      	movs	r2, #0
 8005418:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f857 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d03c      	beq.n	80054a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	623b      	str	r3, [r7, #32]
   return(result);
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
 8005448:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60fb      	str	r3, [r7, #12]
   return(result);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	64bb      	str	r3, [r7, #72]	; 0x48
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547a:	61fa      	str	r2, [r7, #28]
 800547c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	617b      	str	r3, [r7, #20]
   return(result);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e012      	b.n	80054c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3758      	adds	r7, #88	; 0x58
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e04f      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d04b      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc fab7 	bl	8001a5c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e04e      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d037      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d034      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d031      	beq.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d110      	bne.n	800554e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f838 	bl	80055aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2208      	movs	r2, #8
 800553e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e029      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d111      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f81e 	bl	80055aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e00f      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d0a0      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b095      	sub	sp, #84	; 0x54
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	643b      	str	r3, [r7, #64]	; 0x40
 80055d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3308      	adds	r3, #8
 8005606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e3      	bne.n	80055e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d118      	bne.n	8005656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	60bb      	str	r3, [r7, #8]
   return(result);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0310 	bic.w	r3, r3, #16
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	613b      	str	r3, [r7, #16]
   return(result);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800566a:	bf00      	nop
 800566c:	3754      	adds	r7, #84	; 0x54
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff faa3 	bl	8004be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b088      	sub	sp, #32
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	613b      	str	r3, [r7, #16]
   return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e6      	bne.n	80056aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fa6e 	bl	8004bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f0:	bf00      	nop
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_UARTEx_DisableFifoMode+0x16>
 8005746:	2302      	movs	r3, #2
 8005748:	e027      	b.n	800579a <HAL_UARTEx_DisableFifoMode+0x66>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e02d      	b.n	800581a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2224      	movs	r2, #36	; 0x24
 80057ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f850 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005836:	2302      	movs	r3, #2
 8005838:	e02d      	b.n	8005896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	; 0x24
 8005846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f812 	bl	80058a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058c0:	e031      	b.n	8005926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058c2:	2308      	movs	r3, #8
 80058c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058c6:	2308      	movs	r3, #8
 80058c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	0e5b      	lsrs	r3, r3, #25
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	0f5b      	lsrs	r3, r3, #29
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	7b3a      	ldrb	r2, [r7, #12]
 80058ee:	4911      	ldr	r1, [pc, #68]	; (8005934 <UARTEx_SetNbDataToProcess+0x94>)
 80058f0:	5c8a      	ldrb	r2, [r1, r2]
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058f6:	7b3a      	ldrb	r2, [r7, #12]
 80058f8:	490f      	ldr	r1, [pc, #60]	; (8005938 <UARTEx_SetNbDataToProcess+0x98>)
 80058fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	7b7a      	ldrb	r2, [r7, #13]
 800590c:	4909      	ldr	r1, [pc, #36]	; (8005934 <UARTEx_SetNbDataToProcess+0x94>)
 800590e:	5c8a      	ldrb	r2, [r1, r2]
 8005910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005914:	7b7a      	ldrb	r2, [r7, #13]
 8005916:	4908      	ldr	r1, [pc, #32]	; (8005938 <UARTEx_SetNbDataToProcess+0x98>)
 8005918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800591a:	fb93 f3f2 	sdiv	r3, r3, r2
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	08005e3c 	.word	0x08005e3c
 8005938:	08005e44 	.word	0x08005e44

0800593c <SHA256_Init>:
#include "hash/legacy_v3_sha256.h"
#include "err_codes.h"

/* Initialize a new SHA256 context */
int32_t SHA256_Init(SHA256ctx_stt *P_pSHA256ctx)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  cmox_hash_retval_t cmox_retval;
  int32_t retval;

  if (P_pSHA256ctx == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <SHA256_Init+0x16>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 800594a:	f640 73a3 	movw	r3, #4003	; 0xfa3
 800594e:	60fb      	str	r3, [r7, #12]
    goto error;
 8005950:	e021      	b.n	8005996 <SHA256_Init+0x5a>
  }
  P_pSHA256ctx->hash_handle = cmox_sha256_construct(&P_pSHA256ctx->sha_handle);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fda1 	bl	800049c <cmox_sha256_construct>
 800595a:	4602      	mov	r2, r0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (P_pSHA256ctx->hash_handle == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <SHA256_Init+0x38>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 800596c:	f640 73a3 	movw	r3, #4003	; 0xfa3
 8005970:	60fb      	str	r3, [r7, #12]
    goto error;
 8005972:	e010      	b.n	8005996 <SHA256_Init+0x5a>
  }
  cmox_retval = cmox_hash_init(P_pSHA256ctx->hash_handle);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597a:	4618      	mov	r0, r3
 800597c:	f7fa fc6a 	bl	8000254 <cmox_hash_init>
 8005980:	60b8      	str	r0, [r7, #8]
  if (cmox_retval != CMOX_HASH_SUCCESS)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005988:	d003      	beq.n	8005992 <SHA256_Init+0x56>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 800598a:	f640 73a3 	movw	r3, #4003	; 0xfa3
 800598e:	60fb      	str	r3, [r7, #12]
    goto error;
 8005990:	e001      	b.n	8005996 <SHA256_Init+0x5a>
  }

  retval = HASH_SUCCESS;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]

error:
  return retval;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SHA256_Append>:

/* SHA256 Update function, process input data and update a SHA256ctx_stt */
int32_t SHA256_Append(SHA256ctx_stt *P_pSHA256ctx, const uint8_t *P_pInputBuffer, int32_t P_inputSize)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  cmox_hash_retval_t cmox_retval;
  int32_t retval;

  if ((P_pSHA256ctx == NULL) || (P_pInputBuffer == NULL) || (P_inputSize < 0))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <SHA256_Append+0x1e>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <SHA256_Append+0x1e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	da03      	bge.n	80059c6 <SHA256_Append+0x26>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 80059be:	f640 73a3 	movw	r3, #4003	; 0xfa3
 80059c2:	617b      	str	r3, [r7, #20]
    goto error;
 80059c4:	e01a      	b.n	80059fc <SHA256_Append+0x5c>
  }

  cmox_retval = cmox_hash_append(P_pSHA256ctx->hash_handle, P_pInputBuffer, (size_t)P_inputSize);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fa fc61 	bl	8000298 <cmox_hash_append>
 80059d6:	6138      	str	r0, [r7, #16]

  if (cmox_retval == CMOX_HASH_ERR_BAD_OPERATION)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <SHA256_Append+0x68>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <SHA256_Append+0x48>
  {
    retval = HASH_ERR_BAD_OPERATION;
 80059e0:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80059e4:	617b      	str	r3, [r7, #20]
    goto error;
 80059e6:	e009      	b.n	80059fc <SHA256_Append+0x5c>
  }

  if (cmox_retval != CMOX_HASH_SUCCESS)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ee:	d003      	beq.n	80059f8 <SHA256_Append+0x58>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 80059f0:	f640 73a3 	movw	r3, #4003	; 0xfa3
 80059f4:	617b      	str	r3, [r7, #20]
    goto error;
 80059f6:	e001      	b.n	80059fc <SHA256_Append+0x5c>
  }

  retval = HASH_SUCCESS;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

error:
  return retval;
 80059fc:	697b      	ldr	r3, [r7, #20]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	00020004 	.word	0x00020004

08005a0c <SHA256_Finish>:

/* SHA256 Finish function, produce the output SHA256 digest */
int32_t SHA256_Finish(SHA256ctx_stt *P_pSHA256ctx, uint8_t *P_pOutputBuffer, int32_t *P_pOutputSize)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
     because of the possible (e.g. in 64 bits architectures) different dimension
     between int32_t (used in legacy helper) and size_t (used by the library
     for specifying lengths). */
  size_t tempOutputLen;

  if ((P_pSHA256ctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <SHA256_Finish+0x1e>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SHA256_Finish+0x1e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <SHA256_Finish+0x26>
  {
    retval = HASH_ERR_BAD_PARAMETER;
 8005a2a:	f640 73a3 	movw	r3, #4003	; 0xfa3
 8005a2e:	61fb      	str	r3, [r7, #28]
    goto error;
 8005a30:	e039      	b.n	8005aa6 <SHA256_Finish+0x9a>
  }
  cmox_retval = cmox_hash_setTagLen(P_pSHA256ctx->hash_handle, (size_t)P_pSHA256ctx->mTagSize);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fa fc17 	bl	8000274 <cmox_hash_setTagLen>
 8005a46:	61b8      	str	r0, [r7, #24]

  if (cmox_retval == CMOX_HASH_ERR_BAD_PARAMETER)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <SHA256_Finish+0xa4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <SHA256_Finish+0x4c>
  {
    retval = HASH_ERR_BAD_CONTEXT;
 8005a50:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8005a54:	61fb      	str	r3, [r7, #28]
    goto error;
 8005a56:	e026      	b.n	8005aa6 <SHA256_Finish+0x9a>
  }
  cmox_retval = cmox_hash_generateTag(P_pSHA256ctx->hash_handle, P_pOutputBuffer, &tempOutputLen);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5e:	f107 0214 	add.w	r2, r7, #20
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fa fc29 	bl	80002bc <cmox_hash_generateTag>
 8005a6a:	61b8      	str	r0, [r7, #24]
  if (cmox_retval != CMOX_HASH_SUCCESS)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a72:	d003      	beq.n	8005a7c <SHA256_Finish+0x70>
  {
    retval = HASH_ERR_BAD_CONTEXT;
 8005a74:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8005a78:	61fb      	str	r3, [r7, #28]
    goto error;
 8005a7a:	e014      	b.n	8005aa6 <SHA256_Finish+0x9a>
  }

  /* Copy the cast to int32_t of tempOutputLen in order to not overwrite
     other data close to P_pOutputSize. */
  *P_pOutputSize = (int32_t)tempOutputLen;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	601a      	str	r2, [r3, #0]

  cmox_retval = cmox_hash_cleanup(P_pSHA256ctx->hash_handle);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fa fbd2 	bl	8000234 <cmox_hash_cleanup>
 8005a90:	61b8      	str	r0, [r7, #24]
  if (cmox_retval != CMOX_HASH_SUCCESS)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a98:	d003      	beq.n	8005aa2 <SHA256_Finish+0x96>
  {
    retval = HASH_ERR_BAD_CONTEXT;
 8005a9a:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8005a9e:	61fb      	str	r3, [r7, #28]
    goto error;
 8005aa0:	e001      	b.n	8005aa6 <SHA256_Finish+0x9a>
  }

  retval = HASH_SUCCESS;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]

error:
  return retval;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	00020003 	.word	0x00020003

08005ab4 <__aeabi_memclr>:
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f7fa bf79 	b.w	80009ac <__aeabi_memset>

08005aba <__aeabi_memcpy>:
 8005aba:	f000 b835 	b.w	8005b28 <memcpy>
	...

08005ac0 <__libc_init_array>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4d0d      	ldr	r5, [pc, #52]	; (8005af8 <__libc_init_array+0x38>)
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	4c0d      	ldr	r4, [pc, #52]	; (8005afc <__libc_init_array+0x3c>)
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	42a6      	cmp	r6, r4
 8005ace:	d109      	bne.n	8005ae4 <__libc_init_array+0x24>
 8005ad0:	4d0b      	ldr	r5, [pc, #44]	; (8005b00 <__libc_init_array+0x40>)
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	4c0b      	ldr	r4, [pc, #44]	; (8005b04 <__libc_init_array+0x44>)
 8005ad6:	f000 f83d 	bl	8005b54 <_init>
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	42a6      	cmp	r6, r4
 8005ae0:	d105      	bne.n	8005aee <__libc_init_array+0x2e>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae8:	3601      	adds	r6, #1
 8005aea:	4798      	blx	r3
 8005aec:	e7ee      	b.n	8005acc <__libc_init_array+0xc>
 8005aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af2:	3601      	adds	r6, #1
 8005af4:	4798      	blx	r3
 8005af6:	e7f2      	b.n	8005ade <__libc_init_array+0x1e>
 8005af8:	08005e54 	.word	0x08005e54
 8005afc:	08005e54 	.word	0x08005e54
 8005b00:	08005e54 	.word	0x08005e54
 8005b04:	08005e58 	.word	0x08005e58

08005b08 <memcmp>:
 8005b08:	3901      	subs	r1, #1
 8005b0a:	4402      	add	r2, r0
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4290      	cmp	r0, r2
 8005b10:	d101      	bne.n	8005b16 <memcmp+0xe>
 8005b12:	2000      	movs	r0, #0
 8005b14:	e005      	b.n	8005b22 <memcmp+0x1a>
 8005b16:	7803      	ldrb	r3, [r0, #0]
 8005b18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d001      	beq.n	8005b24 <memcmp+0x1c>
 8005b20:	1b18      	subs	r0, r3, r4
 8005b22:	bd10      	pop	{r4, pc}
 8005b24:	3001      	adds	r0, #1
 8005b26:	e7f2      	b.n	8005b0e <memcmp+0x6>

08005b28 <memcpy>:
 8005b28:	440a      	add	r2, r1
 8005b2a:	1e43      	subs	r3, r0, #1
 8005b2c:	4291      	cmp	r1, r2
 8005b2e:	d100      	bne.n	8005b32 <memcpy+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	b510      	push	{r4, lr}
 8005b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b38:	4291      	cmp	r1, r2
 8005b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b3e:	d1f9      	bne.n	8005b34 <memcpy+0xc>
 8005b40:	bd10      	pop	{r4, pc}

08005b42 <memset>:
 8005b42:	4402      	add	r2, r0
 8005b44:	4603      	mov	r3, r0
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d100      	bne.n	8005b4c <memset+0xa>
 8005b4a:	4770      	bx	lr
 8005b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b50:	e7f9      	b.n	8005b46 <memset+0x4>
	...

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
