
SIGMA_Embedded_APP_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  080201f4  080201f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08023980  08023980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023a20  08023a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08023a20  08023a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023a28  08023a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023a28  08023a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023a2c  08023a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08023a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08023a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08023a3c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da7b  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  0002dabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  000300e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dfc  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7fe  00000000  00000000  000578ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa02f  00000000  00000000  000640aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e0d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  0015e12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201f4 <__do_global_dtors_aux>:
 80201f4:	b510      	push	{r4, lr}
 80201f6:	4c05      	ldr	r4, [pc, #20]	; (802020c <__do_global_dtors_aux+0x18>)
 80201f8:	7823      	ldrb	r3, [r4, #0]
 80201fa:	b933      	cbnz	r3, 802020a <__do_global_dtors_aux+0x16>
 80201fc:	4b04      	ldr	r3, [pc, #16]	; (8020210 <__do_global_dtors_aux+0x1c>)
 80201fe:	b113      	cbz	r3, 8020206 <__do_global_dtors_aux+0x12>
 8020200:	4804      	ldr	r0, [pc, #16]	; (8020214 <__do_global_dtors_aux+0x20>)
 8020202:	e000      	b.n	8020206 <__do_global_dtors_aux+0x12>
 8020204:	bf00      	nop
 8020206:	2301      	movs	r3, #1
 8020208:	7023      	strb	r3, [r4, #0]
 802020a:	bd10      	pop	{r4, pc}
 802020c:	2000000c 	.word	0x2000000c
 8020210:	00000000 	.word	0x00000000
 8020214:	08023968 	.word	0x08023968

08020218 <frame_dummy>:
 8020218:	b508      	push	{r3, lr}
 802021a:	4b03      	ldr	r3, [pc, #12]	; (8020228 <frame_dummy+0x10>)
 802021c:	b11b      	cbz	r3, 8020226 <frame_dummy+0xe>
 802021e:	4903      	ldr	r1, [pc, #12]	; (802022c <frame_dummy+0x14>)
 8020220:	4803      	ldr	r0, [pc, #12]	; (8020230 <frame_dummy+0x18>)
 8020222:	e000      	b.n	8020226 <frame_dummy+0xe>
 8020224:	bf00      	nop
 8020226:	bd08      	pop	{r3, pc}
 8020228:	00000000 	.word	0x00000000
 802022c:	20000010 	.word	0x20000010
 8020230:	08023968 	.word	0x08023968

08020234 <__aeabi_uldivmod>:
 8020234:	b953      	cbnz	r3, 802024c <__aeabi_uldivmod+0x18>
 8020236:	b94a      	cbnz	r2, 802024c <__aeabi_uldivmod+0x18>
 8020238:	2900      	cmp	r1, #0
 802023a:	bf08      	it	eq
 802023c:	2800      	cmpeq	r0, #0
 802023e:	bf1c      	itt	ne
 8020240:	f04f 31ff 	movne.w	r1, #4294967295
 8020244:	f04f 30ff 	movne.w	r0, #4294967295
 8020248:	f000 b982 	b.w	8020550 <__aeabi_idiv0>
 802024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8020250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020254:	f000 f806 	bl	8020264 <__udivmoddi4>
 8020258:	f8dd e004 	ldr.w	lr, [sp, #4]
 802025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020260:	b004      	add	sp, #16
 8020262:	4770      	bx	lr

08020264 <__udivmoddi4>:
 8020264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802026a:	4604      	mov	r4, r0
 802026c:	460f      	mov	r7, r1
 802026e:	2b00      	cmp	r3, #0
 8020270:	d148      	bne.n	8020304 <__udivmoddi4+0xa0>
 8020272:	428a      	cmp	r2, r1
 8020274:	4694      	mov	ip, r2
 8020276:	d961      	bls.n	802033c <__udivmoddi4+0xd8>
 8020278:	fab2 f382 	clz	r3, r2
 802027c:	b143      	cbz	r3, 8020290 <__udivmoddi4+0x2c>
 802027e:	f1c3 0120 	rsb	r1, r3, #32
 8020282:	409f      	lsls	r7, r3
 8020284:	fa02 fc03 	lsl.w	ip, r2, r3
 8020288:	409c      	lsls	r4, r3
 802028a:	fa20 f101 	lsr.w	r1, r0, r1
 802028e:	430f      	orrs	r7, r1
 8020290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8020294:	fa1f fe8c 	uxth.w	lr, ip
 8020298:	0c22      	lsrs	r2, r4, #16
 802029a:	fbb7 f6f1 	udiv	r6, r7, r1
 802029e:	fb01 7716 	mls	r7, r1, r6, r7
 80202a2:	fb06 f00e 	mul.w	r0, r6, lr
 80202a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80202aa:	4290      	cmp	r0, r2
 80202ac:	d908      	bls.n	80202c0 <__udivmoddi4+0x5c>
 80202ae:	eb1c 0202 	adds.w	r2, ip, r2
 80202b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80202b6:	d202      	bcs.n	80202be <__udivmoddi4+0x5a>
 80202b8:	4290      	cmp	r0, r2
 80202ba:	f200 8137 	bhi.w	802052c <__udivmoddi4+0x2c8>
 80202be:	463e      	mov	r6, r7
 80202c0:	1a12      	subs	r2, r2, r0
 80202c2:	b2a4      	uxth	r4, r4
 80202c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80202c8:	fb01 2210 	mls	r2, r1, r0, r2
 80202cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80202d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80202d4:	45a6      	cmp	lr, r4
 80202d6:	d908      	bls.n	80202ea <__udivmoddi4+0x86>
 80202d8:	eb1c 0404 	adds.w	r4, ip, r4
 80202dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80202e0:	d202      	bcs.n	80202e8 <__udivmoddi4+0x84>
 80202e2:	45a6      	cmp	lr, r4
 80202e4:	f200 811c 	bhi.w	8020520 <__udivmoddi4+0x2bc>
 80202e8:	4610      	mov	r0, r2
 80202ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80202ee:	eba4 040e 	sub.w	r4, r4, lr
 80202f2:	2600      	movs	r6, #0
 80202f4:	b11d      	cbz	r5, 80202fe <__udivmoddi4+0x9a>
 80202f6:	40dc      	lsrs	r4, r3
 80202f8:	2300      	movs	r3, #0
 80202fa:	e9c5 4300 	strd	r4, r3, [r5]
 80202fe:	4631      	mov	r1, r6
 8020300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020304:	428b      	cmp	r3, r1
 8020306:	d909      	bls.n	802031c <__udivmoddi4+0xb8>
 8020308:	2d00      	cmp	r5, #0
 802030a:	f000 80fd 	beq.w	8020508 <__udivmoddi4+0x2a4>
 802030e:	2600      	movs	r6, #0
 8020310:	e9c5 0100 	strd	r0, r1, [r5]
 8020314:	4630      	mov	r0, r6
 8020316:	4631      	mov	r1, r6
 8020318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802031c:	fab3 f683 	clz	r6, r3
 8020320:	2e00      	cmp	r6, #0
 8020322:	d14b      	bne.n	80203bc <__udivmoddi4+0x158>
 8020324:	428b      	cmp	r3, r1
 8020326:	f0c0 80f2 	bcc.w	802050e <__udivmoddi4+0x2aa>
 802032a:	4282      	cmp	r2, r0
 802032c:	f240 80ef 	bls.w	802050e <__udivmoddi4+0x2aa>
 8020330:	4630      	mov	r0, r6
 8020332:	2d00      	cmp	r5, #0
 8020334:	d0e3      	beq.n	80202fe <__udivmoddi4+0x9a>
 8020336:	e9c5 4700 	strd	r4, r7, [r5]
 802033a:	e7e0      	b.n	80202fe <__udivmoddi4+0x9a>
 802033c:	b902      	cbnz	r2, 8020340 <__udivmoddi4+0xdc>
 802033e:	deff      	udf	#255	; 0xff
 8020340:	fab2 f382 	clz	r3, r2
 8020344:	2b00      	cmp	r3, #0
 8020346:	f040 809d 	bne.w	8020484 <__udivmoddi4+0x220>
 802034a:	1a89      	subs	r1, r1, r2
 802034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020350:	b297      	uxth	r7, r2
 8020352:	2601      	movs	r6, #1
 8020354:	0c20      	lsrs	r0, r4, #16
 8020356:	fbb1 f2fe 	udiv	r2, r1, lr
 802035a:	fb0e 1112 	mls	r1, lr, r2, r1
 802035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020362:	fb07 f002 	mul.w	r0, r7, r2
 8020366:	4288      	cmp	r0, r1
 8020368:	d90f      	bls.n	802038a <__udivmoddi4+0x126>
 802036a:	eb1c 0101 	adds.w	r1, ip, r1
 802036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8020372:	bf2c      	ite	cs
 8020374:	f04f 0901 	movcs.w	r9, #1
 8020378:	f04f 0900 	movcc.w	r9, #0
 802037c:	4288      	cmp	r0, r1
 802037e:	d903      	bls.n	8020388 <__udivmoddi4+0x124>
 8020380:	f1b9 0f00 	cmp.w	r9, #0
 8020384:	f000 80cf 	beq.w	8020526 <__udivmoddi4+0x2c2>
 8020388:	4642      	mov	r2, r8
 802038a:	1a09      	subs	r1, r1, r0
 802038c:	b2a4      	uxth	r4, r4
 802038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8020392:	fb0e 1110 	mls	r1, lr, r0, r1
 8020396:	fb00 f707 	mul.w	r7, r0, r7
 802039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802039e:	42a7      	cmp	r7, r4
 80203a0:	d908      	bls.n	80203b4 <__udivmoddi4+0x150>
 80203a2:	eb1c 0404 	adds.w	r4, ip, r4
 80203a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80203aa:	d202      	bcs.n	80203b2 <__udivmoddi4+0x14e>
 80203ac:	42a7      	cmp	r7, r4
 80203ae:	f200 80b4 	bhi.w	802051a <__udivmoddi4+0x2b6>
 80203b2:	4608      	mov	r0, r1
 80203b4:	1be4      	subs	r4, r4, r7
 80203b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80203ba:	e79b      	b.n	80202f4 <__udivmoddi4+0x90>
 80203bc:	f1c6 0720 	rsb	r7, r6, #32
 80203c0:	40b3      	lsls	r3, r6
 80203c2:	fa01 f406 	lsl.w	r4, r1, r6
 80203c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80203ca:	40f9      	lsrs	r1, r7
 80203cc:	40b2      	lsls	r2, r6
 80203ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80203d2:	fa20 f307 	lsr.w	r3, r0, r7
 80203d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80203da:	431c      	orrs	r4, r3
 80203dc:	fa1f fe8c 	uxth.w	lr, ip
 80203e0:	fa00 f306 	lsl.w	r3, r0, r6
 80203e4:	0c20      	lsrs	r0, r4, #16
 80203e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80203ea:	fb09 1118 	mls	r1, r9, r8, r1
 80203ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203f2:	fb08 f00e 	mul.w	r0, r8, lr
 80203f6:	4288      	cmp	r0, r1
 80203f8:	d90f      	bls.n	802041a <__udivmoddi4+0x1b6>
 80203fa:	eb1c 0101 	adds.w	r1, ip, r1
 80203fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8020402:	bf2c      	ite	cs
 8020404:	f04f 0b01 	movcs.w	fp, #1
 8020408:	f04f 0b00 	movcc.w	fp, #0
 802040c:	4288      	cmp	r0, r1
 802040e:	d903      	bls.n	8020418 <__udivmoddi4+0x1b4>
 8020410:	f1bb 0f00 	cmp.w	fp, #0
 8020414:	f000 808d 	beq.w	8020532 <__udivmoddi4+0x2ce>
 8020418:	46d0      	mov	r8, sl
 802041a:	1a09      	subs	r1, r1, r0
 802041c:	b2a4      	uxth	r4, r4
 802041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8020422:	fb09 1110 	mls	r1, r9, r0, r1
 8020426:	fb00 fe0e 	mul.w	lr, r0, lr
 802042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 802042e:	458e      	cmp	lr, r1
 8020430:	d907      	bls.n	8020442 <__udivmoddi4+0x1de>
 8020432:	eb1c 0101 	adds.w	r1, ip, r1
 8020436:	f100 34ff 	add.w	r4, r0, #4294967295
 802043a:	d201      	bcs.n	8020440 <__udivmoddi4+0x1dc>
 802043c:	458e      	cmp	lr, r1
 802043e:	d87f      	bhi.n	8020540 <__udivmoddi4+0x2dc>
 8020440:	4620      	mov	r0, r4
 8020442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020446:	eba1 010e 	sub.w	r1, r1, lr
 802044a:	fba0 9802 	umull	r9, r8, r0, r2
 802044e:	4541      	cmp	r1, r8
 8020450:	464c      	mov	r4, r9
 8020452:	46c6      	mov	lr, r8
 8020454:	d302      	bcc.n	802045c <__udivmoddi4+0x1f8>
 8020456:	d106      	bne.n	8020466 <__udivmoddi4+0x202>
 8020458:	454b      	cmp	r3, r9
 802045a:	d204      	bcs.n	8020466 <__udivmoddi4+0x202>
 802045c:	3801      	subs	r0, #1
 802045e:	ebb9 0402 	subs.w	r4, r9, r2
 8020462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8020466:	2d00      	cmp	r5, #0
 8020468:	d070      	beq.n	802054c <__udivmoddi4+0x2e8>
 802046a:	1b1a      	subs	r2, r3, r4
 802046c:	eb61 010e 	sbc.w	r1, r1, lr
 8020470:	fa22 f306 	lsr.w	r3, r2, r6
 8020474:	fa01 f707 	lsl.w	r7, r1, r7
 8020478:	40f1      	lsrs	r1, r6
 802047a:	2600      	movs	r6, #0
 802047c:	431f      	orrs	r7, r3
 802047e:	e9c5 7100 	strd	r7, r1, [r5]
 8020482:	e73c      	b.n	80202fe <__udivmoddi4+0x9a>
 8020484:	fa02 fc03 	lsl.w	ip, r2, r3
 8020488:	f1c3 0020 	rsb	r0, r3, #32
 802048c:	fa01 f203 	lsl.w	r2, r1, r3
 8020490:	fa21 f600 	lsr.w	r6, r1, r0
 8020494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020498:	fa24 f100 	lsr.w	r1, r4, r0
 802049c:	fa1f f78c 	uxth.w	r7, ip
 80204a0:	409c      	lsls	r4, r3
 80204a2:	4311      	orrs	r1, r2
 80204a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80204a8:	0c0a      	lsrs	r2, r1, #16
 80204aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80204ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80204b2:	fb00 f607 	mul.w	r6, r0, r7
 80204b6:	4296      	cmp	r6, r2
 80204b8:	d90e      	bls.n	80204d8 <__udivmoddi4+0x274>
 80204ba:	eb1c 0202 	adds.w	r2, ip, r2
 80204be:	f100 38ff 	add.w	r8, r0, #4294967295
 80204c2:	bf2c      	ite	cs
 80204c4:	f04f 0901 	movcs.w	r9, #1
 80204c8:	f04f 0900 	movcc.w	r9, #0
 80204cc:	4296      	cmp	r6, r2
 80204ce:	d902      	bls.n	80204d6 <__udivmoddi4+0x272>
 80204d0:	f1b9 0f00 	cmp.w	r9, #0
 80204d4:	d031      	beq.n	802053a <__udivmoddi4+0x2d6>
 80204d6:	4640      	mov	r0, r8
 80204d8:	1b92      	subs	r2, r2, r6
 80204da:	b289      	uxth	r1, r1
 80204dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80204e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80204e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80204e8:	fb06 f207 	mul.w	r2, r6, r7
 80204ec:	428a      	cmp	r2, r1
 80204ee:	d907      	bls.n	8020500 <__udivmoddi4+0x29c>
 80204f0:	eb1c 0101 	adds.w	r1, ip, r1
 80204f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80204f8:	d201      	bcs.n	80204fe <__udivmoddi4+0x29a>
 80204fa:	428a      	cmp	r2, r1
 80204fc:	d823      	bhi.n	8020546 <__udivmoddi4+0x2e2>
 80204fe:	4646      	mov	r6, r8
 8020500:	1a89      	subs	r1, r1, r2
 8020502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020506:	e725      	b.n	8020354 <__udivmoddi4+0xf0>
 8020508:	462e      	mov	r6, r5
 802050a:	4628      	mov	r0, r5
 802050c:	e6f7      	b.n	80202fe <__udivmoddi4+0x9a>
 802050e:	1a84      	subs	r4, r0, r2
 8020510:	eb61 0303 	sbc.w	r3, r1, r3
 8020514:	2001      	movs	r0, #1
 8020516:	461f      	mov	r7, r3
 8020518:	e70b      	b.n	8020332 <__udivmoddi4+0xce>
 802051a:	4464      	add	r4, ip
 802051c:	3802      	subs	r0, #2
 802051e:	e749      	b.n	80203b4 <__udivmoddi4+0x150>
 8020520:	4464      	add	r4, ip
 8020522:	3802      	subs	r0, #2
 8020524:	e6e1      	b.n	80202ea <__udivmoddi4+0x86>
 8020526:	3a02      	subs	r2, #2
 8020528:	4461      	add	r1, ip
 802052a:	e72e      	b.n	802038a <__udivmoddi4+0x126>
 802052c:	3e02      	subs	r6, #2
 802052e:	4462      	add	r2, ip
 8020530:	e6c6      	b.n	80202c0 <__udivmoddi4+0x5c>
 8020532:	f1a8 0802 	sub.w	r8, r8, #2
 8020536:	4461      	add	r1, ip
 8020538:	e76f      	b.n	802041a <__udivmoddi4+0x1b6>
 802053a:	3802      	subs	r0, #2
 802053c:	4462      	add	r2, ip
 802053e:	e7cb      	b.n	80204d8 <__udivmoddi4+0x274>
 8020540:	3802      	subs	r0, #2
 8020542:	4461      	add	r1, ip
 8020544:	e77d      	b.n	8020442 <__udivmoddi4+0x1de>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	e7d9      	b.n	8020500 <__udivmoddi4+0x29c>
 802054c:	462e      	mov	r6, r5
 802054e:	e6d6      	b.n	80202fe <__udivmoddi4+0x9a>

08020550 <__aeabi_idiv0>:
 8020550:	4770      	bx	lr
 8020552:	bf00      	nop

08020554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020554:	b580      	push	{r7, lr}
 8020556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020558:	f000 fa91 	bl	8020a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802055c:	f000 f80a 	bl	8020574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020560:	f000 f8a6 	bl	80206b0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8020564:	f000 f858 	bl	8020618 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SIGMA_Uart_Transmit_str((uint8_t*)"Hello I am Running the App now!");
 8020568:	4801      	ldr	r0, [pc, #4]	; (8020570 <main+0x1c>)
 802056a:	f000 f8c5 	bl	80206f8 <SIGMA_Uart_Transmit_str>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 802056e:	e7fe      	b.n	802056e <main+0x1a>
 8020570:	08023980 	.word	0x08023980

08020574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020574:	b580      	push	{r7, lr}
 8020576:	b098      	sub	sp, #96	; 0x60
 8020578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802057a:	f107 0318 	add.w	r3, r7, #24
 802057e:	2248      	movs	r2, #72	; 0x48
 8020580:	2100      	movs	r1, #0
 8020582:	4618      	mov	r0, r3
 8020584:	f003 f9e8 	bl	8023958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020588:	1d3b      	adds	r3, r7, #4
 802058a:	2200      	movs	r2, #0
 802058c:	601a      	str	r2, [r3, #0]
 802058e:	605a      	str	r2, [r3, #4]
 8020590:	609a      	str	r2, [r3, #8]
 8020592:	60da      	str	r2, [r3, #12]
 8020594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8020596:	2000      	movs	r0, #0
 8020598:	f000 fd5a 	bl	8021050 <HAL_PWREx_ControlVoltageScaling>
 802059c:	4603      	mov	r3, r0
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d001      	beq.n	80205a6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80205a2:	f000 f8cf 	bl	8020744 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80205a6:	2310      	movs	r3, #16
 80205a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80205aa:	2301      	movs	r3, #1
 80205ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80205ae:	2300      	movs	r3, #0
 80205b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80205b2:	2360      	movs	r3, #96	; 0x60
 80205b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80205b6:	2302      	movs	r3, #2
 80205b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80205ba:	2301      	movs	r3, #1
 80205bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80205be:	2301      	movs	r3, #1
 80205c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80205c2:	2337      	movs	r3, #55	; 0x37
 80205c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80205c6:	2307      	movs	r3, #7
 80205c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80205ca:	2302      	movs	r3, #2
 80205cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80205ce:	2302      	movs	r3, #2
 80205d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80205d2:	f107 0318 	add.w	r3, r7, #24
 80205d6:	4618      	mov	r0, r3
 80205d8:	f000 fdca 	bl	8021170 <HAL_RCC_OscConfig>
 80205dc:	4603      	mov	r3, r0
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d001      	beq.n	80205e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80205e2:	f000 f8af 	bl	8020744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80205e6:	230f      	movs	r3, #15
 80205e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80205ea:	2303      	movs	r3, #3
 80205ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80205ee:	2300      	movs	r3, #0
 80205f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80205f2:	2300      	movs	r3, #0
 80205f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80205f6:	2300      	movs	r3, #0
 80205f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80205fa:	1d3b      	adds	r3, r7, #4
 80205fc:	2105      	movs	r1, #5
 80205fe:	4618      	mov	r0, r3
 8020600:	f001 fa8c 	bl	8021b1c <HAL_RCC_ClockConfig>
 8020604:	4603      	mov	r3, r0
 8020606:	2b00      	cmp	r3, #0
 8020608:	d001      	beq.n	802060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802060a:	f000 f89b 	bl	8020744 <Error_Handler>
  }
}
 802060e:	bf00      	nop
 8020610:	3760      	adds	r7, #96	; 0x60
 8020612:	46bd      	mov	sp, r7
 8020614:	bd80      	pop	{r7, pc}
	...

08020618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8020618:	b580      	push	{r7, lr}
 802061a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 802061c:	4b22      	ldr	r3, [pc, #136]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 802061e:	4a23      	ldr	r2, [pc, #140]	; (80206ac <MX_LPUART1_UART_Init+0x94>)
 8020620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8020622:	4b21      	ldr	r3, [pc, #132]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 802062a:	4b1f      	ldr	r3, [pc, #124]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 802062c:	2200      	movs	r2, #0
 802062e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8020630:	4b1d      	ldr	r3, [pc, #116]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020632:	2200      	movs	r2, #0
 8020634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8020636:	4b1c      	ldr	r3, [pc, #112]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020638:	2200      	movs	r2, #0
 802063a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 802063c:	4b1a      	ldr	r3, [pc, #104]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 802063e:	220c      	movs	r2, #12
 8020640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020642:	4b19      	ldr	r3, [pc, #100]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020644:	2200      	movs	r2, #0
 8020646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020648:	4b17      	ldr	r3, [pc, #92]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 802064a:	2200      	movs	r2, #0
 802064c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802064e:	4b16      	ldr	r3, [pc, #88]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020650:	2200      	movs	r2, #0
 8020652:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020654:	4b14      	ldr	r3, [pc, #80]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020656:	2200      	movs	r2, #0
 8020658:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 802065a:	4b13      	ldr	r3, [pc, #76]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 802065c:	2200      	movs	r2, #0
 802065e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8020660:	4811      	ldr	r0, [pc, #68]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020662:	f002 fa55 	bl	8022b10 <HAL_UART_Init>
 8020666:	4603      	mov	r3, r0
 8020668:	2b00      	cmp	r3, #0
 802066a:	d001      	beq.n	8020670 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 802066c:	f000 f86a 	bl	8020744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020670:	2100      	movs	r1, #0
 8020672:	480d      	ldr	r0, [pc, #52]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020674:	f003 f882 	bl	802377c <HAL_UARTEx_SetTxFifoThreshold>
 8020678:	4603      	mov	r3, r0
 802067a:	2b00      	cmp	r3, #0
 802067c:	d001      	beq.n	8020682 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 802067e:	f000 f861 	bl	8020744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020682:	2100      	movs	r1, #0
 8020684:	4808      	ldr	r0, [pc, #32]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020686:	f003 f8b7 	bl	80237f8 <HAL_UARTEx_SetRxFifoThreshold>
 802068a:	4603      	mov	r3, r0
 802068c:	2b00      	cmp	r3, #0
 802068e:	d001      	beq.n	8020694 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8020690:	f000 f858 	bl	8020744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8020694:	4804      	ldr	r0, [pc, #16]	; (80206a8 <MX_LPUART1_UART_Init+0x90>)
 8020696:	f003 f838 	bl	802370a <HAL_UARTEx_DisableFifoMode>
 802069a:	4603      	mov	r3, r0
 802069c:	2b00      	cmp	r3, #0
 802069e:	d001      	beq.n	80206a4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80206a0:	f000 f850 	bl	8020744 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80206a4:	bf00      	nop
 80206a6:	bd80      	pop	{r7, pc}
 80206a8:	20000028 	.word	0x20000028
 80206ac:	40008000 	.word	0x40008000

080206b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	b082      	sub	sp, #8
 80206b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80206b6:	4b0f      	ldr	r3, [pc, #60]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80206ba:	4a0e      	ldr	r2, [pc, #56]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80206c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80206c2:	4b0c      	ldr	r3, [pc, #48]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80206c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80206ca:	607b      	str	r3, [r7, #4]
 80206cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80206ce:	4b09      	ldr	r3, [pc, #36]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80206d2:	4a08      	ldr	r2, [pc, #32]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80206d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80206da:	4b06      	ldr	r3, [pc, #24]	; (80206f4 <MX_GPIO_Init+0x44>)
 80206dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80206de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80206e2:	603b      	str	r3, [r7, #0]
 80206e4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80206e6:	f000 fd0f 	bl	8021108 <HAL_PWREx_EnableVddIO2>

}
 80206ea:	bf00      	nop
 80206ec:	3708      	adds	r7, #8
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd80      	pop	{r7, pc}
 80206f2:	bf00      	nop
 80206f4:	40021000 	.word	0x40021000

080206f8 <SIGMA_Uart_Transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status SIGMA_Uart_Transmit_str(uint8_t *data)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b084      	sub	sp, #16
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8020700:	23ff      	movs	r3, #255	; 0xff
 8020702:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8020704:	2300      	movs	r3, #0
 8020706:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8020708:	e002      	b.n	8020710 <SIGMA_Uart_Transmit_str+0x18>
  {
    length++;
 802070a:	89bb      	ldrh	r3, [r7, #12]
 802070c:	3301      	adds	r3, #1
 802070e:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8020710:	89bb      	ldrh	r3, [r7, #12]
 8020712:	687a      	ldr	r2, [r7, #4]
 8020714:	4413      	add	r3, r2
 8020716:	781b      	ldrb	r3, [r3, #0]
 8020718:	2b00      	cmp	r3, #0
 802071a:	d1f6      	bne.n	802070a <SIGMA_Uart_Transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, data, length, UART_TIMEOUT))
 802071c:	89ba      	ldrh	r2, [r7, #12]
 802071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020722:	6879      	ldr	r1, [r7, #4]
 8020724:	4806      	ldr	r0, [pc, #24]	; (8020740 <SIGMA_Uart_Transmit_str+0x48>)
 8020726:	f002 fa43 	bl	8022bb0 <HAL_UART_Transmit>
 802072a:	4603      	mov	r3, r0
 802072c:	2b00      	cmp	r3, #0
 802072e:	d101      	bne.n	8020734 <SIGMA_Uart_Transmit_str+0x3c>
  {
    status = UART_OK;
 8020730:	2300      	movs	r3, #0
 8020732:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8020734:	7bfb      	ldrb	r3, [r7, #15]
}
 8020736:	4618      	mov	r0, r3
 8020738:	3710      	adds	r7, #16
 802073a:	46bd      	mov	sp, r7
 802073c:	bd80      	pop	{r7, pc}
 802073e:	bf00      	nop
 8020740:	20000028 	.word	0x20000028

08020744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020744:	b480      	push	{r7}
 8020746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020748:	b672      	cpsid	i
}
 802074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802074c:	e7fe      	b.n	802074c <Error_Handler+0x8>
	...

08020750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020750:	b480      	push	{r7}
 8020752:	b083      	sub	sp, #12
 8020754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020756:	4b0f      	ldr	r3, [pc, #60]	; (8020794 <HAL_MspInit+0x44>)
 8020758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802075a:	4a0e      	ldr	r2, [pc, #56]	; (8020794 <HAL_MspInit+0x44>)
 802075c:	f043 0301 	orr.w	r3, r3, #1
 8020760:	6613      	str	r3, [r2, #96]	; 0x60
 8020762:	4b0c      	ldr	r3, [pc, #48]	; (8020794 <HAL_MspInit+0x44>)
 8020764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020766:	f003 0301 	and.w	r3, r3, #1
 802076a:	607b      	str	r3, [r7, #4]
 802076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802076e:	4b09      	ldr	r3, [pc, #36]	; (8020794 <HAL_MspInit+0x44>)
 8020770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020772:	4a08      	ldr	r2, [pc, #32]	; (8020794 <HAL_MspInit+0x44>)
 8020774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020778:	6593      	str	r3, [r2, #88]	; 0x58
 802077a:	4b06      	ldr	r3, [pc, #24]	; (8020794 <HAL_MspInit+0x44>)
 802077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020782:	603b      	str	r3, [r7, #0]
 8020784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020786:	bf00      	nop
 8020788:	370c      	adds	r7, #12
 802078a:	46bd      	mov	sp, r7
 802078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020790:	4770      	bx	lr
 8020792:	bf00      	nop
 8020794:	40021000 	.word	0x40021000

08020798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020798:	b580      	push	{r7, lr}
 802079a:	b0ae      	sub	sp, #184	; 0xb8
 802079c:	af00      	add	r7, sp, #0
 802079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80207a4:	2200      	movs	r2, #0
 80207a6:	601a      	str	r2, [r3, #0]
 80207a8:	605a      	str	r2, [r3, #4]
 80207aa:	609a      	str	r2, [r3, #8]
 80207ac:	60da      	str	r2, [r3, #12]
 80207ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80207b0:	f107 0310 	add.w	r3, r7, #16
 80207b4:	2294      	movs	r2, #148	; 0x94
 80207b6:	2100      	movs	r1, #0
 80207b8:	4618      	mov	r0, r3
 80207ba:	f003 f8cd 	bl	8023958 <memset>
  if(huart->Instance==LPUART1)
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	4a22      	ldr	r2, [pc, #136]	; (802084c <HAL_UART_MspInit+0xb4>)
 80207c4:	4293      	cmp	r3, r2
 80207c6:	d13d      	bne.n	8020844 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80207c8:	2320      	movs	r3, #32
 80207ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80207cc:	2300      	movs	r3, #0
 80207ce:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80207d0:	f107 0310 	add.w	r3, r7, #16
 80207d4:	4618      	mov	r0, r3
 80207d6:	f001 fc85 	bl	80220e4 <HAL_RCCEx_PeriphCLKConfig>
 80207da:	4603      	mov	r3, r0
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d001      	beq.n	80207e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80207e0:	f7ff ffb0 	bl	8020744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80207e4:	4b1a      	ldr	r3, [pc, #104]	; (8020850 <HAL_UART_MspInit+0xb8>)
 80207e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80207e8:	4a19      	ldr	r2, [pc, #100]	; (8020850 <HAL_UART_MspInit+0xb8>)
 80207ea:	f043 0301 	orr.w	r3, r3, #1
 80207ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80207f0:	4b17      	ldr	r3, [pc, #92]	; (8020850 <HAL_UART_MspInit+0xb8>)
 80207f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80207f4:	f003 0301 	and.w	r3, r3, #1
 80207f8:	60fb      	str	r3, [r7, #12]
 80207fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80207fc:	4b14      	ldr	r3, [pc, #80]	; (8020850 <HAL_UART_MspInit+0xb8>)
 80207fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020800:	4a13      	ldr	r2, [pc, #76]	; (8020850 <HAL_UART_MspInit+0xb8>)
 8020802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020808:	4b11      	ldr	r3, [pc, #68]	; (8020850 <HAL_UART_MspInit+0xb8>)
 802080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020810:	60bb      	str	r3, [r7, #8]
 8020812:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8020814:	f000 fc78 	bl	8021108 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8020818:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802081c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020820:	2302      	movs	r3, #2
 8020822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020826:	2300      	movs	r3, #0
 8020828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802082c:	2300      	movs	r3, #0
 802082e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8020832:	2308      	movs	r3, #8
 8020834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802083c:	4619      	mov	r1, r3
 802083e:	4805      	ldr	r0, [pc, #20]	; (8020854 <HAL_UART_MspInit+0xbc>)
 8020840:	f000 fa78 	bl	8020d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8020844:	bf00      	nop
 8020846:	37b8      	adds	r7, #184	; 0xb8
 8020848:	46bd      	mov	sp, r7
 802084a:	bd80      	pop	{r7, pc}
 802084c:	40008000 	.word	0x40008000
 8020850:	40021000 	.word	0x40021000
 8020854:	42021800 	.word	0x42021800

08020858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020858:	b480      	push	{r7}
 802085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802085c:	e7fe      	b.n	802085c <NMI_Handler+0x4>

0802085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802085e:	b480      	push	{r7}
 8020860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020862:	e7fe      	b.n	8020862 <HardFault_Handler+0x4>

08020864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020864:	b480      	push	{r7}
 8020866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020868:	e7fe      	b.n	8020868 <MemManage_Handler+0x4>

0802086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802086a:	b480      	push	{r7}
 802086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802086e:	e7fe      	b.n	802086e <BusFault_Handler+0x4>

08020870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020870:	b480      	push	{r7}
 8020872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020874:	e7fe      	b.n	8020874 <UsageFault_Handler+0x4>

08020876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020876:	b480      	push	{r7}
 8020878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802087a:	bf00      	nop
 802087c:	46bd      	mov	sp, r7
 802087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020882:	4770      	bx	lr

08020884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020884:	b480      	push	{r7}
 8020886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020888:	bf00      	nop
 802088a:	46bd      	mov	sp, r7
 802088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020890:	4770      	bx	lr

08020892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020892:	b480      	push	{r7}
 8020894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020896:	bf00      	nop
 8020898:	46bd      	mov	sp, r7
 802089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089e:	4770      	bx	lr

080208a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80208a4:	f000 f942 	bl	8020b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80208a8:	bf00      	nop
 80208aa:	bd80      	pop	{r7, pc}

080208ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80208ac:	b480      	push	{r7}
 80208ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80208b0:	4b06      	ldr	r3, [pc, #24]	; (80208cc <SystemInit+0x20>)
 80208b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80208b6:	4a05      	ldr	r2, [pc, #20]	; (80208cc <SystemInit+0x20>)
 80208b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80208bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80208c0:	bf00      	nop
 80208c2:	46bd      	mov	sp, r7
 80208c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c8:	4770      	bx	lr
 80208ca:	bf00      	nop
 80208cc:	e000ed00 	.word	0xe000ed00

080208d0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80208d0:	b480      	push	{r7}
 80208d2:	b087      	sub	sp, #28
 80208d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80208d6:	4b4f      	ldr	r3, [pc, #316]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	f003 0308 	and.w	r3, r3, #8
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d107      	bne.n	80208f2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80208e2:	4b4c      	ldr	r3, [pc, #304]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80208e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80208e8:	0a1b      	lsrs	r3, r3, #8
 80208ea:	f003 030f 	and.w	r3, r3, #15
 80208ee:	617b      	str	r3, [r7, #20]
 80208f0:	e005      	b.n	80208fe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80208f2:	4b48      	ldr	r3, [pc, #288]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	091b      	lsrs	r3, r3, #4
 80208f8:	f003 030f 	and.w	r3, r3, #15
 80208fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80208fe:	4a46      	ldr	r2, [pc, #280]	; (8020a18 <SystemCoreClockUpdate+0x148>)
 8020900:	697b      	ldr	r3, [r7, #20]
 8020902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020906:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020908:	4b42      	ldr	r3, [pc, #264]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 802090a:	689b      	ldr	r3, [r3, #8]
 802090c:	f003 030c 	and.w	r3, r3, #12
 8020910:	2b0c      	cmp	r3, #12
 8020912:	d866      	bhi.n	80209e2 <SystemCoreClockUpdate+0x112>
 8020914:	a201      	add	r2, pc, #4	; (adr r2, 802091c <SystemCoreClockUpdate+0x4c>)
 8020916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802091a:	bf00      	nop
 802091c:	08020951 	.word	0x08020951
 8020920:	080209e3 	.word	0x080209e3
 8020924:	080209e3 	.word	0x080209e3
 8020928:	080209e3 	.word	0x080209e3
 802092c:	08020959 	.word	0x08020959
 8020930:	080209e3 	.word	0x080209e3
 8020934:	080209e3 	.word	0x080209e3
 8020938:	080209e3 	.word	0x080209e3
 802093c:	08020961 	.word	0x08020961
 8020940:	080209e3 	.word	0x080209e3
 8020944:	080209e3 	.word	0x080209e3
 8020948:	080209e3 	.word	0x080209e3
 802094c:	08020969 	.word	0x08020969
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8020950:	4a32      	ldr	r2, [pc, #200]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 8020952:	697b      	ldr	r3, [r7, #20]
 8020954:	6013      	str	r3, [r2, #0]
      break;
 8020956:	e048      	b.n	80209ea <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8020958:	4b30      	ldr	r3, [pc, #192]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 802095a:	4a31      	ldr	r2, [pc, #196]	; (8020a20 <SystemCoreClockUpdate+0x150>)
 802095c:	601a      	str	r2, [r3, #0]
      break;
 802095e:	e044      	b.n	80209ea <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8020960:	4b2e      	ldr	r3, [pc, #184]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 8020962:	4a30      	ldr	r2, [pc, #192]	; (8020a24 <SystemCoreClockUpdate+0x154>)
 8020964:	601a      	str	r2, [r3, #0]
      break;
 8020966:	e040      	b.n	80209ea <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8020968:	4b2a      	ldr	r3, [pc, #168]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 802096a:	68db      	ldr	r3, [r3, #12]
 802096c:	f003 0303 	and.w	r3, r3, #3
 8020970:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8020972:	4b28      	ldr	r3, [pc, #160]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 8020974:	68db      	ldr	r3, [r3, #12]
 8020976:	091b      	lsrs	r3, r3, #4
 8020978:	f003 030f 	and.w	r3, r3, #15
 802097c:	3301      	adds	r3, #1
 802097e:	60bb      	str	r3, [r7, #8]
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	2b02      	cmp	r3, #2
 8020984:	d003      	beq.n	802098e <SystemCoreClockUpdate+0xbe>
 8020986:	68fb      	ldr	r3, [r7, #12]
 8020988:	2b03      	cmp	r3, #3
 802098a:	d006      	beq.n	802099a <SystemCoreClockUpdate+0xca>
 802098c:	e00b      	b.n	80209a6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 802098e:	4a24      	ldr	r2, [pc, #144]	; (8020a20 <SystemCoreClockUpdate+0x150>)
 8020990:	68bb      	ldr	r3, [r7, #8]
 8020992:	fbb2 f3f3 	udiv	r3, r2, r3
 8020996:	613b      	str	r3, [r7, #16]
          break;
 8020998:	e00b      	b.n	80209b2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 802099a:	4a22      	ldr	r2, [pc, #136]	; (8020a24 <SystemCoreClockUpdate+0x154>)
 802099c:	68bb      	ldr	r3, [r7, #8]
 802099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80209a2:	613b      	str	r3, [r7, #16]
          break;
 80209a4:	e005      	b.n	80209b2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80209a6:	697a      	ldr	r2, [r7, #20]
 80209a8:	68bb      	ldr	r3, [r7, #8]
 80209aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80209ae:	613b      	str	r3, [r7, #16]
          break;
 80209b0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80209b2:	4b18      	ldr	r3, [pc, #96]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80209b4:	68db      	ldr	r3, [r3, #12]
 80209b6:	0a1b      	lsrs	r3, r3, #8
 80209b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80209bc:	693b      	ldr	r3, [r7, #16]
 80209be:	fb02 f303 	mul.w	r3, r2, r3
 80209c2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80209c4:	4b13      	ldr	r3, [pc, #76]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80209c6:	68db      	ldr	r3, [r3, #12]
 80209c8:	0e5b      	lsrs	r3, r3, #25
 80209ca:	f003 0303 	and.w	r3, r3, #3
 80209ce:	3301      	adds	r3, #1
 80209d0:	005b      	lsls	r3, r3, #1
 80209d2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80209d4:	693a      	ldr	r2, [r7, #16]
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80209dc:	4a0f      	ldr	r2, [pc, #60]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 80209de:	6013      	str	r3, [r2, #0]
      break;
 80209e0:	e003      	b.n	80209ea <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80209e2:	4a0e      	ldr	r2, [pc, #56]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 80209e4:	697b      	ldr	r3, [r7, #20]
 80209e6:	6013      	str	r3, [r2, #0]
      break;
 80209e8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80209ea:	4b0a      	ldr	r3, [pc, #40]	; (8020a14 <SystemCoreClockUpdate+0x144>)
 80209ec:	689b      	ldr	r3, [r3, #8]
 80209ee:	091b      	lsrs	r3, r3, #4
 80209f0:	f003 030f 	and.w	r3, r3, #15
 80209f4:	4a0c      	ldr	r2, [pc, #48]	; (8020a28 <SystemCoreClockUpdate+0x158>)
 80209f6:	5cd3      	ldrb	r3, [r2, r3]
 80209f8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80209fa:	4b08      	ldr	r3, [pc, #32]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 80209fc:	681a      	ldr	r2, [r3, #0]
 80209fe:	683b      	ldr	r3, [r7, #0]
 8020a00:	fa22 f303 	lsr.w	r3, r2, r3
 8020a04:	4a05      	ldr	r2, [pc, #20]	; (8020a1c <SystemCoreClockUpdate+0x14c>)
 8020a06:	6013      	str	r3, [r2, #0]
}
 8020a08:	bf00      	nop
 8020a0a:	371c      	adds	r7, #28
 8020a0c:	46bd      	mov	sp, r7
 8020a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a12:	4770      	bx	lr
 8020a14:	40021000 	.word	0x40021000
 8020a18:	080239b8 	.word	0x080239b8
 8020a1c:	20000000 	.word	0x20000000
 8020a20:	00f42400 	.word	0x00f42400
 8020a24:	007a1200 	.word	0x007a1200
 8020a28:	080239a0 	.word	0x080239a0

08020a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8020a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8020a30:	f7ff ff3c 	bl	80208ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020a34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020a36:	e003      	b.n	8020a40 <LoopCopyDataInit>

08020a38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020a38:	4b0b      	ldr	r3, [pc, #44]	; (8020a68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8020a3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020a3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020a3e:	3104      	adds	r1, #4

08020a40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020a40:	480a      	ldr	r0, [pc, #40]	; (8020a6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8020a42:	4b0b      	ldr	r3, [pc, #44]	; (8020a70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020a44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020a46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020a48:	d3f6      	bcc.n	8020a38 <CopyDataInit>
	ldr	r2, =_sbss
 8020a4a:	4a0a      	ldr	r2, [pc, #40]	; (8020a74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8020a4c:	e002      	b.n	8020a54 <LoopFillZerobss>

08020a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020a4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020a50:	f842 3b04 	str.w	r3, [r2], #4

08020a54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020a54:	4b08      	ldr	r3, [pc, #32]	; (8020a78 <LoopForever+0x16>)
	cmp	r2, r3
 8020a56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020a58:	d3f9      	bcc.n	8020a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8020a5a:	f002 ff59 	bl	8023910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020a5e:	f7ff fd79 	bl	8020554 <main>

08020a62 <LoopForever>:

LoopForever:
    b LoopForever
 8020a62:	e7fe      	b.n	8020a62 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8020a64:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8020a68:	08023a30 	.word	0x08023a30
	ldr	r0, =_sdata
 8020a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020a70:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8020a74:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8020a78:	200000c0 	.word	0x200000c0

08020a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020a7c:	e7fe      	b.n	8020a7c <ADC1_2_IRQHandler>

08020a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020a7e:	b580      	push	{r7, lr}
 8020a80:	b082      	sub	sp, #8
 8020a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020a84:	2300      	movs	r3, #0
 8020a86:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8020a88:	2004      	movs	r0, #4
 8020a8a:	f000 f921 	bl	8020cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8020a8e:	f7ff ff1f 	bl	80208d0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020a92:	2000      	movs	r0, #0
 8020a94:	f000 f80e 	bl	8020ab4 <HAL_InitTick>
 8020a98:	4603      	mov	r3, r0
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d002      	beq.n	8020aa4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8020a9e:	2301      	movs	r3, #1
 8020aa0:	71fb      	strb	r3, [r7, #7]
 8020aa2:	e001      	b.n	8020aa8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020aa4:	f7ff fe54 	bl	8020750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8020aaa:	4618      	mov	r0, r3
 8020aac:	3708      	adds	r7, #8
 8020aae:	46bd      	mov	sp, r7
 8020ab0:	bd80      	pop	{r7, pc}
	...

08020ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020ab4:	b580      	push	{r7, lr}
 8020ab6:	b084      	sub	sp, #16
 8020ab8:	af00      	add	r7, sp, #0
 8020aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020abc:	2300      	movs	r3, #0
 8020abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020ac0:	4b17      	ldr	r3, [pc, #92]	; (8020b20 <HAL_InitTick+0x6c>)
 8020ac2:	781b      	ldrb	r3, [r3, #0]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d023      	beq.n	8020b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020ac8:	4b16      	ldr	r3, [pc, #88]	; (8020b24 <HAL_InitTick+0x70>)
 8020aca:	681a      	ldr	r2, [r3, #0]
 8020acc:	4b14      	ldr	r3, [pc, #80]	; (8020b20 <HAL_InitTick+0x6c>)
 8020ace:	781b      	ldrb	r3, [r3, #0]
 8020ad0:	4619      	mov	r1, r3
 8020ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ade:	4618      	mov	r0, r3
 8020ae0:	f000 f91b 	bl	8020d1a <HAL_SYSTICK_Config>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d10f      	bne.n	8020b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	2b07      	cmp	r3, #7
 8020aee:	d809      	bhi.n	8020b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020af0:	2200      	movs	r2, #0
 8020af2:	6879      	ldr	r1, [r7, #4]
 8020af4:	f04f 30ff 	mov.w	r0, #4294967295
 8020af8:	f000 f8f5 	bl	8020ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020afc:	4a0a      	ldr	r2, [pc, #40]	; (8020b28 <HAL_InitTick+0x74>)
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	6013      	str	r3, [r2, #0]
 8020b02:	e007      	b.n	8020b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020b04:	2301      	movs	r3, #1
 8020b06:	73fb      	strb	r3, [r7, #15]
 8020b08:	e004      	b.n	8020b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020b0a:	2301      	movs	r3, #1
 8020b0c:	73fb      	strb	r3, [r7, #15]
 8020b0e:	e001      	b.n	8020b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020b10:	2301      	movs	r3, #1
 8020b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8020b16:	4618      	mov	r0, r3
 8020b18:	3710      	adds	r7, #16
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	bd80      	pop	{r7, pc}
 8020b1e:	bf00      	nop
 8020b20:	20000008 	.word	0x20000008
 8020b24:	20000000 	.word	0x20000000
 8020b28:	20000004 	.word	0x20000004

08020b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020b2c:	b480      	push	{r7}
 8020b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020b30:	4b06      	ldr	r3, [pc, #24]	; (8020b4c <HAL_IncTick+0x20>)
 8020b32:	781b      	ldrb	r3, [r3, #0]
 8020b34:	461a      	mov	r2, r3
 8020b36:	4b06      	ldr	r3, [pc, #24]	; (8020b50 <HAL_IncTick+0x24>)
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	4413      	add	r3, r2
 8020b3c:	4a04      	ldr	r2, [pc, #16]	; (8020b50 <HAL_IncTick+0x24>)
 8020b3e:	6013      	str	r3, [r2, #0]
}
 8020b40:	bf00      	nop
 8020b42:	46bd      	mov	sp, r7
 8020b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b48:	4770      	bx	lr
 8020b4a:	bf00      	nop
 8020b4c:	20000008 	.word	0x20000008
 8020b50:	200000bc 	.word	0x200000bc

08020b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020b54:	b480      	push	{r7}
 8020b56:	af00      	add	r7, sp, #0
  return uwTick;
 8020b58:	4b03      	ldr	r3, [pc, #12]	; (8020b68 <HAL_GetTick+0x14>)
 8020b5a:	681b      	ldr	r3, [r3, #0]
}
 8020b5c:	4618      	mov	r0, r3
 8020b5e:	46bd      	mov	sp, r7
 8020b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b64:	4770      	bx	lr
 8020b66:	bf00      	nop
 8020b68:	200000bc 	.word	0x200000bc

08020b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020b6c:	b480      	push	{r7}
 8020b6e:	b085      	sub	sp, #20
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	f003 0307 	and.w	r3, r3, #7
 8020b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020b7c:	4b0c      	ldr	r3, [pc, #48]	; (8020bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8020b7e:	68db      	ldr	r3, [r3, #12]
 8020b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020b82:	68ba      	ldr	r2, [r7, #8]
 8020b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020b88:	4013      	ands	r3, r2
 8020b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020b90:	68bb      	ldr	r3, [r7, #8]
 8020b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020b9e:	4a04      	ldr	r2, [pc, #16]	; (8020bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8020ba0:	68bb      	ldr	r3, [r7, #8]
 8020ba2:	60d3      	str	r3, [r2, #12]
}
 8020ba4:	bf00      	nop
 8020ba6:	3714      	adds	r7, #20
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bae:	4770      	bx	lr
 8020bb0:	e000ed00 	.word	0xe000ed00

08020bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020bb4:	b480      	push	{r7}
 8020bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020bb8:	4b04      	ldr	r3, [pc, #16]	; (8020bcc <__NVIC_GetPriorityGrouping+0x18>)
 8020bba:	68db      	ldr	r3, [r3, #12]
 8020bbc:	0a1b      	lsrs	r3, r3, #8
 8020bbe:	f003 0307 	and.w	r3, r3, #7
}
 8020bc2:	4618      	mov	r0, r3
 8020bc4:	46bd      	mov	sp, r7
 8020bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bca:	4770      	bx	lr
 8020bcc:	e000ed00 	.word	0xe000ed00

08020bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020bd0:	b480      	push	{r7}
 8020bd2:	b083      	sub	sp, #12
 8020bd4:	af00      	add	r7, sp, #0
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	6039      	str	r1, [r7, #0]
 8020bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	db0a      	blt.n	8020bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020be4:	683b      	ldr	r3, [r7, #0]
 8020be6:	b2da      	uxtb	r2, r3
 8020be8:	490c      	ldr	r1, [pc, #48]	; (8020c1c <__NVIC_SetPriority+0x4c>)
 8020bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020bee:	0152      	lsls	r2, r2, #5
 8020bf0:	b2d2      	uxtb	r2, r2
 8020bf2:	440b      	add	r3, r1
 8020bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020bf8:	e00a      	b.n	8020c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020bfa:	683b      	ldr	r3, [r7, #0]
 8020bfc:	b2da      	uxtb	r2, r3
 8020bfe:	4908      	ldr	r1, [pc, #32]	; (8020c20 <__NVIC_SetPriority+0x50>)
 8020c00:	79fb      	ldrb	r3, [r7, #7]
 8020c02:	f003 030f 	and.w	r3, r3, #15
 8020c06:	3b04      	subs	r3, #4
 8020c08:	0152      	lsls	r2, r2, #5
 8020c0a:	b2d2      	uxtb	r2, r2
 8020c0c:	440b      	add	r3, r1
 8020c0e:	761a      	strb	r2, [r3, #24]
}
 8020c10:	bf00      	nop
 8020c12:	370c      	adds	r7, #12
 8020c14:	46bd      	mov	sp, r7
 8020c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c1a:	4770      	bx	lr
 8020c1c:	e000e100 	.word	0xe000e100
 8020c20:	e000ed00 	.word	0xe000ed00

08020c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020c24:	b480      	push	{r7}
 8020c26:	b089      	sub	sp, #36	; 0x24
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	60f8      	str	r0, [r7, #12]
 8020c2c:	60b9      	str	r1, [r7, #8]
 8020c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020c30:	68fb      	ldr	r3, [r7, #12]
 8020c32:	f003 0307 	and.w	r3, r3, #7
 8020c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020c38:	69fb      	ldr	r3, [r7, #28]
 8020c3a:	f1c3 0307 	rsb	r3, r3, #7
 8020c3e:	2b03      	cmp	r3, #3
 8020c40:	bf28      	it	cs
 8020c42:	2303      	movcs	r3, #3
 8020c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020c46:	69fb      	ldr	r3, [r7, #28]
 8020c48:	3303      	adds	r3, #3
 8020c4a:	2b06      	cmp	r3, #6
 8020c4c:	d902      	bls.n	8020c54 <NVIC_EncodePriority+0x30>
 8020c4e:	69fb      	ldr	r3, [r7, #28]
 8020c50:	3b04      	subs	r3, #4
 8020c52:	e000      	b.n	8020c56 <NVIC_EncodePriority+0x32>
 8020c54:	2300      	movs	r3, #0
 8020c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020c58:	f04f 32ff 	mov.w	r2, #4294967295
 8020c5c:	69bb      	ldr	r3, [r7, #24]
 8020c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8020c62:	43da      	mvns	r2, r3
 8020c64:	68bb      	ldr	r3, [r7, #8]
 8020c66:	401a      	ands	r2, r3
 8020c68:	697b      	ldr	r3, [r7, #20]
 8020c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8020c70:	697b      	ldr	r3, [r7, #20]
 8020c72:	fa01 f303 	lsl.w	r3, r1, r3
 8020c76:	43d9      	mvns	r1, r3
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020c7c:	4313      	orrs	r3, r2
         );
}
 8020c7e:	4618      	mov	r0, r3
 8020c80:	3724      	adds	r7, #36	; 0x24
 8020c82:	46bd      	mov	sp, r7
 8020c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c88:	4770      	bx	lr
	...

08020c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020c8c:	b580      	push	{r7, lr}
 8020c8e:	b082      	sub	sp, #8
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	3b01      	subs	r3, #1
 8020c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020c9c:	d301      	bcc.n	8020ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020c9e:	2301      	movs	r3, #1
 8020ca0:	e00f      	b.n	8020cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020ca2:	4a0a      	ldr	r2, [pc, #40]	; (8020ccc <SysTick_Config+0x40>)
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	3b01      	subs	r3, #1
 8020ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020caa:	2107      	movs	r1, #7
 8020cac:	f04f 30ff 	mov.w	r0, #4294967295
 8020cb0:	f7ff ff8e 	bl	8020bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020cb4:	4b05      	ldr	r3, [pc, #20]	; (8020ccc <SysTick_Config+0x40>)
 8020cb6:	2200      	movs	r2, #0
 8020cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020cba:	4b04      	ldr	r3, [pc, #16]	; (8020ccc <SysTick_Config+0x40>)
 8020cbc:	2207      	movs	r2, #7
 8020cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020cc0:	2300      	movs	r3, #0
}
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	3708      	adds	r7, #8
 8020cc6:	46bd      	mov	sp, r7
 8020cc8:	bd80      	pop	{r7, pc}
 8020cca:	bf00      	nop
 8020ccc:	e000e010 	.word	0xe000e010

08020cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020cd0:	b580      	push	{r7, lr}
 8020cd2:	b082      	sub	sp, #8
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020cd8:	6878      	ldr	r0, [r7, #4]
 8020cda:	f7ff ff47 	bl	8020b6c <__NVIC_SetPriorityGrouping>
}
 8020cde:	bf00      	nop
 8020ce0:	3708      	adds	r7, #8
 8020ce2:	46bd      	mov	sp, r7
 8020ce4:	bd80      	pop	{r7, pc}

08020ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020ce6:	b580      	push	{r7, lr}
 8020ce8:	b086      	sub	sp, #24
 8020cea:	af00      	add	r7, sp, #0
 8020cec:	4603      	mov	r3, r0
 8020cee:	60b9      	str	r1, [r7, #8]
 8020cf0:	607a      	str	r2, [r7, #4]
 8020cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020cf4:	f7ff ff5e 	bl	8020bb4 <__NVIC_GetPriorityGrouping>
 8020cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020cfa:	687a      	ldr	r2, [r7, #4]
 8020cfc:	68b9      	ldr	r1, [r7, #8]
 8020cfe:	6978      	ldr	r0, [r7, #20]
 8020d00:	f7ff ff90 	bl	8020c24 <NVIC_EncodePriority>
 8020d04:	4602      	mov	r2, r0
 8020d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020d0a:	4611      	mov	r1, r2
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	f7ff ff5f 	bl	8020bd0 <__NVIC_SetPriority>
}
 8020d12:	bf00      	nop
 8020d14:	3718      	adds	r7, #24
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd80      	pop	{r7, pc}

08020d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020d1a:	b580      	push	{r7, lr}
 8020d1c:	b082      	sub	sp, #8
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8020d22:	6878      	ldr	r0, [r7, #4]
 8020d24:	f7ff ffb2 	bl	8020c8c <SysTick_Config>
 8020d28:	4603      	mov	r3, r0
}
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	3708      	adds	r7, #8
 8020d2e:	46bd      	mov	sp, r7
 8020d30:	bd80      	pop	{r7, pc}
	...

08020d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020d34:	b480      	push	{r7}
 8020d36:	b087      	sub	sp, #28
 8020d38:	af00      	add	r7, sp, #0
 8020d3a:	6078      	str	r0, [r7, #4]
 8020d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8020d3e:	2300      	movs	r3, #0
 8020d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8020d42:	e158      	b.n	8020ff6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8020d44:	683b      	ldr	r3, [r7, #0]
 8020d46:	681a      	ldr	r2, [r3, #0]
 8020d48:	2101      	movs	r1, #1
 8020d4a:	697b      	ldr	r3, [r7, #20]
 8020d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8020d50:	4013      	ands	r3, r2
 8020d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8020d54:	68fb      	ldr	r3, [r7, #12]
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	f000 814a 	beq.w	8020ff0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8020d5c:	683b      	ldr	r3, [r7, #0]
 8020d5e:	685b      	ldr	r3, [r3, #4]
 8020d60:	f003 0303 	and.w	r3, r3, #3
 8020d64:	2b01      	cmp	r3, #1
 8020d66:	d005      	beq.n	8020d74 <HAL_GPIO_Init+0x40>
 8020d68:	683b      	ldr	r3, [r7, #0]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	f003 0303 	and.w	r3, r3, #3
 8020d70:	2b02      	cmp	r3, #2
 8020d72:	d130      	bne.n	8020dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	689b      	ldr	r3, [r3, #8]
 8020d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8020d7a:	697b      	ldr	r3, [r7, #20]
 8020d7c:	005b      	lsls	r3, r3, #1
 8020d7e:	2203      	movs	r2, #3
 8020d80:	fa02 f303 	lsl.w	r3, r2, r3
 8020d84:	43db      	mvns	r3, r3
 8020d86:	693a      	ldr	r2, [r7, #16]
 8020d88:	4013      	ands	r3, r2
 8020d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020d8c:	683b      	ldr	r3, [r7, #0]
 8020d8e:	68da      	ldr	r2, [r3, #12]
 8020d90:	697b      	ldr	r3, [r7, #20]
 8020d92:	005b      	lsls	r3, r3, #1
 8020d94:	fa02 f303 	lsl.w	r3, r2, r3
 8020d98:	693a      	ldr	r2, [r7, #16]
 8020d9a:	4313      	orrs	r3, r2
 8020d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	693a      	ldr	r2, [r7, #16]
 8020da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8020daa:	2201      	movs	r2, #1
 8020dac:	697b      	ldr	r3, [r7, #20]
 8020dae:	fa02 f303 	lsl.w	r3, r2, r3
 8020db2:	43db      	mvns	r3, r3
 8020db4:	693a      	ldr	r2, [r7, #16]
 8020db6:	4013      	ands	r3, r2
 8020db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	685b      	ldr	r3, [r3, #4]
 8020dbe:	091b      	lsrs	r3, r3, #4
 8020dc0:	f003 0201 	and.w	r2, r3, #1
 8020dc4:	697b      	ldr	r3, [r7, #20]
 8020dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8020dca:	693a      	ldr	r2, [r7, #16]
 8020dcc:	4313      	orrs	r3, r2
 8020dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	693a      	ldr	r2, [r7, #16]
 8020dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020dd6:	683b      	ldr	r3, [r7, #0]
 8020dd8:	685b      	ldr	r3, [r3, #4]
 8020dda:	f003 0303 	and.w	r3, r3, #3
 8020dde:	2b03      	cmp	r3, #3
 8020de0:	d017      	beq.n	8020e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	68db      	ldr	r3, [r3, #12]
 8020de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	005b      	lsls	r3, r3, #1
 8020dec:	2203      	movs	r2, #3
 8020dee:	fa02 f303 	lsl.w	r3, r2, r3
 8020df2:	43db      	mvns	r3, r3
 8020df4:	693a      	ldr	r2, [r7, #16]
 8020df6:	4013      	ands	r3, r2
 8020df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020dfa:	683b      	ldr	r3, [r7, #0]
 8020dfc:	689a      	ldr	r2, [r3, #8]
 8020dfe:	697b      	ldr	r3, [r7, #20]
 8020e00:	005b      	lsls	r3, r3, #1
 8020e02:	fa02 f303 	lsl.w	r3, r2, r3
 8020e06:	693a      	ldr	r2, [r7, #16]
 8020e08:	4313      	orrs	r3, r2
 8020e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	693a      	ldr	r2, [r7, #16]
 8020e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020e12:	683b      	ldr	r3, [r7, #0]
 8020e14:	685b      	ldr	r3, [r3, #4]
 8020e16:	f003 0303 	and.w	r3, r3, #3
 8020e1a:	2b02      	cmp	r3, #2
 8020e1c:	d123      	bne.n	8020e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020e1e:	697b      	ldr	r3, [r7, #20]
 8020e20:	08da      	lsrs	r2, r3, #3
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	3208      	adds	r2, #8
 8020e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8020e2c:	697b      	ldr	r3, [r7, #20]
 8020e2e:	f003 0307 	and.w	r3, r3, #7
 8020e32:	009b      	lsls	r3, r3, #2
 8020e34:	220f      	movs	r2, #15
 8020e36:	fa02 f303 	lsl.w	r3, r2, r3
 8020e3a:	43db      	mvns	r3, r3
 8020e3c:	693a      	ldr	r2, [r7, #16]
 8020e3e:	4013      	ands	r3, r2
 8020e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8020e42:	683b      	ldr	r3, [r7, #0]
 8020e44:	691a      	ldr	r2, [r3, #16]
 8020e46:	697b      	ldr	r3, [r7, #20]
 8020e48:	f003 0307 	and.w	r3, r3, #7
 8020e4c:	009b      	lsls	r3, r3, #2
 8020e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8020e52:	693a      	ldr	r2, [r7, #16]
 8020e54:	4313      	orrs	r3, r2
 8020e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8020e58:	697b      	ldr	r3, [r7, #20]
 8020e5a:	08da      	lsrs	r2, r3, #3
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	3208      	adds	r2, #8
 8020e60:	6939      	ldr	r1, [r7, #16]
 8020e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8020e6c:	697b      	ldr	r3, [r7, #20]
 8020e6e:	005b      	lsls	r3, r3, #1
 8020e70:	2203      	movs	r2, #3
 8020e72:	fa02 f303 	lsl.w	r3, r2, r3
 8020e76:	43db      	mvns	r3, r3
 8020e78:	693a      	ldr	r2, [r7, #16]
 8020e7a:	4013      	ands	r3, r2
 8020e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020e7e:	683b      	ldr	r3, [r7, #0]
 8020e80:	685b      	ldr	r3, [r3, #4]
 8020e82:	f003 0203 	and.w	r2, r3, #3
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	005b      	lsls	r3, r3, #1
 8020e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8020e8e:	693a      	ldr	r2, [r7, #16]
 8020e90:	4313      	orrs	r3, r2
 8020e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	693a      	ldr	r2, [r7, #16]
 8020e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8020e9a:	683b      	ldr	r3, [r7, #0]
 8020e9c:	685b      	ldr	r3, [r3, #4]
 8020e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	f000 80a4 	beq.w	8020ff0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8020ea8:	4a5a      	ldr	r2, [pc, #360]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020eaa:	697b      	ldr	r3, [r7, #20]
 8020eac:	089b      	lsrs	r3, r3, #2
 8020eae:	3318      	adds	r3, #24
 8020eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020eb4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8020eb6:	697b      	ldr	r3, [r7, #20]
 8020eb8:	f003 0303 	and.w	r3, r3, #3
 8020ebc:	00db      	lsls	r3, r3, #3
 8020ebe:	220f      	movs	r2, #15
 8020ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8020ec4:	43db      	mvns	r3, r3
 8020ec6:	693a      	ldr	r2, [r7, #16]
 8020ec8:	4013      	ands	r3, r2
 8020eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	4a52      	ldr	r2, [pc, #328]	; (8021018 <HAL_GPIO_Init+0x2e4>)
 8020ed0:	4293      	cmp	r3, r2
 8020ed2:	d025      	beq.n	8020f20 <HAL_GPIO_Init+0x1ec>
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	4a51      	ldr	r2, [pc, #324]	; (802101c <HAL_GPIO_Init+0x2e8>)
 8020ed8:	4293      	cmp	r3, r2
 8020eda:	d01f      	beq.n	8020f1c <HAL_GPIO_Init+0x1e8>
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	4a50      	ldr	r2, [pc, #320]	; (8021020 <HAL_GPIO_Init+0x2ec>)
 8020ee0:	4293      	cmp	r3, r2
 8020ee2:	d019      	beq.n	8020f18 <HAL_GPIO_Init+0x1e4>
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	4a4f      	ldr	r2, [pc, #316]	; (8021024 <HAL_GPIO_Init+0x2f0>)
 8020ee8:	4293      	cmp	r3, r2
 8020eea:	d013      	beq.n	8020f14 <HAL_GPIO_Init+0x1e0>
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	4a4e      	ldr	r2, [pc, #312]	; (8021028 <HAL_GPIO_Init+0x2f4>)
 8020ef0:	4293      	cmp	r3, r2
 8020ef2:	d00d      	beq.n	8020f10 <HAL_GPIO_Init+0x1dc>
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	4a4d      	ldr	r2, [pc, #308]	; (802102c <HAL_GPIO_Init+0x2f8>)
 8020ef8:	4293      	cmp	r3, r2
 8020efa:	d007      	beq.n	8020f0c <HAL_GPIO_Init+0x1d8>
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	4a4c      	ldr	r2, [pc, #304]	; (8021030 <HAL_GPIO_Init+0x2fc>)
 8020f00:	4293      	cmp	r3, r2
 8020f02:	d101      	bne.n	8020f08 <HAL_GPIO_Init+0x1d4>
 8020f04:	2306      	movs	r3, #6
 8020f06:	e00c      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f08:	2307      	movs	r3, #7
 8020f0a:	e00a      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f0c:	2305      	movs	r3, #5
 8020f0e:	e008      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f10:	2304      	movs	r3, #4
 8020f12:	e006      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f14:	2303      	movs	r3, #3
 8020f16:	e004      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f18:	2302      	movs	r3, #2
 8020f1a:	e002      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f1c:	2301      	movs	r3, #1
 8020f1e:	e000      	b.n	8020f22 <HAL_GPIO_Init+0x1ee>
 8020f20:	2300      	movs	r3, #0
 8020f22:	697a      	ldr	r2, [r7, #20]
 8020f24:	f002 0203 	and.w	r2, r2, #3
 8020f28:	00d2      	lsls	r2, r2, #3
 8020f2a:	4093      	lsls	r3, r2
 8020f2c:	693a      	ldr	r2, [r7, #16]
 8020f2e:	4313      	orrs	r3, r2
 8020f30:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8020f32:	4938      	ldr	r1, [pc, #224]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f34:	697b      	ldr	r3, [r7, #20]
 8020f36:	089b      	lsrs	r3, r3, #2
 8020f38:	3318      	adds	r3, #24
 8020f3a:	693a      	ldr	r2, [r7, #16]
 8020f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8020f40:	4b34      	ldr	r3, [pc, #208]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	43db      	mvns	r3, r3
 8020f4a:	693a      	ldr	r2, [r7, #16]
 8020f4c:	4013      	ands	r3, r2
 8020f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8020f50:	683b      	ldr	r3, [r7, #0]
 8020f52:	685b      	ldr	r3, [r3, #4]
 8020f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d003      	beq.n	8020f64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8020f5c:	693a      	ldr	r2, [r7, #16]
 8020f5e:	68fb      	ldr	r3, [r7, #12]
 8020f60:	4313      	orrs	r3, r2
 8020f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8020f64:	4a2b      	ldr	r2, [pc, #172]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f66:	693b      	ldr	r3, [r7, #16]
 8020f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8020f6a:	4b2a      	ldr	r3, [pc, #168]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f6c:	685b      	ldr	r3, [r3, #4]
 8020f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	43db      	mvns	r3, r3
 8020f74:	693a      	ldr	r2, [r7, #16]
 8020f76:	4013      	ands	r3, r2
 8020f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8020f7a:	683b      	ldr	r3, [r7, #0]
 8020f7c:	685b      	ldr	r3, [r3, #4]
 8020f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d003      	beq.n	8020f8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8020f86:	693a      	ldr	r2, [r7, #16]
 8020f88:	68fb      	ldr	r3, [r7, #12]
 8020f8a:	4313      	orrs	r3, r2
 8020f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8020f8e:	4a21      	ldr	r2, [pc, #132]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f90:	693b      	ldr	r3, [r7, #16]
 8020f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8020f94:	4b1f      	ldr	r3, [pc, #124]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	43db      	mvns	r3, r3
 8020fa0:	693a      	ldr	r2, [r7, #16]
 8020fa2:	4013      	ands	r3, r2
 8020fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8020fa6:	683b      	ldr	r3, [r7, #0]
 8020fa8:	685b      	ldr	r3, [r3, #4]
 8020faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d003      	beq.n	8020fba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8020fb2:	693a      	ldr	r2, [r7, #16]
 8020fb4:	68fb      	ldr	r3, [r7, #12]
 8020fb6:	4313      	orrs	r3, r2
 8020fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8020fba:	4a16      	ldr	r2, [pc, #88]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020fbc:	693b      	ldr	r3, [r7, #16]
 8020fbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8020fc2:	4b14      	ldr	r3, [pc, #80]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020fca:	68fb      	ldr	r3, [r7, #12]
 8020fcc:	43db      	mvns	r3, r3
 8020fce:	693a      	ldr	r2, [r7, #16]
 8020fd0:	4013      	ands	r3, r2
 8020fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8020fd4:	683b      	ldr	r3, [r7, #0]
 8020fd6:	685b      	ldr	r3, [r3, #4]
 8020fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d003      	beq.n	8020fe8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8020fe0:	693a      	ldr	r2, [r7, #16]
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	4313      	orrs	r3, r2
 8020fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8020fe8:	4a0a      	ldr	r2, [pc, #40]	; (8021014 <HAL_GPIO_Init+0x2e0>)
 8020fea:	693b      	ldr	r3, [r7, #16]
 8020fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8020ff0:	697b      	ldr	r3, [r7, #20]
 8020ff2:	3301      	adds	r3, #1
 8020ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8020ff6:	683b      	ldr	r3, [r7, #0]
 8020ff8:	681a      	ldr	r2, [r3, #0]
 8020ffa:	697b      	ldr	r3, [r7, #20]
 8020ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8021000:	2b00      	cmp	r3, #0
 8021002:	f47f ae9f 	bne.w	8020d44 <HAL_GPIO_Init+0x10>
  }
}
 8021006:	bf00      	nop
 8021008:	bf00      	nop
 802100a:	371c      	adds	r7, #28
 802100c:	46bd      	mov	sp, r7
 802100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021012:	4770      	bx	lr
 8021014:	4002f400 	.word	0x4002f400
 8021018:	42020000 	.word	0x42020000
 802101c:	42020400 	.word	0x42020400
 8021020:	42020800 	.word	0x42020800
 8021024:	42020c00 	.word	0x42020c00
 8021028:	42021000 	.word	0x42021000
 802102c:	42021400 	.word	0x42021400
 8021030:	42021800 	.word	0x42021800

08021034 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8021034:	b480      	push	{r7}
 8021036:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8021038:	4b04      	ldr	r3, [pc, #16]	; (802104c <HAL_PWREx_GetVoltageRange+0x18>)
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8021040:	4618      	mov	r0, r3
 8021042:	46bd      	mov	sp, r7
 8021044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021048:	4770      	bx	lr
 802104a:	bf00      	nop
 802104c:	40007000 	.word	0x40007000

08021050 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b084      	sub	sp, #16
 8021054:	af00      	add	r7, sp, #0
 8021056:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8021058:	4b27      	ldr	r3, [pc, #156]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 802105a:	681b      	ldr	r3, [r3, #0]
 802105c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8021060:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8021062:	f000 f861 	bl	8021128 <HAL_PWREx_SMPS_GetEffectiveMode>
 8021066:	4603      	mov	r3, r0
 8021068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802106c:	d101      	bne.n	8021072 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 802106e:	2301      	movs	r3, #1
 8021070:	e03e      	b.n	80210f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8021072:	4b21      	ldr	r3, [pc, #132]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8021074:	68db      	ldr	r3, [r3, #12]
 8021076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802107a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802107e:	d101      	bne.n	8021084 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8021080:	2301      	movs	r3, #1
 8021082:	e035      	b.n	80210f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8021084:	68ba      	ldr	r2, [r7, #8]
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	429a      	cmp	r2, r3
 802108a:	d101      	bne.n	8021090 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 802108c:	2300      	movs	r3, #0
 802108e:	e02f      	b.n	80210f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8021090:	4b19      	ldr	r3, [pc, #100]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8021098:	4917      	ldr	r1, [pc, #92]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	4313      	orrs	r3, r2
 802109e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80210a0:	4b16      	ldr	r3, [pc, #88]	; (80210fc <HAL_PWREx_ControlVoltageScaling+0xac>)
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	095b      	lsrs	r3, r3, #5
 80210a6:	4a16      	ldr	r2, [pc, #88]	; (8021100 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80210a8:	fba2 2303 	umull	r2, r3, r2, r3
 80210ac:	09db      	lsrs	r3, r3, #7
 80210ae:	2232      	movs	r2, #50	; 0x32
 80210b0:	fb02 f303 	mul.w	r3, r2, r3
 80210b4:	4a13      	ldr	r2, [pc, #76]	; (8021104 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80210b6:	fba2 2303 	umull	r2, r3, r2, r3
 80210ba:	08db      	lsrs	r3, r3, #3
 80210bc:	3301      	adds	r3, #1
 80210be:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80210c0:	e002      	b.n	80210c8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	3b01      	subs	r3, #1
 80210c6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80210c8:	4b0b      	ldr	r3, [pc, #44]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80210ca:	695b      	ldr	r3, [r3, #20]
 80210cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80210d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80210d4:	d102      	bne.n	80210dc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d1f2      	bne.n	80210c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80210dc:	4b06      	ldr	r3, [pc, #24]	; (80210f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80210de:	695b      	ldr	r3, [r3, #20]
 80210e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80210e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80210e8:	d101      	bne.n	80210ee <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80210ea:	2303      	movs	r3, #3
 80210ec:	e000      	b.n	80210f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80210ee:	2300      	movs	r3, #0
}
 80210f0:	4618      	mov	r0, r3
 80210f2:	3710      	adds	r7, #16
 80210f4:	46bd      	mov	sp, r7
 80210f6:	bd80      	pop	{r7, pc}
 80210f8:	40007000 	.word	0x40007000
 80210fc:	20000000 	.word	0x20000000
 8021100:	0a7c5ac5 	.word	0x0a7c5ac5
 8021104:	cccccccd 	.word	0xcccccccd

08021108 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8021108:	b480      	push	{r7}
 802110a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 802110c:	4b05      	ldr	r3, [pc, #20]	; (8021124 <HAL_PWREx_EnableVddIO2+0x1c>)
 802110e:	685b      	ldr	r3, [r3, #4]
 8021110:	4a04      	ldr	r2, [pc, #16]	; (8021124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8021112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021116:	6053      	str	r3, [r2, #4]
}
 8021118:	bf00      	nop
 802111a:	46bd      	mov	sp, r7
 802111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021120:	4770      	bx	lr
 8021122:	bf00      	nop
 8021124:	40007000 	.word	0x40007000

08021128 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8021128:	b480      	push	{r7}
 802112a:	b083      	sub	sp, #12
 802112c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 802112e:	4b0f      	ldr	r3, [pc, #60]	; (802116c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8021130:	691b      	ldr	r3, [r3, #16]
 8021132:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8021134:	683b      	ldr	r3, [r7, #0]
 8021136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802113a:	2b00      	cmp	r3, #0
 802113c:	d003      	beq.n	8021146 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 802113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021142:	607b      	str	r3, [r7, #4]
 8021144:	e00a      	b.n	802115c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8021146:	683b      	ldr	r3, [r7, #0]
 8021148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802114c:	2b00      	cmp	r3, #0
 802114e:	d103      	bne.n	8021158 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8021150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021154:	607b      	str	r3, [r7, #4]
 8021156:	e001      	b.n	802115c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8021158:	2300      	movs	r3, #0
 802115a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 802115c:	687b      	ldr	r3, [r7, #4]
}
 802115e:	4618      	mov	r0, r3
 8021160:	370c      	adds	r7, #12
 8021162:	46bd      	mov	sp, r7
 8021164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021168:	4770      	bx	lr
 802116a:	bf00      	nop
 802116c:	40007000 	.word	0x40007000

08021170 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021170:	b580      	push	{r7, lr}
 8021172:	b088      	sub	sp, #32
 8021174:	af00      	add	r7, sp, #0
 8021176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d102      	bne.n	8021184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802117e:	2301      	movs	r3, #1
 8021180:	f000 bcc2 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021184:	4b99      	ldr	r3, [pc, #612]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021186:	689b      	ldr	r3, [r3, #8]
 8021188:	f003 030c 	and.w	r3, r3, #12
 802118c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802118e:	4b97      	ldr	r3, [pc, #604]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021190:	68db      	ldr	r3, [r3, #12]
 8021192:	f003 0303 	and.w	r3, r3, #3
 8021196:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	f003 0310 	and.w	r3, r3, #16
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	f000 80e9 	beq.w	8021378 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80211a6:	69bb      	ldr	r3, [r7, #24]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d006      	beq.n	80211ba <HAL_RCC_OscConfig+0x4a>
 80211ac:	69bb      	ldr	r3, [r7, #24]
 80211ae:	2b0c      	cmp	r3, #12
 80211b0:	f040 8083 	bne.w	80212ba <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80211b4:	697b      	ldr	r3, [r7, #20]
 80211b6:	2b01      	cmp	r3, #1
 80211b8:	d17f      	bne.n	80212ba <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80211ba:	4b8c      	ldr	r3, [pc, #560]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80211bc:	681b      	ldr	r3, [r3, #0]
 80211be:	f003 0302 	and.w	r3, r3, #2
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d006      	beq.n	80211d4 <HAL_RCC_OscConfig+0x64>
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	69db      	ldr	r3, [r3, #28]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d102      	bne.n	80211d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80211ce:	2301      	movs	r3, #1
 80211d0:	f000 bc9a 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80211d8:	4b84      	ldr	r3, [pc, #528]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	f003 0308 	and.w	r3, r3, #8
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d004      	beq.n	80211ee <HAL_RCC_OscConfig+0x7e>
 80211e4:	4b81      	ldr	r3, [pc, #516]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80211e6:	681b      	ldr	r3, [r3, #0]
 80211e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80211ec:	e005      	b.n	80211fa <HAL_RCC_OscConfig+0x8a>
 80211ee:	4b7f      	ldr	r3, [pc, #508]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80211f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80211f4:	091b      	lsrs	r3, r3, #4
 80211f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80211fa:	4293      	cmp	r3, r2
 80211fc:	d224      	bcs.n	8021248 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021202:	4618      	mov	r0, r3
 8021204:	f000 fe9c 	bl	8021f40 <RCC_SetFlashLatencyFromMSIRange>
 8021208:	4603      	mov	r3, r0
 802120a:	2b00      	cmp	r3, #0
 802120c:	d002      	beq.n	8021214 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 802120e:	2301      	movs	r3, #1
 8021210:	f000 bc7a 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021214:	4b75      	ldr	r3, [pc, #468]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	4a74      	ldr	r2, [pc, #464]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802121a:	f043 0308 	orr.w	r3, r3, #8
 802121e:	6013      	str	r3, [r2, #0]
 8021220:	4b72      	ldr	r3, [pc, #456]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802122c:	496f      	ldr	r1, [pc, #444]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802122e:	4313      	orrs	r3, r2
 8021230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021232:	4b6e      	ldr	r3, [pc, #440]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021234:	685b      	ldr	r3, [r3, #4]
 8021236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	6a1b      	ldr	r3, [r3, #32]
 802123e:	021b      	lsls	r3, r3, #8
 8021240:	496a      	ldr	r1, [pc, #424]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021242:	4313      	orrs	r3, r2
 8021244:	604b      	str	r3, [r1, #4]
 8021246:	e026      	b.n	8021296 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021248:	4b68      	ldr	r3, [pc, #416]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	4a67      	ldr	r2, [pc, #412]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802124e:	f043 0308 	orr.w	r3, r3, #8
 8021252:	6013      	str	r3, [r2, #0]
 8021254:	4b65      	ldr	r3, [pc, #404]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021260:	4962      	ldr	r1, [pc, #392]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021262:	4313      	orrs	r3, r2
 8021264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021266:	4b61      	ldr	r3, [pc, #388]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021268:	685b      	ldr	r3, [r3, #4]
 802126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	6a1b      	ldr	r3, [r3, #32]
 8021272:	021b      	lsls	r3, r3, #8
 8021274:	495d      	ldr	r1, [pc, #372]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021276:	4313      	orrs	r3, r2
 8021278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 802127a:	69bb      	ldr	r3, [r7, #24]
 802127c:	2b00      	cmp	r3, #0
 802127e:	d10a      	bne.n	8021296 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021284:	4618      	mov	r0, r3
 8021286:	f000 fe5b 	bl	8021f40 <RCC_SetFlashLatencyFromMSIRange>
 802128a:	4603      	mov	r3, r0
 802128c:	2b00      	cmp	r3, #0
 802128e:	d002      	beq.n	8021296 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8021290:	2301      	movs	r3, #1
 8021292:	f000 bc39 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8021296:	f000 fe17 	bl	8021ec8 <HAL_RCC_GetHCLKFreq>
 802129a:	4603      	mov	r3, r0
 802129c:	4a54      	ldr	r2, [pc, #336]	; (80213f0 <HAL_RCC_OscConfig+0x280>)
 802129e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80212a0:	4b54      	ldr	r3, [pc, #336]	; (80213f4 <HAL_RCC_OscConfig+0x284>)
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4618      	mov	r0, r3
 80212a6:	f7ff fc05 	bl	8020ab4 <HAL_InitTick>
 80212aa:	4603      	mov	r3, r0
 80212ac:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80212ae:	7bfb      	ldrb	r3, [r7, #15]
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	d060      	beq.n	8021376 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80212b4:	7bfb      	ldrb	r3, [r7, #15]
 80212b6:	f000 bc27 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	69db      	ldr	r3, [r3, #28]
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d039      	beq.n	8021336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80212c2:	4b4a      	ldr	r3, [pc, #296]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	4a49      	ldr	r2, [pc, #292]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80212c8:	f043 0301 	orr.w	r3, r3, #1
 80212cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80212ce:	f7ff fc41 	bl	8020b54 <HAL_GetTick>
 80212d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80212d4:	e00f      	b.n	80212f6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80212d6:	f7ff fc3d 	bl	8020b54 <HAL_GetTick>
 80212da:	4602      	mov	r2, r0
 80212dc:	693b      	ldr	r3, [r7, #16]
 80212de:	1ad3      	subs	r3, r2, r3
 80212e0:	2b02      	cmp	r3, #2
 80212e2:	d908      	bls.n	80212f6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80212e4:	4b41      	ldr	r3, [pc, #260]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	f003 0302 	and.w	r3, r3, #2
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d102      	bne.n	80212f6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80212f0:	2303      	movs	r3, #3
 80212f2:	f000 bc09 	b.w	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80212f6:	4b3d      	ldr	r3, [pc, #244]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	f003 0302 	and.w	r3, r3, #2
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d0e9      	beq.n	80212d6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021302:	4b3a      	ldr	r3, [pc, #232]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	4a39      	ldr	r2, [pc, #228]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021308:	f043 0308 	orr.w	r3, r3, #8
 802130c:	6013      	str	r3, [r2, #0]
 802130e:	4b37      	ldr	r3, [pc, #220]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802131a:	4934      	ldr	r1, [pc, #208]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802131c:	4313      	orrs	r3, r2
 802131e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021320:	4b32      	ldr	r3, [pc, #200]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021322:	685b      	ldr	r3, [r3, #4]
 8021324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	6a1b      	ldr	r3, [r3, #32]
 802132c:	021b      	lsls	r3, r3, #8
 802132e:	492f      	ldr	r1, [pc, #188]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021330:	4313      	orrs	r3, r2
 8021332:	604b      	str	r3, [r1, #4]
 8021334:	e020      	b.n	8021378 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021336:	4b2d      	ldr	r3, [pc, #180]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	4a2c      	ldr	r2, [pc, #176]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802133c:	f023 0301 	bic.w	r3, r3, #1
 8021340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021342:	f7ff fc07 	bl	8020b54 <HAL_GetTick>
 8021346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021348:	e00e      	b.n	8021368 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 802134a:	f7ff fc03 	bl	8020b54 <HAL_GetTick>
 802134e:	4602      	mov	r2, r0
 8021350:	693b      	ldr	r3, [r7, #16]
 8021352:	1ad3      	subs	r3, r2, r3
 8021354:	2b02      	cmp	r3, #2
 8021356:	d907      	bls.n	8021368 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021358:	4b24      	ldr	r3, [pc, #144]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802135a:	681b      	ldr	r3, [r3, #0]
 802135c:	f003 0302 	and.w	r3, r3, #2
 8021360:	2b00      	cmp	r3, #0
 8021362:	d001      	beq.n	8021368 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8021364:	2303      	movs	r3, #3
 8021366:	e3cf      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021368:	4b20      	ldr	r3, [pc, #128]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	f003 0302 	and.w	r3, r3, #2
 8021370:	2b00      	cmp	r3, #0
 8021372:	d1ea      	bne.n	802134a <HAL_RCC_OscConfig+0x1da>
 8021374:	e000      	b.n	8021378 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	f003 0301 	and.w	r3, r3, #1
 8021380:	2b00      	cmp	r3, #0
 8021382:	d07e      	beq.n	8021482 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8021384:	69bb      	ldr	r3, [r7, #24]
 8021386:	2b08      	cmp	r3, #8
 8021388:	d005      	beq.n	8021396 <HAL_RCC_OscConfig+0x226>
 802138a:	69bb      	ldr	r3, [r7, #24]
 802138c:	2b0c      	cmp	r3, #12
 802138e:	d10e      	bne.n	80213ae <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021390:	697b      	ldr	r3, [r7, #20]
 8021392:	2b03      	cmp	r3, #3
 8021394:	d10b      	bne.n	80213ae <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021396:	4b15      	ldr	r3, [pc, #84]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d06e      	beq.n	8021480 <HAL_RCC_OscConfig+0x310>
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	685b      	ldr	r3, [r3, #4]
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d16a      	bne.n	8021480 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80213aa:	2301      	movs	r3, #1
 80213ac:	e3ac      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	685b      	ldr	r3, [r3, #4]
 80213b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80213b6:	d106      	bne.n	80213c6 <HAL_RCC_OscConfig+0x256>
 80213b8:	4b0c      	ldr	r3, [pc, #48]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	4a0b      	ldr	r2, [pc, #44]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80213c2:	6013      	str	r3, [r2, #0]
 80213c4:	e024      	b.n	8021410 <HAL_RCC_OscConfig+0x2a0>
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	685b      	ldr	r3, [r3, #4]
 80213ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80213ce:	d113      	bne.n	80213f8 <HAL_RCC_OscConfig+0x288>
 80213d0:	4b06      	ldr	r3, [pc, #24]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	4a05      	ldr	r2, [pc, #20]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80213da:	6013      	str	r3, [r2, #0]
 80213dc:	4b03      	ldr	r3, [pc, #12]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	4a02      	ldr	r2, [pc, #8]	; (80213ec <HAL_RCC_OscConfig+0x27c>)
 80213e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80213e6:	6013      	str	r3, [r2, #0]
 80213e8:	e012      	b.n	8021410 <HAL_RCC_OscConfig+0x2a0>
 80213ea:	bf00      	nop
 80213ec:	40021000 	.word	0x40021000
 80213f0:	20000000 	.word	0x20000000
 80213f4:	20000004 	.word	0x20000004
 80213f8:	4b8b      	ldr	r3, [pc, #556]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	4a8a      	ldr	r2, [pc, #552]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80213fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021402:	6013      	str	r3, [r2, #0]
 8021404:	4b88      	ldr	r3, [pc, #544]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	4a87      	ldr	r2, [pc, #540]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	685b      	ldr	r3, [r3, #4]
 8021414:	2b00      	cmp	r3, #0
 8021416:	d019      	beq.n	802144c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021418:	f7ff fb9c 	bl	8020b54 <HAL_GetTick>
 802141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802141e:	e00e      	b.n	802143e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021420:	f7ff fb98 	bl	8020b54 <HAL_GetTick>
 8021424:	4602      	mov	r2, r0
 8021426:	693b      	ldr	r3, [r7, #16]
 8021428:	1ad3      	subs	r3, r2, r3
 802142a:	2b64      	cmp	r3, #100	; 0x64
 802142c:	d907      	bls.n	802143e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802142e:	4b7e      	ldr	r3, [pc, #504]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021436:	2b00      	cmp	r3, #0
 8021438:	d101      	bne.n	802143e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 802143a:	2303      	movs	r3, #3
 802143c:	e364      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802143e:	4b7a      	ldr	r3, [pc, #488]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021446:	2b00      	cmp	r3, #0
 8021448:	d0ea      	beq.n	8021420 <HAL_RCC_OscConfig+0x2b0>
 802144a:	e01a      	b.n	8021482 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802144c:	f7ff fb82 	bl	8020b54 <HAL_GetTick>
 8021450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021452:	e00e      	b.n	8021472 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021454:	f7ff fb7e 	bl	8020b54 <HAL_GetTick>
 8021458:	4602      	mov	r2, r0
 802145a:	693b      	ldr	r3, [r7, #16]
 802145c:	1ad3      	subs	r3, r2, r3
 802145e:	2b64      	cmp	r3, #100	; 0x64
 8021460:	d907      	bls.n	8021472 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021462:	4b71      	ldr	r3, [pc, #452]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802146a:	2b00      	cmp	r3, #0
 802146c:	d001      	beq.n	8021472 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 802146e:	2303      	movs	r3, #3
 8021470:	e34a      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021472:	4b6d      	ldr	r3, [pc, #436]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802147a:	2b00      	cmp	r3, #0
 802147c:	d1ea      	bne.n	8021454 <HAL_RCC_OscConfig+0x2e4>
 802147e:	e000      	b.n	8021482 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	f003 0302 	and.w	r3, r3, #2
 802148a:	2b00      	cmp	r3, #0
 802148c:	d06c      	beq.n	8021568 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 802148e:	69bb      	ldr	r3, [r7, #24]
 8021490:	2b04      	cmp	r3, #4
 8021492:	d005      	beq.n	80214a0 <HAL_RCC_OscConfig+0x330>
 8021494:	69bb      	ldr	r3, [r7, #24]
 8021496:	2b0c      	cmp	r3, #12
 8021498:	d119      	bne.n	80214ce <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 802149a:	697b      	ldr	r3, [r7, #20]
 802149c:	2b02      	cmp	r3, #2
 802149e:	d116      	bne.n	80214ce <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80214a0:	4b61      	ldr	r3, [pc, #388]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d005      	beq.n	80214b8 <HAL_RCC_OscConfig+0x348>
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	68db      	ldr	r3, [r3, #12]
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d101      	bne.n	80214b8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80214b4:	2301      	movs	r3, #1
 80214b6:	e327      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80214b8:	4b5b      	ldr	r3, [pc, #364]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214ba:	685b      	ldr	r3, [r3, #4]
 80214bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	691b      	ldr	r3, [r3, #16]
 80214c4:	061b      	lsls	r3, r3, #24
 80214c6:	4958      	ldr	r1, [pc, #352]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214c8:	4313      	orrs	r3, r2
 80214ca:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80214cc:	e04c      	b.n	8021568 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	68db      	ldr	r3, [r3, #12]
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d029      	beq.n	802152a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80214d6:	4b54      	ldr	r3, [pc, #336]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	4a53      	ldr	r2, [pc, #332]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80214e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80214e2:	f7ff fb37 	bl	8020b54 <HAL_GetTick>
 80214e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80214e8:	e00e      	b.n	8021508 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80214ea:	f7ff fb33 	bl	8020b54 <HAL_GetTick>
 80214ee:	4602      	mov	r2, r0
 80214f0:	693b      	ldr	r3, [r7, #16]
 80214f2:	1ad3      	subs	r3, r2, r3
 80214f4:	2b02      	cmp	r3, #2
 80214f6:	d907      	bls.n	8021508 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80214f8:	4b4b      	ldr	r3, [pc, #300]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021500:	2b00      	cmp	r3, #0
 8021502:	d101      	bne.n	8021508 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8021504:	2303      	movs	r3, #3
 8021506:	e2ff      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021508:	4b47      	ldr	r3, [pc, #284]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021510:	2b00      	cmp	r3, #0
 8021512:	d0ea      	beq.n	80214ea <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021514:	4b44      	ldr	r3, [pc, #272]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021516:	685b      	ldr	r3, [r3, #4]
 8021518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	691b      	ldr	r3, [r3, #16]
 8021520:	061b      	lsls	r3, r3, #24
 8021522:	4941      	ldr	r1, [pc, #260]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021524:	4313      	orrs	r3, r2
 8021526:	604b      	str	r3, [r1, #4]
 8021528:	e01e      	b.n	8021568 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802152a:	4b3f      	ldr	r3, [pc, #252]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802152c:	681b      	ldr	r3, [r3, #0]
 802152e:	4a3e      	ldr	r2, [pc, #248]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021536:	f7ff fb0d 	bl	8020b54 <HAL_GetTick>
 802153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802153c:	e00e      	b.n	802155c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802153e:	f7ff fb09 	bl	8020b54 <HAL_GetTick>
 8021542:	4602      	mov	r2, r0
 8021544:	693b      	ldr	r3, [r7, #16]
 8021546:	1ad3      	subs	r3, r2, r3
 8021548:	2b02      	cmp	r3, #2
 802154a:	d907      	bls.n	802155c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802154c:	4b36      	ldr	r3, [pc, #216]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802154e:	681b      	ldr	r3, [r3, #0]
 8021550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021554:	2b00      	cmp	r3, #0
 8021556:	d001      	beq.n	802155c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8021558:	2303      	movs	r3, #3
 802155a:	e2d5      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802155c:	4b32      	ldr	r3, [pc, #200]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021564:	2b00      	cmp	r3, #0
 8021566:	d1ea      	bne.n	802153e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	f003 0308 	and.w	r3, r3, #8
 8021570:	2b00      	cmp	r3, #0
 8021572:	d062      	beq.n	802163a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	695b      	ldr	r3, [r3, #20]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d038      	beq.n	80215ee <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	699b      	ldr	r3, [r3, #24]
 8021580:	2b00      	cmp	r3, #0
 8021582:	d108      	bne.n	8021596 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8021584:	4b28      	ldr	r3, [pc, #160]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802158a:	4a27      	ldr	r2, [pc, #156]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802158c:	f023 0310 	bic.w	r3, r3, #16
 8021590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8021594:	e007      	b.n	80215a6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8021596:	4b24      	ldr	r3, [pc, #144]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802159c:	4a22      	ldr	r2, [pc, #136]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 802159e:	f043 0310 	orr.w	r3, r3, #16
 80215a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80215a6:	4b20      	ldr	r3, [pc, #128]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80215ac:	4a1e      	ldr	r2, [pc, #120]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215ae:	f043 0301 	orr.w	r3, r3, #1
 80215b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80215b6:	f7ff facd 	bl	8020b54 <HAL_GetTick>
 80215ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80215bc:	e00f      	b.n	80215de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80215be:	f7ff fac9 	bl	8020b54 <HAL_GetTick>
 80215c2:	4602      	mov	r2, r0
 80215c4:	693b      	ldr	r3, [r7, #16]
 80215c6:	1ad3      	subs	r3, r2, r3
 80215c8:	2b07      	cmp	r3, #7
 80215ca:	d908      	bls.n	80215de <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80215cc:	4b16      	ldr	r3, [pc, #88]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80215d2:	f003 0302 	and.w	r3, r3, #2
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d101      	bne.n	80215de <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80215da:	2303      	movs	r3, #3
 80215dc:	e294      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80215de:	4b12      	ldr	r3, [pc, #72]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80215e4:	f003 0302 	and.w	r3, r3, #2
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d0e8      	beq.n	80215be <HAL_RCC_OscConfig+0x44e>
 80215ec:	e025      	b.n	802163a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80215ee:	4b0e      	ldr	r3, [pc, #56]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80215f4:	4a0c      	ldr	r2, [pc, #48]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 80215f6:	f023 0301 	bic.w	r3, r3, #1
 80215fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80215fe:	f7ff faa9 	bl	8020b54 <HAL_GetTick>
 8021602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021604:	e012      	b.n	802162c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021606:	f7ff faa5 	bl	8020b54 <HAL_GetTick>
 802160a:	4602      	mov	r2, r0
 802160c:	693b      	ldr	r3, [r7, #16]
 802160e:	1ad3      	subs	r3, r2, r3
 8021610:	2b07      	cmp	r3, #7
 8021612:	d90b      	bls.n	802162c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021614:	4b04      	ldr	r3, [pc, #16]	; (8021628 <HAL_RCC_OscConfig+0x4b8>)
 8021616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802161a:	f003 0302 	and.w	r3, r3, #2
 802161e:	2b00      	cmp	r3, #0
 8021620:	d004      	beq.n	802162c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8021622:	2303      	movs	r3, #3
 8021624:	e270      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
 8021626:	bf00      	nop
 8021628:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 802162c:	4ba8      	ldr	r3, [pc, #672]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021632:	f003 0302 	and.w	r3, r3, #2
 8021636:	2b00      	cmp	r3, #0
 8021638:	d1e5      	bne.n	8021606 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	f003 0304 	and.w	r3, r3, #4
 8021642:	2b00      	cmp	r3, #0
 8021644:	f000 812d 	beq.w	80218a2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021648:	2300      	movs	r3, #0
 802164a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 802164c:	4ba0      	ldr	r3, [pc, #640]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021654:	2b00      	cmp	r3, #0
 8021656:	d10d      	bne.n	8021674 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021658:	4b9d      	ldr	r3, [pc, #628]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802165c:	4a9c      	ldr	r2, [pc, #624]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021662:	6593      	str	r3, [r2, #88]	; 0x58
 8021664:	4b9a      	ldr	r3, [pc, #616]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802166c:	60bb      	str	r3, [r7, #8]
 802166e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021670:	2301      	movs	r3, #1
 8021672:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021674:	4b97      	ldr	r3, [pc, #604]	; (80218d4 <HAL_RCC_OscConfig+0x764>)
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802167c:	2b00      	cmp	r3, #0
 802167e:	d11e      	bne.n	80216be <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021680:	4b94      	ldr	r3, [pc, #592]	; (80218d4 <HAL_RCC_OscConfig+0x764>)
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	4a93      	ldr	r2, [pc, #588]	; (80218d4 <HAL_RCC_OscConfig+0x764>)
 8021686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802168a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802168c:	f7ff fa62 	bl	8020b54 <HAL_GetTick>
 8021690:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021692:	e00e      	b.n	80216b2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021694:	f7ff fa5e 	bl	8020b54 <HAL_GetTick>
 8021698:	4602      	mov	r2, r0
 802169a:	693b      	ldr	r3, [r7, #16]
 802169c:	1ad3      	subs	r3, r2, r3
 802169e:	2b02      	cmp	r3, #2
 80216a0:	d907      	bls.n	80216b2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80216a2:	4b8c      	ldr	r3, [pc, #560]	; (80218d4 <HAL_RCC_OscConfig+0x764>)
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d101      	bne.n	80216b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80216ae:	2303      	movs	r3, #3
 80216b0:	e22a      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80216b2:	4b88      	ldr	r3, [pc, #544]	; (80218d4 <HAL_RCC_OscConfig+0x764>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d0ea      	beq.n	8021694 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	689b      	ldr	r3, [r3, #8]
 80216c2:	f003 0301 	and.w	r3, r3, #1
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	d01f      	beq.n	802170a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	689b      	ldr	r3, [r3, #8]
 80216ce:	f003 0304 	and.w	r3, r3, #4
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d010      	beq.n	80216f8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80216d6:	4b7e      	ldr	r3, [pc, #504]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80216d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80216dc:	4a7c      	ldr	r2, [pc, #496]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80216de:	f043 0304 	orr.w	r3, r3, #4
 80216e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80216e6:	4b7a      	ldr	r3, [pc, #488]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80216e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80216ec:	4a78      	ldr	r2, [pc, #480]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80216ee:	f043 0301 	orr.w	r3, r3, #1
 80216f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80216f6:	e018      	b.n	802172a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80216f8:	4b75      	ldr	r3, [pc, #468]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80216fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80216fe:	4a74      	ldr	r2, [pc, #464]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021700:	f043 0301 	orr.w	r3, r3, #1
 8021704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8021708:	e00f      	b.n	802172a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 802170a:	4b71      	ldr	r3, [pc, #452]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021710:	4a6f      	ldr	r2, [pc, #444]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021712:	f023 0301 	bic.w	r3, r3, #1
 8021716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 802171a:	4b6d      	ldr	r3, [pc, #436]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021720:	4a6b      	ldr	r2, [pc, #428]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021722:	f023 0304 	bic.w	r3, r3, #4
 8021726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	689b      	ldr	r3, [r3, #8]
 802172e:	2b00      	cmp	r3, #0
 8021730:	d068      	beq.n	8021804 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021732:	f7ff fa0f 	bl	8020b54 <HAL_GetTick>
 8021736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021738:	e011      	b.n	802175e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802173a:	f7ff fa0b 	bl	8020b54 <HAL_GetTick>
 802173e:	4602      	mov	r2, r0
 8021740:	693b      	ldr	r3, [r7, #16]
 8021742:	1ad3      	subs	r3, r2, r3
 8021744:	f241 3288 	movw	r2, #5000	; 0x1388
 8021748:	4293      	cmp	r3, r2
 802174a:	d908      	bls.n	802175e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802174c:	4b60      	ldr	r3, [pc, #384]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021752:	f003 0302 	and.w	r3, r3, #2
 8021756:	2b00      	cmp	r3, #0
 8021758:	d101      	bne.n	802175e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 802175a:	2303      	movs	r3, #3
 802175c:	e1d4      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802175e:	4b5c      	ldr	r3, [pc, #368]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021764:	f003 0302 	and.w	r3, r3, #2
 8021768:	2b00      	cmp	r3, #0
 802176a:	d0e6      	beq.n	802173a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	689b      	ldr	r3, [r3, #8]
 8021770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021774:	2b00      	cmp	r3, #0
 8021776:	d022      	beq.n	80217be <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8021778:	4b55      	ldr	r3, [pc, #340]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802177e:	4a54      	ldr	r2, [pc, #336]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8021788:	e011      	b.n	80217ae <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802178a:	f7ff f9e3 	bl	8020b54 <HAL_GetTick>
 802178e:	4602      	mov	r2, r0
 8021790:	693b      	ldr	r3, [r7, #16]
 8021792:	1ad3      	subs	r3, r2, r3
 8021794:	f241 3288 	movw	r2, #5000	; 0x1388
 8021798:	4293      	cmp	r3, r2
 802179a:	d908      	bls.n	80217ae <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 802179c:	4b4c      	ldr	r3, [pc, #304]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	d101      	bne.n	80217ae <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80217aa:	2303      	movs	r3, #3
 80217ac:	e1ac      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80217ae:	4b48      	ldr	r3, [pc, #288]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80217b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d0e6      	beq.n	802178a <HAL_RCC_OscConfig+0x61a>
 80217bc:	e068      	b.n	8021890 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80217be:	4b44      	ldr	r3, [pc, #272]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80217c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217c4:	4a42      	ldr	r2, [pc, #264]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80217c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80217ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80217ce:	e011      	b.n	80217f4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80217d0:	f7ff f9c0 	bl	8020b54 <HAL_GetTick>
 80217d4:	4602      	mov	r2, r0
 80217d6:	693b      	ldr	r3, [r7, #16]
 80217d8:	1ad3      	subs	r3, r2, r3
 80217da:	f241 3288 	movw	r2, #5000	; 0x1388
 80217de:	4293      	cmp	r3, r2
 80217e0:	d908      	bls.n	80217f4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80217e2:	4b3b      	ldr	r3, [pc, #236]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80217e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d001      	beq.n	80217f4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80217f0:	2303      	movs	r3, #3
 80217f2:	e189      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80217f4:	4b36      	ldr	r3, [pc, #216]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80217f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d1e6      	bne.n	80217d0 <HAL_RCC_OscConfig+0x660>
 8021802:	e045      	b.n	8021890 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021804:	f7ff f9a6 	bl	8020b54 <HAL_GetTick>
 8021808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802180a:	e011      	b.n	8021830 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802180c:	f7ff f9a2 	bl	8020b54 <HAL_GetTick>
 8021810:	4602      	mov	r2, r0
 8021812:	693b      	ldr	r3, [r7, #16]
 8021814:	1ad3      	subs	r3, r2, r3
 8021816:	f241 3288 	movw	r2, #5000	; 0x1388
 802181a:	4293      	cmp	r3, r2
 802181c:	d908      	bls.n	8021830 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802181e:	4b2c      	ldr	r3, [pc, #176]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021824:	f003 0302 	and.w	r3, r3, #2
 8021828:	2b00      	cmp	r3, #0
 802182a:	d001      	beq.n	8021830 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 802182c:	2303      	movs	r3, #3
 802182e:	e16b      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021830:	4b27      	ldr	r3, [pc, #156]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021836:	f003 0302 	and.w	r3, r3, #2
 802183a:	2b00      	cmp	r3, #0
 802183c:	d1e6      	bne.n	802180c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 802183e:	4b24      	ldr	r3, [pc, #144]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021848:	2b00      	cmp	r3, #0
 802184a:	d021      	beq.n	8021890 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 802184c:	4b20      	ldr	r3, [pc, #128]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021852:	4a1f      	ldr	r2, [pc, #124]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 802185c:	e011      	b.n	8021882 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802185e:	f7ff f979 	bl	8020b54 <HAL_GetTick>
 8021862:	4602      	mov	r2, r0
 8021864:	693b      	ldr	r3, [r7, #16]
 8021866:	1ad3      	subs	r3, r2, r3
 8021868:	f241 3288 	movw	r2, #5000	; 0x1388
 802186c:	4293      	cmp	r3, r2
 802186e:	d908      	bls.n	8021882 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8021870:	4b17      	ldr	r3, [pc, #92]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802187a:	2b00      	cmp	r3, #0
 802187c:	d001      	beq.n	8021882 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 802187e:	2303      	movs	r3, #3
 8021880:	e142      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8021882:	4b13      	ldr	r3, [pc, #76]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802188c:	2b00      	cmp	r3, #0
 802188e:	d1e6      	bne.n	802185e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8021890:	7ffb      	ldrb	r3, [r7, #31]
 8021892:	2b01      	cmp	r3, #1
 8021894:	d105      	bne.n	80218a2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021896:	4b0e      	ldr	r3, [pc, #56]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 8021898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802189a:	4a0d      	ldr	r2, [pc, #52]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 802189c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80218a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80218a2:	687b      	ldr	r3, [r7, #4]
 80218a4:	681b      	ldr	r3, [r3, #0]
 80218a6:	f003 0320 	and.w	r3, r3, #32
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d04f      	beq.n	802194e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d028      	beq.n	8021908 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80218b6:	4b06      	ldr	r3, [pc, #24]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80218b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80218bc:	4a04      	ldr	r2, [pc, #16]	; (80218d0 <HAL_RCC_OscConfig+0x760>)
 80218be:	f043 0301 	orr.w	r3, r3, #1
 80218c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80218c6:	f7ff f945 	bl	8020b54 <HAL_GetTick>
 80218ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80218cc:	e014      	b.n	80218f8 <HAL_RCC_OscConfig+0x788>
 80218ce:	bf00      	nop
 80218d0:	40021000 	.word	0x40021000
 80218d4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80218d8:	f7ff f93c 	bl	8020b54 <HAL_GetTick>
 80218dc:	4602      	mov	r2, r0
 80218de:	693b      	ldr	r3, [r7, #16]
 80218e0:	1ad3      	subs	r3, r2, r3
 80218e2:	2b02      	cmp	r3, #2
 80218e4:	d908      	bls.n	80218f8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80218e6:	4b8a      	ldr	r3, [pc, #552]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80218e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80218ec:	f003 0302 	and.w	r3, r3, #2
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	d101      	bne.n	80218f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80218f4:	2303      	movs	r3, #3
 80218f6:	e107      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80218f8:	4b85      	ldr	r3, [pc, #532]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80218fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80218fe:	f003 0302 	and.w	r3, r3, #2
 8021902:	2b00      	cmp	r3, #0
 8021904:	d0e8      	beq.n	80218d8 <HAL_RCC_OscConfig+0x768>
 8021906:	e022      	b.n	802194e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8021908:	4b81      	ldr	r3, [pc, #516]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 802190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802190e:	4a80      	ldr	r2, [pc, #512]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021910:	f023 0301 	bic.w	r3, r3, #1
 8021914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021918:	f7ff f91c 	bl	8020b54 <HAL_GetTick>
 802191c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802191e:	e00f      	b.n	8021940 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021920:	f7ff f918 	bl	8020b54 <HAL_GetTick>
 8021924:	4602      	mov	r2, r0
 8021926:	693b      	ldr	r3, [r7, #16]
 8021928:	1ad3      	subs	r3, r2, r3
 802192a:	2b02      	cmp	r3, #2
 802192c:	d908      	bls.n	8021940 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802192e:	4b78      	ldr	r3, [pc, #480]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8021934:	f003 0302 	and.w	r3, r3, #2
 8021938:	2b00      	cmp	r3, #0
 802193a:	d001      	beq.n	8021940 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 802193c:	2303      	movs	r3, #3
 802193e:	e0e3      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8021940:	4b73      	ldr	r3, [pc, #460]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8021946:	f003 0302 	and.w	r3, r3, #2
 802194a:	2b00      	cmp	r3, #0
 802194c:	d1e8      	bne.n	8021920 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021952:	2b00      	cmp	r3, #0
 8021954:	f000 80d7 	beq.w	8021b06 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021958:	4b6d      	ldr	r3, [pc, #436]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 802195a:	689b      	ldr	r3, [r3, #8]
 802195c:	f003 030c 	and.w	r3, r3, #12
 8021960:	2b0c      	cmp	r3, #12
 8021962:	f000 8091 	beq.w	8021a88 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802196a:	2b02      	cmp	r3, #2
 802196c:	d166      	bne.n	8021a3c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802196e:	4b68      	ldr	r3, [pc, #416]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021970:	681b      	ldr	r3, [r3, #0]
 8021972:	4a67      	ldr	r2, [pc, #412]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802197a:	f7ff f8eb 	bl	8020b54 <HAL_GetTick>
 802197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021980:	e00e      	b.n	80219a0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021982:	f7ff f8e7 	bl	8020b54 <HAL_GetTick>
 8021986:	4602      	mov	r2, r0
 8021988:	693b      	ldr	r3, [r7, #16]
 802198a:	1ad3      	subs	r3, r2, r3
 802198c:	2b02      	cmp	r3, #2
 802198e:	d907      	bls.n	80219a0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021990:	4b5f      	ldr	r3, [pc, #380]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021998:	2b00      	cmp	r3, #0
 802199a:	d001      	beq.n	80219a0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 802199c:	2303      	movs	r3, #3
 802199e:	e0b3      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80219a0:	4b5b      	ldr	r3, [pc, #364]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219a2:	681b      	ldr	r3, [r3, #0]
 80219a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	d1ea      	bne.n	8021982 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80219ac:	4b58      	ldr	r3, [pc, #352]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219ae:	68da      	ldr	r2, [r3, #12]
 80219b0:	4b58      	ldr	r3, [pc, #352]	; (8021b14 <HAL_RCC_OscConfig+0x9a4>)
 80219b2:	4013      	ands	r3, r2
 80219b4:	687a      	ldr	r2, [r7, #4]
 80219b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80219b8:	687a      	ldr	r2, [r7, #4]
 80219ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80219bc:	3a01      	subs	r2, #1
 80219be:	0112      	lsls	r2, r2, #4
 80219c0:	4311      	orrs	r1, r2
 80219c2:	687a      	ldr	r2, [r7, #4]
 80219c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80219c6:	0212      	lsls	r2, r2, #8
 80219c8:	4311      	orrs	r1, r2
 80219ca:	687a      	ldr	r2, [r7, #4]
 80219cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80219ce:	0852      	lsrs	r2, r2, #1
 80219d0:	3a01      	subs	r2, #1
 80219d2:	0552      	lsls	r2, r2, #21
 80219d4:	4311      	orrs	r1, r2
 80219d6:	687a      	ldr	r2, [r7, #4]
 80219d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80219da:	0852      	lsrs	r2, r2, #1
 80219dc:	3a01      	subs	r2, #1
 80219de:	0652      	lsls	r2, r2, #25
 80219e0:	4311      	orrs	r1, r2
 80219e2:	687a      	ldr	r2, [r7, #4]
 80219e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80219e6:	06d2      	lsls	r2, r2, #27
 80219e8:	430a      	orrs	r2, r1
 80219ea:	4949      	ldr	r1, [pc, #292]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219ec:	4313      	orrs	r3, r2
 80219ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80219f0:	4b47      	ldr	r3, [pc, #284]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	4a46      	ldr	r2, [pc, #280]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80219fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80219fc:	4b44      	ldr	r3, [pc, #272]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 80219fe:	68db      	ldr	r3, [r3, #12]
 8021a00:	4a43      	ldr	r2, [pc, #268]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021a06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a08:	f7ff f8a4 	bl	8020b54 <HAL_GetTick>
 8021a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021a0e:	e00e      	b.n	8021a2e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021a10:	f7ff f8a0 	bl	8020b54 <HAL_GetTick>
 8021a14:	4602      	mov	r2, r0
 8021a16:	693b      	ldr	r3, [r7, #16]
 8021a18:	1ad3      	subs	r3, r2, r3
 8021a1a:	2b02      	cmp	r3, #2
 8021a1c:	d907      	bls.n	8021a2e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021a1e:	4b3c      	ldr	r3, [pc, #240]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d101      	bne.n	8021a2e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8021a2a:	2303      	movs	r3, #3
 8021a2c:	e06c      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021a2e:	4b38      	ldr	r3, [pc, #224]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d0ea      	beq.n	8021a10 <HAL_RCC_OscConfig+0x8a0>
 8021a3a:	e064      	b.n	8021b06 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021a3c:	4b34      	ldr	r3, [pc, #208]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	4a33      	ldr	r2, [pc, #204]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a48:	f7ff f884 	bl	8020b54 <HAL_GetTick>
 8021a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021a4e:	e00e      	b.n	8021a6e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021a50:	f7ff f880 	bl	8020b54 <HAL_GetTick>
 8021a54:	4602      	mov	r2, r0
 8021a56:	693b      	ldr	r3, [r7, #16]
 8021a58:	1ad3      	subs	r3, r2, r3
 8021a5a:	2b02      	cmp	r3, #2
 8021a5c:	d907      	bls.n	8021a6e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021a5e:	4b2c      	ldr	r3, [pc, #176]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d001      	beq.n	8021a6e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8021a6a:	2303      	movs	r3, #3
 8021a6c:	e04c      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021a6e:	4b28      	ldr	r3, [pc, #160]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a70:	681b      	ldr	r3, [r3, #0]
 8021a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d1ea      	bne.n	8021a50 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8021a7a:	4b25      	ldr	r3, [pc, #148]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a7c:	68da      	ldr	r2, [r3, #12]
 8021a7e:	4924      	ldr	r1, [pc, #144]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a80:	4b25      	ldr	r3, [pc, #148]	; (8021b18 <HAL_RCC_OscConfig+0x9a8>)
 8021a82:	4013      	ands	r3, r2
 8021a84:	60cb      	str	r3, [r1, #12]
 8021a86:	e03e      	b.n	8021b06 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a8c:	2b01      	cmp	r3, #1
 8021a8e:	d101      	bne.n	8021a94 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8021a90:	2301      	movs	r3, #1
 8021a92:	e039      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8021a94:	4b1e      	ldr	r3, [pc, #120]	; (8021b10 <HAL_RCC_OscConfig+0x9a0>)
 8021a96:	68db      	ldr	r3, [r3, #12]
 8021a98:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021a9a:	697b      	ldr	r3, [r7, #20]
 8021a9c:	f003 0203 	and.w	r2, r3, #3
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021aa4:	429a      	cmp	r2, r3
 8021aa6:	d12c      	bne.n	8021b02 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021aa8:	697b      	ldr	r3, [r7, #20]
 8021aaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021ab2:	3b01      	subs	r3, #1
 8021ab4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021ab6:	429a      	cmp	r2, r3
 8021ab8:	d123      	bne.n	8021b02 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021aba:	697b      	ldr	r3, [r7, #20]
 8021abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021ac4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021ac6:	429a      	cmp	r2, r3
 8021ac8:	d11b      	bne.n	8021b02 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021aca:	697b      	ldr	r3, [r7, #20]
 8021acc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021ad4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021ad6:	429a      	cmp	r2, r3
 8021ad8:	d113      	bne.n	8021b02 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021ada:	697b      	ldr	r3, [r7, #20]
 8021adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ae4:	085b      	lsrs	r3, r3, #1
 8021ae6:	3b01      	subs	r3, #1
 8021ae8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021aea:	429a      	cmp	r2, r3
 8021aec:	d109      	bne.n	8021b02 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8021aee:	697b      	ldr	r3, [r7, #20]
 8021af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021af8:	085b      	lsrs	r3, r3, #1
 8021afa:	3b01      	subs	r3, #1
 8021afc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021afe:	429a      	cmp	r2, r3
 8021b00:	d001      	beq.n	8021b06 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8021b02:	2301      	movs	r3, #1
 8021b04:	e000      	b.n	8021b08 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8021b06:	2300      	movs	r3, #0
}
 8021b08:	4618      	mov	r0, r3
 8021b0a:	3720      	adds	r7, #32
 8021b0c:	46bd      	mov	sp, r7
 8021b0e:	bd80      	pop	{r7, pc}
 8021b10:	40021000 	.word	0x40021000
 8021b14:	019f800c 	.word	0x019f800c
 8021b18:	feeefffc 	.word	0xfeeefffc

08021b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b086      	sub	sp, #24
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
 8021b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8021b26:	2300      	movs	r3, #0
 8021b28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d101      	bne.n	8021b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8021b30:	2301      	movs	r3, #1
 8021b32:	e11c      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8021b34:	4b90      	ldr	r3, [pc, #576]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	f003 030f 	and.w	r3, r3, #15
 8021b3c:	683a      	ldr	r2, [r7, #0]
 8021b3e:	429a      	cmp	r2, r3
 8021b40:	d910      	bls.n	8021b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021b42:	4b8d      	ldr	r3, [pc, #564]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	f023 020f 	bic.w	r2, r3, #15
 8021b4a:	498b      	ldr	r1, [pc, #556]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021b4c:	683b      	ldr	r3, [r7, #0]
 8021b4e:	4313      	orrs	r3, r2
 8021b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021b52:	4b89      	ldr	r3, [pc, #548]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	f003 030f 	and.w	r3, r3, #15
 8021b5a:	683a      	ldr	r2, [r7, #0]
 8021b5c:	429a      	cmp	r2, r3
 8021b5e:	d001      	beq.n	8021b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8021b60:	2301      	movs	r3, #1
 8021b62:	e104      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	f003 0302 	and.w	r3, r3, #2
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d010      	beq.n	8021b92 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	689a      	ldr	r2, [r3, #8]
 8021b74:	4b81      	ldr	r3, [pc, #516]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021b76:	689b      	ldr	r3, [r3, #8]
 8021b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021b7c:	429a      	cmp	r2, r3
 8021b7e:	d908      	bls.n	8021b92 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021b80:	4b7e      	ldr	r3, [pc, #504]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021b82:	689b      	ldr	r3, [r3, #8]
 8021b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	689b      	ldr	r3, [r3, #8]
 8021b8c:	497b      	ldr	r1, [pc, #492]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021b8e:	4313      	orrs	r3, r2
 8021b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	681b      	ldr	r3, [r3, #0]
 8021b96:	f003 0301 	and.w	r3, r3, #1
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	f000 8085 	beq.w	8021caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	685b      	ldr	r3, [r3, #4]
 8021ba4:	2b03      	cmp	r3, #3
 8021ba6:	d11f      	bne.n	8021be8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021ba8:	4b74      	ldr	r3, [pc, #464]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d101      	bne.n	8021bb8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8021bb4:	2301      	movs	r3, #1
 8021bb6:	e0da      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8021bb8:	f000 fa26 	bl	8022008 <RCC_GetSysClockFreqFromPLLSource>
 8021bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8021bbe:	693b      	ldr	r3, [r7, #16]
 8021bc0:	4a6f      	ldr	r2, [pc, #444]	; (8021d80 <HAL_RCC_ClockConfig+0x264>)
 8021bc2:	4293      	cmp	r3, r2
 8021bc4:	d947      	bls.n	8021c56 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021bc6:	4b6d      	ldr	r3, [pc, #436]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021bc8:	689b      	ldr	r3, [r3, #8]
 8021bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d141      	bne.n	8021c56 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021bd2:	4b6a      	ldr	r3, [pc, #424]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021bd4:	689b      	ldr	r3, [r3, #8]
 8021bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021bda:	4a68      	ldr	r2, [pc, #416]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021be0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021be2:	2380      	movs	r3, #128	; 0x80
 8021be4:	617b      	str	r3, [r7, #20]
 8021be6:	e036      	b.n	8021c56 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	2b02      	cmp	r3, #2
 8021bee:	d107      	bne.n	8021c00 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021bf0:	4b62      	ldr	r3, [pc, #392]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d115      	bne.n	8021c28 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021bfc:	2301      	movs	r3, #1
 8021bfe:	e0b6      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	685b      	ldr	r3, [r3, #4]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d107      	bne.n	8021c18 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021c08:	4b5c      	ldr	r3, [pc, #368]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	f003 0302 	and.w	r3, r3, #2
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d109      	bne.n	8021c28 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021c14:	2301      	movs	r3, #1
 8021c16:	e0aa      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021c18:	4b58      	ldr	r3, [pc, #352]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d101      	bne.n	8021c28 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021c24:	2301      	movs	r3, #1
 8021c26:	e0a2      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8021c28:	f000 f8b0 	bl	8021d8c <HAL_RCC_GetSysClockFreq>
 8021c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8021c2e:	693b      	ldr	r3, [r7, #16]
 8021c30:	4a53      	ldr	r2, [pc, #332]	; (8021d80 <HAL_RCC_ClockConfig+0x264>)
 8021c32:	4293      	cmp	r3, r2
 8021c34:	d90f      	bls.n	8021c56 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021c36:	4b51      	ldr	r3, [pc, #324]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c38:	689b      	ldr	r3, [r3, #8]
 8021c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d109      	bne.n	8021c56 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021c42:	4b4e      	ldr	r3, [pc, #312]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c44:	689b      	ldr	r3, [r3, #8]
 8021c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021c4a:	4a4c      	ldr	r2, [pc, #304]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021c52:	2380      	movs	r3, #128	; 0x80
 8021c54:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021c56:	4b49      	ldr	r3, [pc, #292]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c58:	689b      	ldr	r3, [r3, #8]
 8021c5a:	f023 0203 	bic.w	r2, r3, #3
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	685b      	ldr	r3, [r3, #4]
 8021c62:	4946      	ldr	r1, [pc, #280]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c64:	4313      	orrs	r3, r2
 8021c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021c68:	f7fe ff74 	bl	8020b54 <HAL_GetTick>
 8021c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021c6e:	e013      	b.n	8021c98 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021c70:	f7fe ff70 	bl	8020b54 <HAL_GetTick>
 8021c74:	4602      	mov	r2, r0
 8021c76:	68fb      	ldr	r3, [r7, #12]
 8021c78:	1ad3      	subs	r3, r2, r3
 8021c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021c7e:	4293      	cmp	r3, r2
 8021c80:	d90a      	bls.n	8021c98 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021c82:	4b3e      	ldr	r3, [pc, #248]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c84:	689b      	ldr	r3, [r3, #8]
 8021c86:	f003 020c 	and.w	r2, r3, #12
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	685b      	ldr	r3, [r3, #4]
 8021c8e:	009b      	lsls	r3, r3, #2
 8021c90:	429a      	cmp	r2, r3
 8021c92:	d001      	beq.n	8021c98 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8021c94:	2303      	movs	r3, #3
 8021c96:	e06a      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021c98:	4b38      	ldr	r3, [pc, #224]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021c9a:	689b      	ldr	r3, [r3, #8]
 8021c9c:	f003 020c 	and.w	r2, r3, #12
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	009b      	lsls	r3, r3, #2
 8021ca6:	429a      	cmp	r2, r3
 8021ca8:	d1e2      	bne.n	8021c70 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8021caa:	697b      	ldr	r3, [r7, #20]
 8021cac:	2b80      	cmp	r3, #128	; 0x80
 8021cae:	d105      	bne.n	8021cbc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8021cb0:	4b32      	ldr	r3, [pc, #200]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021cb2:	689b      	ldr	r3, [r3, #8]
 8021cb4:	4a31      	ldr	r2, [pc, #196]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021cba:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	f003 0302 	and.w	r3, r3, #2
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d010      	beq.n	8021cea <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	689a      	ldr	r2, [r3, #8]
 8021ccc:	4b2b      	ldr	r3, [pc, #172]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021cce:	689b      	ldr	r3, [r3, #8]
 8021cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021cd4:	429a      	cmp	r2, r3
 8021cd6:	d208      	bcs.n	8021cea <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021cd8:	4b28      	ldr	r3, [pc, #160]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021cda:	689b      	ldr	r3, [r3, #8]
 8021cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	689b      	ldr	r3, [r3, #8]
 8021ce4:	4925      	ldr	r1, [pc, #148]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021ce6:	4313      	orrs	r3, r2
 8021ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8021cea:	4b23      	ldr	r3, [pc, #140]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	f003 030f 	and.w	r3, r3, #15
 8021cf2:	683a      	ldr	r2, [r7, #0]
 8021cf4:	429a      	cmp	r2, r3
 8021cf6:	d210      	bcs.n	8021d1a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021cf8:	4b1f      	ldr	r3, [pc, #124]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021cfa:	681b      	ldr	r3, [r3, #0]
 8021cfc:	f023 020f 	bic.w	r2, r3, #15
 8021d00:	491d      	ldr	r1, [pc, #116]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021d02:	683b      	ldr	r3, [r7, #0]
 8021d04:	4313      	orrs	r3, r2
 8021d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021d08:	4b1b      	ldr	r3, [pc, #108]	; (8021d78 <HAL_RCC_ClockConfig+0x25c>)
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	f003 030f 	and.w	r3, r3, #15
 8021d10:	683a      	ldr	r2, [r7, #0]
 8021d12:	429a      	cmp	r2, r3
 8021d14:	d001      	beq.n	8021d1a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8021d16:	2301      	movs	r3, #1
 8021d18:	e029      	b.n	8021d6e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	f003 0304 	and.w	r3, r3, #4
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d008      	beq.n	8021d38 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021d26:	4b15      	ldr	r3, [pc, #84]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021d28:	689b      	ldr	r3, [r3, #8]
 8021d2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	68db      	ldr	r3, [r3, #12]
 8021d32:	4912      	ldr	r1, [pc, #72]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021d34:	4313      	orrs	r3, r2
 8021d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	f003 0308 	and.w	r3, r3, #8
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d009      	beq.n	8021d58 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021d44:	4b0d      	ldr	r3, [pc, #52]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021d46:	689b      	ldr	r3, [r3, #8]
 8021d48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8021d4c:	687b      	ldr	r3, [r7, #4]
 8021d4e:	691b      	ldr	r3, [r3, #16]
 8021d50:	00db      	lsls	r3, r3, #3
 8021d52:	490a      	ldr	r1, [pc, #40]	; (8021d7c <HAL_RCC_ClockConfig+0x260>)
 8021d54:	4313      	orrs	r3, r2
 8021d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8021d58:	f000 f8b6 	bl	8021ec8 <HAL_RCC_GetHCLKFreq>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	4a09      	ldr	r2, [pc, #36]	; (8021d84 <HAL_RCC_ClockConfig+0x268>)
 8021d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8021d62:	4b09      	ldr	r3, [pc, #36]	; (8021d88 <HAL_RCC_ClockConfig+0x26c>)
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	4618      	mov	r0, r3
 8021d68:	f7fe fea4 	bl	8020ab4 <HAL_InitTick>
 8021d6c:	4603      	mov	r3, r0
}
 8021d6e:	4618      	mov	r0, r3
 8021d70:	3718      	adds	r7, #24
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bd80      	pop	{r7, pc}
 8021d76:	bf00      	nop
 8021d78:	40022000 	.word	0x40022000
 8021d7c:	40021000 	.word	0x40021000
 8021d80:	04c4b400 	.word	0x04c4b400
 8021d84:	20000000 	.word	0x20000000
 8021d88:	20000004 	.word	0x20000004

08021d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021d8c:	b480      	push	{r7}
 8021d8e:	b089      	sub	sp, #36	; 0x24
 8021d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021d92:	2300      	movs	r3, #0
 8021d94:	61fb      	str	r3, [r7, #28]
 8021d96:	2300      	movs	r3, #0
 8021d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021d9a:	4b47      	ldr	r3, [pc, #284]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021d9c:	689b      	ldr	r3, [r3, #8]
 8021d9e:	f003 030c 	and.w	r3, r3, #12
 8021da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021da4:	4b44      	ldr	r3, [pc, #272]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021da6:	68db      	ldr	r3, [r3, #12]
 8021da8:	f003 0303 	and.w	r3, r3, #3
 8021dac:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8021dae:	693b      	ldr	r3, [r7, #16]
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d005      	beq.n	8021dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8021db4:	693b      	ldr	r3, [r7, #16]
 8021db6:	2b0c      	cmp	r3, #12
 8021db8:	d121      	bne.n	8021dfe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	2b01      	cmp	r3, #1
 8021dbe:	d11e      	bne.n	8021dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021dc0:	4b3d      	ldr	r3, [pc, #244]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021dc2:	681b      	ldr	r3, [r3, #0]
 8021dc4:	f003 0308 	and.w	r3, r3, #8
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d107      	bne.n	8021ddc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021dcc:	4b3a      	ldr	r3, [pc, #232]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021dd2:	0a1b      	lsrs	r3, r3, #8
 8021dd4:	f003 030f 	and.w	r3, r3, #15
 8021dd8:	61fb      	str	r3, [r7, #28]
 8021dda:	e005      	b.n	8021de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021ddc:	4b36      	ldr	r3, [pc, #216]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	091b      	lsrs	r3, r3, #4
 8021de2:	f003 030f 	and.w	r3, r3, #15
 8021de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8021de8:	4a34      	ldr	r2, [pc, #208]	; (8021ebc <HAL_RCC_GetSysClockFreq+0x130>)
 8021dea:	69fb      	ldr	r3, [r7, #28]
 8021dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021df0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8021df2:	693b      	ldr	r3, [r7, #16]
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d10d      	bne.n	8021e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021df8:	69fb      	ldr	r3, [r7, #28]
 8021dfa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8021dfc:	e00a      	b.n	8021e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021dfe:	693b      	ldr	r3, [r7, #16]
 8021e00:	2b04      	cmp	r3, #4
 8021e02:	d102      	bne.n	8021e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8021e04:	4b2e      	ldr	r3, [pc, #184]	; (8021ec0 <HAL_RCC_GetSysClockFreq+0x134>)
 8021e06:	61bb      	str	r3, [r7, #24]
 8021e08:	e004      	b.n	8021e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021e0a:	693b      	ldr	r3, [r7, #16]
 8021e0c:	2b08      	cmp	r3, #8
 8021e0e:	d101      	bne.n	8021e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021e10:	4b2c      	ldr	r3, [pc, #176]	; (8021ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8021e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021e14:	693b      	ldr	r3, [r7, #16]
 8021e16:	2b0c      	cmp	r3, #12
 8021e18:	d146      	bne.n	8021ea8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8021e1a:	4b27      	ldr	r3, [pc, #156]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e1c:	68db      	ldr	r3, [r3, #12]
 8021e1e:	f003 0303 	and.w	r3, r3, #3
 8021e22:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021e24:	4b24      	ldr	r3, [pc, #144]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e26:	68db      	ldr	r3, [r3, #12]
 8021e28:	091b      	lsrs	r3, r3, #4
 8021e2a:	f003 030f 	and.w	r3, r3, #15
 8021e2e:	3301      	adds	r3, #1
 8021e30:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8021e32:	68bb      	ldr	r3, [r7, #8]
 8021e34:	2b02      	cmp	r3, #2
 8021e36:	d003      	beq.n	8021e40 <HAL_RCC_GetSysClockFreq+0xb4>
 8021e38:	68bb      	ldr	r3, [r7, #8]
 8021e3a:	2b03      	cmp	r3, #3
 8021e3c:	d00d      	beq.n	8021e5a <HAL_RCC_GetSysClockFreq+0xce>
 8021e3e:	e019      	b.n	8021e74 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021e40:	4a1f      	ldr	r2, [pc, #124]	; (8021ec0 <HAL_RCC_GetSysClockFreq+0x134>)
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e48:	4a1b      	ldr	r2, [pc, #108]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e4a:	68d2      	ldr	r2, [r2, #12]
 8021e4c:	0a12      	lsrs	r2, r2, #8
 8021e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021e52:	fb02 f303 	mul.w	r3, r2, r3
 8021e56:	617b      	str	r3, [r7, #20]
        break;
 8021e58:	e019      	b.n	8021e8e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021e5a:	4a1a      	ldr	r2, [pc, #104]	; (8021ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e62:	4a15      	ldr	r2, [pc, #84]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e64:	68d2      	ldr	r2, [r2, #12]
 8021e66:	0a12      	lsrs	r2, r2, #8
 8021e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021e6c:	fb02 f303 	mul.w	r3, r2, r3
 8021e70:	617b      	str	r3, [r7, #20]
        break;
 8021e72:	e00c      	b.n	8021e8e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021e74:	69fa      	ldr	r2, [r7, #28]
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e7c:	4a0e      	ldr	r2, [pc, #56]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e7e:	68d2      	ldr	r2, [r2, #12]
 8021e80:	0a12      	lsrs	r2, r2, #8
 8021e82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021e86:	fb02 f303 	mul.w	r3, r2, r3
 8021e8a:	617b      	str	r3, [r7, #20]
        break;
 8021e8c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8021e8e:	4b0a      	ldr	r3, [pc, #40]	; (8021eb8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e90:	68db      	ldr	r3, [r3, #12]
 8021e92:	0e5b      	lsrs	r3, r3, #25
 8021e94:	f003 0303 	and.w	r3, r3, #3
 8021e98:	3301      	adds	r3, #1
 8021e9a:	005b      	lsls	r3, r3, #1
 8021e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8021e9e:	697a      	ldr	r2, [r7, #20]
 8021ea0:	683b      	ldr	r3, [r7, #0]
 8021ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8021ea8:	69bb      	ldr	r3, [r7, #24]
}
 8021eaa:	4618      	mov	r0, r3
 8021eac:	3724      	adds	r7, #36	; 0x24
 8021eae:	46bd      	mov	sp, r7
 8021eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eb4:	4770      	bx	lr
 8021eb6:	bf00      	nop
 8021eb8:	40021000 	.word	0x40021000
 8021ebc:	080239b8 	.word	0x080239b8
 8021ec0:	00f42400 	.word	0x00f42400
 8021ec4:	007a1200 	.word	0x007a1200

08021ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021ec8:	b580      	push	{r7, lr}
 8021eca:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8021ecc:	f7ff ff5e 	bl	8021d8c <HAL_RCC_GetSysClockFreq>
 8021ed0:	4602      	mov	r2, r0
 8021ed2:	4b05      	ldr	r3, [pc, #20]	; (8021ee8 <HAL_RCC_GetHCLKFreq+0x20>)
 8021ed4:	689b      	ldr	r3, [r3, #8]
 8021ed6:	091b      	lsrs	r3, r3, #4
 8021ed8:	f003 030f 	and.w	r3, r3, #15
 8021edc:	4903      	ldr	r1, [pc, #12]	; (8021eec <HAL_RCC_GetHCLKFreq+0x24>)
 8021ede:	5ccb      	ldrb	r3, [r1, r3]
 8021ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021ee4:	4618      	mov	r0, r3
 8021ee6:	bd80      	pop	{r7, pc}
 8021ee8:	40021000 	.word	0x40021000
 8021eec:	080239a0 	.word	0x080239a0

08021ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021ef0:	b580      	push	{r7, lr}
 8021ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8021ef4:	f7ff ffe8 	bl	8021ec8 <HAL_RCC_GetHCLKFreq>
 8021ef8:	4602      	mov	r2, r0
 8021efa:	4b05      	ldr	r3, [pc, #20]	; (8021f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8021efc:	689b      	ldr	r3, [r3, #8]
 8021efe:	0a1b      	lsrs	r3, r3, #8
 8021f00:	f003 0307 	and.w	r3, r3, #7
 8021f04:	4903      	ldr	r1, [pc, #12]	; (8021f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021f06:	5ccb      	ldrb	r3, [r1, r3]
 8021f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	bd80      	pop	{r7, pc}
 8021f10:	40021000 	.word	0x40021000
 8021f14:	080239b0 	.word	0x080239b0

08021f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021f18:	b580      	push	{r7, lr}
 8021f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021f1c:	f7ff ffd4 	bl	8021ec8 <HAL_RCC_GetHCLKFreq>
 8021f20:	4602      	mov	r2, r0
 8021f22:	4b05      	ldr	r3, [pc, #20]	; (8021f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8021f24:	689b      	ldr	r3, [r3, #8]
 8021f26:	0adb      	lsrs	r3, r3, #11
 8021f28:	f003 0307 	and.w	r3, r3, #7
 8021f2c:	4903      	ldr	r1, [pc, #12]	; (8021f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8021f2e:	5ccb      	ldrb	r3, [r1, r3]
 8021f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021f34:	4618      	mov	r0, r3
 8021f36:	bd80      	pop	{r7, pc}
 8021f38:	40021000 	.word	0x40021000
 8021f3c:	080239b0 	.word	0x080239b0

08021f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	b086      	sub	sp, #24
 8021f44:	af00      	add	r7, sp, #0
 8021f46:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021f48:	2300      	movs	r3, #0
 8021f4a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021f4c:	4b2c      	ldr	r3, [pc, #176]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d003      	beq.n	8021f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021f58:	f7ff f86c 	bl	8021034 <HAL_PWREx_GetVoltageRange>
 8021f5c:	6138      	str	r0, [r7, #16]
 8021f5e:	e014      	b.n	8021f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8021f60:	4b27      	ldr	r3, [pc, #156]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021f64:	4a26      	ldr	r2, [pc, #152]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8021f6c:	4b24      	ldr	r3, [pc, #144]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021f74:	60fb      	str	r3, [r7, #12]
 8021f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021f78:	f7ff f85c 	bl	8021034 <HAL_PWREx_GetVoltageRange>
 8021f7c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8021f7e:	4b20      	ldr	r3, [pc, #128]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021f82:	4a1f      	ldr	r2, [pc, #124]	; (8022000 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8021f8a:	693b      	ldr	r3, [r7, #16]
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d003      	beq.n	8021f98 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8021f90:	693b      	ldr	r3, [r7, #16]
 8021f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021f96:	d10b      	bne.n	8021fb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	2b80      	cmp	r3, #128	; 0x80
 8021f9c:	d919      	bls.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	2ba0      	cmp	r3, #160	; 0xa0
 8021fa2:	d902      	bls.n	8021faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8021fa4:	2302      	movs	r3, #2
 8021fa6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8021fa8:	e013      	b.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021faa:	2301      	movs	r3, #1
 8021fac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8021fae:	e010      	b.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	2b80      	cmp	r3, #128	; 0x80
 8021fb4:	d902      	bls.n	8021fbc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8021fb6:	2303      	movs	r3, #3
 8021fb8:	617b      	str	r3, [r7, #20]
 8021fba:	e00a      	b.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	2b80      	cmp	r3, #128	; 0x80
 8021fc0:	d102      	bne.n	8021fc8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8021fc2:	2302      	movs	r3, #2
 8021fc4:	617b      	str	r3, [r7, #20]
 8021fc6:	e004      	b.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	2b70      	cmp	r3, #112	; 0x70
 8021fcc:	d101      	bne.n	8021fd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021fce:	2301      	movs	r3, #1
 8021fd0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8021fd2:	4b0c      	ldr	r3, [pc, #48]	; (8022004 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8021fd4:	681b      	ldr	r3, [r3, #0]
 8021fd6:	f023 020f 	bic.w	r2, r3, #15
 8021fda:	490a      	ldr	r1, [pc, #40]	; (8022004 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8021fdc:	697b      	ldr	r3, [r7, #20]
 8021fde:	4313      	orrs	r3, r2
 8021fe0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8021fe2:	4b08      	ldr	r3, [pc, #32]	; (8022004 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	f003 030f 	and.w	r3, r3, #15
 8021fea:	697a      	ldr	r2, [r7, #20]
 8021fec:	429a      	cmp	r2, r3
 8021fee:	d001      	beq.n	8021ff4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8021ff0:	2301      	movs	r3, #1
 8021ff2:	e000      	b.n	8021ff6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8021ff4:	2300      	movs	r3, #0
}
 8021ff6:	4618      	mov	r0, r3
 8021ff8:	3718      	adds	r7, #24
 8021ffa:	46bd      	mov	sp, r7
 8021ffc:	bd80      	pop	{r7, pc}
 8021ffe:	bf00      	nop
 8022000:	40021000 	.word	0x40021000
 8022004:	40022000 	.word	0x40022000

08022008 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8022008:	b480      	push	{r7}
 802200a:	b087      	sub	sp, #28
 802200c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802200e:	4b31      	ldr	r3, [pc, #196]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022010:	68db      	ldr	r3, [r3, #12]
 8022012:	f003 0303 	and.w	r3, r3, #3
 8022016:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022018:	4b2e      	ldr	r3, [pc, #184]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 802201a:	68db      	ldr	r3, [r3, #12]
 802201c:	091b      	lsrs	r3, r3, #4
 802201e:	f003 030f 	and.w	r3, r3, #15
 8022022:	3301      	adds	r3, #1
 8022024:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8022026:	68fb      	ldr	r3, [r7, #12]
 8022028:	2b03      	cmp	r3, #3
 802202a:	d015      	beq.n	8022058 <RCC_GetSysClockFreqFromPLLSource+0x50>
 802202c:	68fb      	ldr	r3, [r7, #12]
 802202e:	2b03      	cmp	r3, #3
 8022030:	d839      	bhi.n	80220a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	2b01      	cmp	r3, #1
 8022036:	d01c      	beq.n	8022072 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8022038:	68fb      	ldr	r3, [r7, #12]
 802203a:	2b02      	cmp	r3, #2
 802203c:	d133      	bne.n	80220a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 802203e:	4a26      	ldr	r2, [pc, #152]	; (80220d8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8022040:	68bb      	ldr	r3, [r7, #8]
 8022042:	fbb2 f3f3 	udiv	r3, r2, r3
 8022046:	4a23      	ldr	r2, [pc, #140]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022048:	68d2      	ldr	r2, [r2, #12]
 802204a:	0a12      	lsrs	r2, r2, #8
 802204c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8022050:	fb02 f303 	mul.w	r3, r2, r3
 8022054:	613b      	str	r3, [r7, #16]
      break;
 8022056:	e029      	b.n	80220ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8022058:	4a20      	ldr	r2, [pc, #128]	; (80220dc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 802205a:	68bb      	ldr	r3, [r7, #8]
 802205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8022060:	4a1c      	ldr	r2, [pc, #112]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022062:	68d2      	ldr	r2, [r2, #12]
 8022064:	0a12      	lsrs	r2, r2, #8
 8022066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802206a:	fb02 f303 	mul.w	r3, r2, r3
 802206e:	613b      	str	r3, [r7, #16]
      break;
 8022070:	e01c      	b.n	80220ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022072:	4b18      	ldr	r3, [pc, #96]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	f003 0308 	and.w	r3, r3, #8
 802207a:	2b00      	cmp	r3, #0
 802207c:	d107      	bne.n	802208e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 802207e:	4b15      	ldr	r3, [pc, #84]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8022084:	0a1b      	lsrs	r3, r3, #8
 8022086:	f003 030f 	and.w	r3, r3, #15
 802208a:	617b      	str	r3, [r7, #20]
 802208c:	e005      	b.n	802209a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802208e:	4b11      	ldr	r3, [pc, #68]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022090:	681b      	ldr	r3, [r3, #0]
 8022092:	091b      	lsrs	r3, r3, #4
 8022094:	f003 030f 	and.w	r3, r3, #15
 8022098:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 802209a:	4a11      	ldr	r2, [pc, #68]	; (80220e0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 802209c:	697b      	ldr	r3, [r7, #20]
 802209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80220a2:	613b      	str	r3, [r7, #16]
        break;
 80220a4:	e002      	b.n	80220ac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80220a6:	2300      	movs	r3, #0
 80220a8:	613b      	str	r3, [r7, #16]
      break;
 80220aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80220ac:	4b09      	ldr	r3, [pc, #36]	; (80220d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80220ae:	68db      	ldr	r3, [r3, #12]
 80220b0:	0e5b      	lsrs	r3, r3, #25
 80220b2:	f003 0303 	and.w	r3, r3, #3
 80220b6:	3301      	adds	r3, #1
 80220b8:	005b      	lsls	r3, r3, #1
 80220ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80220bc:	693a      	ldr	r2, [r7, #16]
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80220c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80220c6:	683b      	ldr	r3, [r7, #0]
}
 80220c8:	4618      	mov	r0, r3
 80220ca:	371c      	adds	r7, #28
 80220cc:	46bd      	mov	sp, r7
 80220ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d2:	4770      	bx	lr
 80220d4:	40021000 	.word	0x40021000
 80220d8:	00f42400 	.word	0x00f42400
 80220dc:	007a1200 	.word	0x007a1200
 80220e0:	080239b8 	.word	0x080239b8

080220e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80220e4:	b580      	push	{r7, lr}
 80220e6:	b088      	sub	sp, #32
 80220e8:	af00      	add	r7, sp, #0
 80220ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80220ec:	2300      	movs	r3, #0
 80220ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80220f0:	2300      	movs	r3, #0
 80220f2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	d040      	beq.n	8022182 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022104:	2b80      	cmp	r3, #128	; 0x80
 8022106:	d02a      	beq.n	802215e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8022108:	2b80      	cmp	r3, #128	; 0x80
 802210a:	d825      	bhi.n	8022158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 802210c:	2b60      	cmp	r3, #96	; 0x60
 802210e:	d026      	beq.n	802215e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8022110:	2b60      	cmp	r3, #96	; 0x60
 8022112:	d821      	bhi.n	8022158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8022114:	2b40      	cmp	r3, #64	; 0x40
 8022116:	d006      	beq.n	8022126 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8022118:	2b40      	cmp	r3, #64	; 0x40
 802211a:	d81d      	bhi.n	8022158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 802211c:	2b00      	cmp	r3, #0
 802211e:	d009      	beq.n	8022134 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8022120:	2b20      	cmp	r3, #32
 8022122:	d010      	beq.n	8022146 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8022124:	e018      	b.n	8022158 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8022126:	4b8f      	ldr	r3, [pc, #572]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022128:	68db      	ldr	r3, [r3, #12]
 802212a:	4a8e      	ldr	r2, [pc, #568]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022130:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8022132:	e015      	b.n	8022160 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	3304      	adds	r3, #4
 8022138:	2100      	movs	r1, #0
 802213a:	4618      	mov	r0, r3
 802213c:	f000 fb56 	bl	80227ec <RCCEx_PLLSAI1_Config>
 8022140:	4603      	mov	r3, r0
 8022142:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8022144:	e00c      	b.n	8022160 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	3320      	adds	r3, #32
 802214a:	2100      	movs	r1, #0
 802214c:	4618      	mov	r0, r3
 802214e:	f000 fc33 	bl	80229b8 <RCCEx_PLLSAI2_Config>
 8022152:	4603      	mov	r3, r0
 8022154:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8022156:	e003      	b.n	8022160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022158:	2301      	movs	r3, #1
 802215a:	77fb      	strb	r3, [r7, #31]
        break;
 802215c:	e000      	b.n	8022160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 802215e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022160:	7ffb      	ldrb	r3, [r7, #31]
 8022162:	2b00      	cmp	r3, #0
 8022164:	d10b      	bne.n	802217e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022166:	4b7f      	ldr	r3, [pc, #508]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802216c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022174:	497b      	ldr	r1, [pc, #492]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022176:	4313      	orrs	r3, r2
 8022178:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 802217c:	e001      	b.n	8022182 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802217e:	7ffb      	ldrb	r3, [r7, #31]
 8022180:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802218a:	2b00      	cmp	r3, #0
 802218c:	d047      	beq.n	802221e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022196:	d030      	beq.n	80221fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8022198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802219c:	d82a      	bhi.n	80221f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 802219e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80221a2:	d02a      	beq.n	80221fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80221a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80221a8:	d824      	bhi.n	80221f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80221aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80221ae:	d008      	beq.n	80221c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80221b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80221b4:	d81e      	bhi.n	80221f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	d00a      	beq.n	80221d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80221ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80221be:	d010      	beq.n	80221e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80221c0:	e018      	b.n	80221f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80221c2:	4b68      	ldr	r3, [pc, #416]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221c4:	68db      	ldr	r3, [r3, #12]
 80221c6:	4a67      	ldr	r2, [pc, #412]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80221cc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80221ce:	e015      	b.n	80221fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	3304      	adds	r3, #4
 80221d4:	2100      	movs	r1, #0
 80221d6:	4618      	mov	r0, r3
 80221d8:	f000 fb08 	bl	80227ec <RCCEx_PLLSAI1_Config>
 80221dc:	4603      	mov	r3, r0
 80221de:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80221e0:	e00c      	b.n	80221fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	3320      	adds	r3, #32
 80221e6:	2100      	movs	r1, #0
 80221e8:	4618      	mov	r0, r3
 80221ea:	f000 fbe5 	bl	80229b8 <RCCEx_PLLSAI2_Config>
 80221ee:	4603      	mov	r3, r0
 80221f0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80221f2:	e003      	b.n	80221fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80221f4:	2301      	movs	r3, #1
 80221f6:	77fb      	strb	r3, [r7, #31]
        break;
 80221f8:	e000      	b.n	80221fc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80221fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80221fc:	7ffb      	ldrb	r3, [r7, #31]
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d10b      	bne.n	802221a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8022202:	4b58      	ldr	r3, [pc, #352]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022210:	4954      	ldr	r1, [pc, #336]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022212:	4313      	orrs	r3, r2
 8022214:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8022218:	e001      	b.n	802221e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802221a:	7ffb      	ldrb	r3, [r7, #31]
 802221c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	681b      	ldr	r3, [r3, #0]
 8022222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022226:	2b00      	cmp	r3, #0
 8022228:	f000 80ab 	beq.w	8022382 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 802222c:	2300      	movs	r3, #0
 802222e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8022230:	4b4c      	ldr	r3, [pc, #304]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022238:	2b00      	cmp	r3, #0
 802223a:	d10d      	bne.n	8022258 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802223c:	4b49      	ldr	r3, [pc, #292]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022240:	4a48      	ldr	r2, [pc, #288]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022246:	6593      	str	r3, [r2, #88]	; 0x58
 8022248:	4b46      	ldr	r3, [pc, #280]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022250:	60fb      	str	r3, [r7, #12]
 8022252:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8022254:	2301      	movs	r3, #1
 8022256:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8022258:	4b43      	ldr	r3, [pc, #268]	; (8022368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	4a42      	ldr	r2, [pc, #264]	; (8022368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802225e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8022264:	f7fe fc76 	bl	8020b54 <HAL_GetTick>
 8022268:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802226a:	e00f      	b.n	802228c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802226c:	f7fe fc72 	bl	8020b54 <HAL_GetTick>
 8022270:	4602      	mov	r2, r0
 8022272:	693b      	ldr	r3, [r7, #16]
 8022274:	1ad3      	subs	r3, r2, r3
 8022276:	2b02      	cmp	r3, #2
 8022278:	d908      	bls.n	802228c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802227a:	4b3b      	ldr	r3, [pc, #236]	; (8022368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022282:	2b00      	cmp	r3, #0
 8022284:	d109      	bne.n	802229a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8022286:	2303      	movs	r3, #3
 8022288:	77fb      	strb	r3, [r7, #31]
        }
        break;
 802228a:	e006      	b.n	802229a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802228c:	4b36      	ldr	r3, [pc, #216]	; (8022368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802228e:	681b      	ldr	r3, [r3, #0]
 8022290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022294:	2b00      	cmp	r3, #0
 8022296:	d0e9      	beq.n	802226c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8022298:	e000      	b.n	802229c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 802229a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 802229c:	7ffb      	ldrb	r3, [r7, #31]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d164      	bne.n	802236c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80222a2:	4b30      	ldr	r3, [pc, #192]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80222ac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80222ae:	69bb      	ldr	r3, [r7, #24]
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d01f      	beq.n	80222f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222ba:	69ba      	ldr	r2, [r7, #24]
 80222bc:	429a      	cmp	r2, r3
 80222be:	d019      	beq.n	80222f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80222c0:	4b28      	ldr	r3, [pc, #160]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80222ca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80222cc:	4b25      	ldr	r3, [pc, #148]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222d2:	4a24      	ldr	r2, [pc, #144]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80222d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80222dc:	4b21      	ldr	r3, [pc, #132]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80222e2:	4a20      	ldr	r2, [pc, #128]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80222e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80222ec:	4a1d      	ldr	r2, [pc, #116]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222ee:	69bb      	ldr	r3, [r7, #24]
 80222f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80222f4:	69bb      	ldr	r3, [r7, #24]
 80222f6:	f003 0301 	and.w	r3, r3, #1
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d01f      	beq.n	802233e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80222fe:	f7fe fc29 	bl	8020b54 <HAL_GetTick>
 8022302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022304:	e012      	b.n	802232c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022306:	f7fe fc25 	bl	8020b54 <HAL_GetTick>
 802230a:	4602      	mov	r2, r0
 802230c:	693b      	ldr	r3, [r7, #16]
 802230e:	1ad3      	subs	r3, r2, r3
 8022310:	f241 3288 	movw	r2, #5000	; 0x1388
 8022314:	4293      	cmp	r3, r2
 8022316:	d909      	bls.n	802232c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022318:	4b12      	ldr	r3, [pc, #72]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802231e:	f003 0302 	and.w	r3, r3, #2
 8022322:	2b00      	cmp	r3, #0
 8022324:	d10a      	bne.n	802233c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8022326:	2303      	movs	r3, #3
 8022328:	77fb      	strb	r3, [r7, #31]
            }
            break;
 802232a:	e007      	b.n	802233c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802232c:	4b0d      	ldr	r3, [pc, #52]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022332:	f003 0302 	and.w	r3, r3, #2
 8022336:	2b00      	cmp	r3, #0
 8022338:	d0e5      	beq.n	8022306 <HAL_RCCEx_PeriphCLKConfig+0x222>
 802233a:	e000      	b.n	802233e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 802233c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 802233e:	7ffb      	ldrb	r3, [r7, #31]
 8022340:	2b00      	cmp	r3, #0
 8022342:	d10c      	bne.n	802235e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8022344:	4b07      	ldr	r3, [pc, #28]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802234a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022354:	4903      	ldr	r1, [pc, #12]	; (8022364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022356:	4313      	orrs	r3, r2
 8022358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 802235c:	e008      	b.n	8022370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802235e:	7ffb      	ldrb	r3, [r7, #31]
 8022360:	77bb      	strb	r3, [r7, #30]
 8022362:	e005      	b.n	8022370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8022364:	40021000 	.word	0x40021000
 8022368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802236c:	7ffb      	ldrb	r3, [r7, #31]
 802236e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8022370:	7dfb      	ldrb	r3, [r7, #23]
 8022372:	2b01      	cmp	r3, #1
 8022374:	d105      	bne.n	8022382 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022376:	4b9c      	ldr	r3, [pc, #624]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802237a:	4a9b      	ldr	r2, [pc, #620]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	f003 0301 	and.w	r3, r3, #1
 802238a:	2b00      	cmp	r3, #0
 802238c:	d00a      	beq.n	80223a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 802238e:	4b96      	ldr	r3, [pc, #600]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022394:	f023 0203 	bic.w	r2, r3, #3
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802239c:	4992      	ldr	r1, [pc, #584]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802239e:	4313      	orrs	r3, r2
 80223a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80223a4:	687b      	ldr	r3, [r7, #4]
 80223a6:	681b      	ldr	r3, [r3, #0]
 80223a8:	f003 0302 	and.w	r3, r3, #2
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d00a      	beq.n	80223c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80223b0:	4b8d      	ldr	r3, [pc, #564]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80223b6:	f023 020c 	bic.w	r2, r3, #12
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80223be:	498a      	ldr	r1, [pc, #552]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223c0:	4313      	orrs	r3, r2
 80223c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	681b      	ldr	r3, [r3, #0]
 80223ca:	f003 0304 	and.w	r3, r3, #4
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d00a      	beq.n	80223e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80223d2:	4b85      	ldr	r3, [pc, #532]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80223d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80223e0:	4981      	ldr	r1, [pc, #516]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223e2:	4313      	orrs	r3, r2
 80223e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	f003 0308 	and.w	r3, r3, #8
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d00a      	beq.n	802240a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80223f4:	4b7c      	ldr	r3, [pc, #496]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80223fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022402:	4979      	ldr	r1, [pc, #484]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022404:	4313      	orrs	r3, r2
 8022406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	f003 0310 	and.w	r3, r3, #16
 8022412:	2b00      	cmp	r3, #0
 8022414:	d00a      	beq.n	802242c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8022416:	4b74      	ldr	r3, [pc, #464]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022424:	4970      	ldr	r1, [pc, #448]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022426:	4313      	orrs	r3, r2
 8022428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	f003 0320 	and.w	r3, r3, #32
 8022434:	2b00      	cmp	r3, #0
 8022436:	d00a      	beq.n	802244e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8022438:	4b6b      	ldr	r3, [pc, #428]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802243e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022446:	4968      	ldr	r1, [pc, #416]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022448:	4313      	orrs	r3, r2
 802244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	681b      	ldr	r3, [r3, #0]
 8022452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022456:	2b00      	cmp	r3, #0
 8022458:	d00a      	beq.n	8022470 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802245a:	4b63      	ldr	r3, [pc, #396]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022468:	495f      	ldr	r1, [pc, #380]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802246a:	4313      	orrs	r3, r2
 802246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	681b      	ldr	r3, [r3, #0]
 8022474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022478:	2b00      	cmp	r3, #0
 802247a:	d00a      	beq.n	8022492 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802247c:	4b5a      	ldr	r3, [pc, #360]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802248a:	4957      	ldr	r1, [pc, #348]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802248c:	4313      	orrs	r3, r2
 802248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802249a:	2b00      	cmp	r3, #0
 802249c:	d00a      	beq.n	80224b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 802249e:	4b52      	ldr	r3, [pc, #328]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80224ac:	494e      	ldr	r1, [pc, #312]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224ae:	4313      	orrs	r3, r2
 80224b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	681b      	ldr	r3, [r3, #0]
 80224b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d031      	beq.n	8022524 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80224c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80224c8:	d00e      	beq.n	80224e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80224ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80224ce:	d814      	bhi.n	80224fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d015      	beq.n	8022500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80224d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80224d8:	d10f      	bne.n	80224fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80224da:	4b43      	ldr	r3, [pc, #268]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224dc:	68db      	ldr	r3, [r3, #12]
 80224de:	4a42      	ldr	r2, [pc, #264]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80224e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80224e6:	e00c      	b.n	8022502 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	3304      	adds	r3, #4
 80224ec:	2100      	movs	r1, #0
 80224ee:	4618      	mov	r0, r3
 80224f0:	f000 f97c 	bl	80227ec <RCCEx_PLLSAI1_Config>
 80224f4:	4603      	mov	r3, r0
 80224f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80224f8:	e003      	b.n	8022502 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80224fa:	2301      	movs	r3, #1
 80224fc:	77fb      	strb	r3, [r7, #31]
        break;
 80224fe:	e000      	b.n	8022502 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8022500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022502:	7ffb      	ldrb	r3, [r7, #31]
 8022504:	2b00      	cmp	r3, #0
 8022506:	d10b      	bne.n	8022520 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8022508:	4b37      	ldr	r3, [pc, #220]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802250e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022516:	4934      	ldr	r1, [pc, #208]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022518:	4313      	orrs	r3, r2
 802251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802251e:	e001      	b.n	8022524 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022520:	7ffb      	ldrb	r3, [r7, #31]
 8022522:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802252c:	2b00      	cmp	r3, #0
 802252e:	d00a      	beq.n	8022546 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8022530:	4b2d      	ldr	r3, [pc, #180]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802253e:	492a      	ldr	r1, [pc, #168]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022540:	4313      	orrs	r3, r2
 8022542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802254e:	2b00      	cmp	r3, #0
 8022550:	d00a      	beq.n	8022568 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8022552:	4b25      	ldr	r3, [pc, #148]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022560:	4921      	ldr	r1, [pc, #132]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022562:	4313      	orrs	r3, r2
 8022564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8022568:	687b      	ldr	r3, [r7, #4]
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022570:	2b00      	cmp	r3, #0
 8022572:	d00a      	beq.n	802258a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8022574:	4b1c      	ldr	r3, [pc, #112]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802257a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022582:	4919      	ldr	r1, [pc, #100]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022584:	4313      	orrs	r3, r2
 8022586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022592:	2b00      	cmp	r3, #0
 8022594:	d00a      	beq.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8022596:	4b14      	ldr	r3, [pc, #80]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802259c:	f023 0203 	bic.w	r2, r3, #3
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80225a4:	4910      	ldr	r1, [pc, #64]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225a6:	4313      	orrs	r3, r2
 80225a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d02b      	beq.n	8022610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80225b8:	4b0b      	ldr	r3, [pc, #44]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80225be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80225c6:	4908      	ldr	r1, [pc, #32]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225c8:	4313      	orrs	r3, r2
 80225ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80225d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80225d6:	d109      	bne.n	80225ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80225d8:	4b03      	ldr	r3, [pc, #12]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225da:	68db      	ldr	r3, [r3, #12]
 80225dc:	4a02      	ldr	r2, [pc, #8]	; (80225e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80225e2:	60d3      	str	r3, [r2, #12]
 80225e4:	e014      	b.n	8022610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80225e6:	bf00      	nop
 80225e8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80225f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80225f4:	d10c      	bne.n	8022610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	3304      	adds	r3, #4
 80225fa:	2101      	movs	r1, #1
 80225fc:	4618      	mov	r0, r3
 80225fe:	f000 f8f5 	bl	80227ec <RCCEx_PLLSAI1_Config>
 8022602:	4603      	mov	r3, r0
 8022604:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8022606:	7ffb      	ldrb	r3, [r7, #31]
 8022608:	2b00      	cmp	r3, #0
 802260a:	d001      	beq.n	8022610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 802260c:	7ffb      	ldrb	r3, [r7, #31]
 802260e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022618:	2b00      	cmp	r3, #0
 802261a:	d04a      	beq.n	80226b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022624:	d108      	bne.n	8022638 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8022626:	4b70      	ldr	r3, [pc, #448]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802262c:	4a6e      	ldr	r2, [pc, #440]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802262e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022632:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8022636:	e012      	b.n	802265e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8022638:	4b6b      	ldr	r3, [pc, #428]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802263e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022646:	4968      	ldr	r1, [pc, #416]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022648:	4313      	orrs	r3, r2
 802264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802264e:	4b66      	ldr	r3, [pc, #408]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022654:	4a64      	ldr	r2, [pc, #400]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802265a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8022666:	d10d      	bne.n	8022684 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	3304      	adds	r3, #4
 802266c:	2101      	movs	r1, #1
 802266e:	4618      	mov	r0, r3
 8022670:	f000 f8bc 	bl	80227ec <RCCEx_PLLSAI1_Config>
 8022674:	4603      	mov	r3, r0
 8022676:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022678:	7ffb      	ldrb	r3, [r7, #31]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d019      	beq.n	80226b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 802267e:	7ffb      	ldrb	r3, [r7, #31]
 8022680:	77bb      	strb	r3, [r7, #30]
 8022682:	e016      	b.n	80226b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802268c:	d106      	bne.n	802269c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 802268e:	4b56      	ldr	r3, [pc, #344]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022690:	68db      	ldr	r3, [r3, #12]
 8022692:	4a55      	ldr	r2, [pc, #340]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022698:	60d3      	str	r3, [r2, #12]
 802269a:	e00a      	b.n	80226b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80226a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80226a4:	d105      	bne.n	80226b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80226a6:	4b50      	ldr	r3, [pc, #320]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226a8:	68db      	ldr	r3, [r3, #12]
 80226aa:	4a4f      	ldr	r2, [pc, #316]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80226b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d028      	beq.n	8022710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80226be:	4b4a      	ldr	r3, [pc, #296]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80226c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80226cc:	4946      	ldr	r1, [pc, #280]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226ce:	4313      	orrs	r3, r2
 80226d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80226d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80226dc:	d106      	bne.n	80226ec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80226de:	4b42      	ldr	r3, [pc, #264]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226e0:	68db      	ldr	r3, [r3, #12]
 80226e2:	4a41      	ldr	r2, [pc, #260]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226e8:	60d3      	str	r3, [r2, #12]
 80226ea:	e011      	b.n	8022710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80226f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80226f4:	d10c      	bne.n	8022710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	3304      	adds	r3, #4
 80226fa:	2101      	movs	r1, #1
 80226fc:	4618      	mov	r0, r3
 80226fe:	f000 f875 	bl	80227ec <RCCEx_PLLSAI1_Config>
 8022702:	4603      	mov	r3, r0
 8022704:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022706:	7ffb      	ldrb	r3, [r7, #31]
 8022708:	2b00      	cmp	r3, #0
 802270a:	d001      	beq.n	8022710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 802270c:	7ffb      	ldrb	r3, [r7, #31]
 802270e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022718:	2b00      	cmp	r3, #0
 802271a:	d01e      	beq.n	802275a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 802271c:	4b32      	ldr	r3, [pc, #200]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802272c:	492e      	ldr	r1, [pc, #184]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802272e:	4313      	orrs	r3, r2
 8022730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802273a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802273e:	d10c      	bne.n	802275a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	3304      	adds	r3, #4
 8022744:	2102      	movs	r1, #2
 8022746:	4618      	mov	r0, r3
 8022748:	f000 f850 	bl	80227ec <RCCEx_PLLSAI1_Config>
 802274c:	4603      	mov	r3, r0
 802274e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022750:	7ffb      	ldrb	r3, [r7, #31]
 8022752:	2b00      	cmp	r3, #0
 8022754:	d001      	beq.n	802275a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8022756:	7ffb      	ldrb	r3, [r7, #31]
 8022758:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022762:	2b00      	cmp	r3, #0
 8022764:	d00b      	beq.n	802277e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8022766:	4b20      	ldr	r3, [pc, #128]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802276c:	f023 0204 	bic.w	r2, r3, #4
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022776:	491c      	ldr	r1, [pc, #112]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022778:	4313      	orrs	r3, r2
 802277a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022786:	2b00      	cmp	r3, #0
 8022788:	d00b      	beq.n	80227a2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 802278a:	4b17      	ldr	r3, [pc, #92]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802278c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022790:	f023 0218 	bic.w	r2, r3, #24
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802279a:	4913      	ldr	r1, [pc, #76]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802279c:	4313      	orrs	r3, r2
 802279e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d017      	beq.n	80227de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80227ae:	4b0e      	ldr	r3, [pc, #56]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80227b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80227be:	490a      	ldr	r1, [pc, #40]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227c0:	4313      	orrs	r3, r2
 80227c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80227cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80227d0:	d105      	bne.n	80227de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80227d2:	4b05      	ldr	r3, [pc, #20]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227d4:	68db      	ldr	r3, [r3, #12]
 80227d6:	4a04      	ldr	r2, [pc, #16]	; (80227e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80227dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80227de:	7fbb      	ldrb	r3, [r7, #30]
}
 80227e0:	4618      	mov	r0, r3
 80227e2:	3720      	adds	r7, #32
 80227e4:	46bd      	mov	sp, r7
 80227e6:	bd80      	pop	{r7, pc}
 80227e8:	40021000 	.word	0x40021000

080227ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80227ec:	b580      	push	{r7, lr}
 80227ee:	b084      	sub	sp, #16
 80227f0:	af00      	add	r7, sp, #0
 80227f2:	6078      	str	r0, [r7, #4]
 80227f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80227f6:	2300      	movs	r3, #0
 80227f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	2b03      	cmp	r3, #3
 8022800:	d018      	beq.n	8022834 <RCCEx_PLLSAI1_Config+0x48>
 8022802:	2b03      	cmp	r3, #3
 8022804:	d81f      	bhi.n	8022846 <RCCEx_PLLSAI1_Config+0x5a>
 8022806:	2b01      	cmp	r3, #1
 8022808:	d002      	beq.n	8022810 <RCCEx_PLLSAI1_Config+0x24>
 802280a:	2b02      	cmp	r3, #2
 802280c:	d009      	beq.n	8022822 <RCCEx_PLLSAI1_Config+0x36>
 802280e:	e01a      	b.n	8022846 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8022810:	4b65      	ldr	r3, [pc, #404]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	f003 0302 	and.w	r3, r3, #2
 8022818:	2b00      	cmp	r3, #0
 802281a:	d117      	bne.n	802284c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 802281c:	2301      	movs	r3, #1
 802281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022820:	e014      	b.n	802284c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8022822:	4b61      	ldr	r3, [pc, #388]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802282a:	2b00      	cmp	r3, #0
 802282c:	d110      	bne.n	8022850 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 802282e:	2301      	movs	r3, #1
 8022830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022832:	e00d      	b.n	8022850 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8022834:	4b5c      	ldr	r3, [pc, #368]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022836:	681b      	ldr	r3, [r3, #0]
 8022838:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 802283c:	2b00      	cmp	r3, #0
 802283e:	d109      	bne.n	8022854 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8022840:	2301      	movs	r3, #1
 8022842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022844:	e006      	b.n	8022854 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8022846:	2301      	movs	r3, #1
 8022848:	73fb      	strb	r3, [r7, #15]
      break;
 802284a:	e004      	b.n	8022856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 802284c:	bf00      	nop
 802284e:	e002      	b.n	8022856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8022850:	bf00      	nop
 8022852:	e000      	b.n	8022856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8022854:	bf00      	nop
  }

  if (status == HAL_OK)
 8022856:	7bfb      	ldrb	r3, [r7, #15]
 8022858:	2b00      	cmp	r3, #0
 802285a:	f040 809f 	bne.w	802299c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 802285e:	4b52      	ldr	r3, [pc, #328]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022860:	681b      	ldr	r3, [r3, #0]
 8022862:	4a51      	ldr	r2, [pc, #324]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8022868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802286a:	f7fe f973 	bl	8020b54 <HAL_GetTick>
 802286e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8022870:	e00f      	b.n	8022892 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022872:	f7fe f96f 	bl	8020b54 <HAL_GetTick>
 8022876:	4602      	mov	r2, r0
 8022878:	68bb      	ldr	r3, [r7, #8]
 802287a:	1ad3      	subs	r3, r2, r3
 802287c:	2b02      	cmp	r3, #2
 802287e:	d908      	bls.n	8022892 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8022880:	4b49      	ldr	r3, [pc, #292]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022888:	2b00      	cmp	r3, #0
 802288a:	d009      	beq.n	80228a0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 802288c:	2303      	movs	r3, #3
 802288e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8022890:	e006      	b.n	80228a0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8022892:	4b45      	ldr	r3, [pc, #276]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802289a:	2b00      	cmp	r3, #0
 802289c:	d1e9      	bne.n	8022872 <RCCEx_PLLSAI1_Config+0x86>
 802289e:	e000      	b.n	80228a2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80228a0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80228a2:	7bfb      	ldrb	r3, [r7, #15]
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d179      	bne.n	802299c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80228a8:	683b      	ldr	r3, [r7, #0]
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d116      	bne.n	80228dc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80228ae:	4b3e      	ldr	r3, [pc, #248]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228b0:	691a      	ldr	r2, [r3, #16]
 80228b2:	4b3e      	ldr	r3, [pc, #248]	; (80229ac <RCCEx_PLLSAI1_Config+0x1c0>)
 80228b4:	4013      	ands	r3, r2
 80228b6:	687a      	ldr	r2, [r7, #4]
 80228b8:	6892      	ldr	r2, [r2, #8]
 80228ba:	0211      	lsls	r1, r2, #8
 80228bc:	687a      	ldr	r2, [r7, #4]
 80228be:	68d2      	ldr	r2, [r2, #12]
 80228c0:	06d2      	lsls	r2, r2, #27
 80228c2:	4311      	orrs	r1, r2
 80228c4:	687a      	ldr	r2, [r7, #4]
 80228c6:	6852      	ldr	r2, [r2, #4]
 80228c8:	3a01      	subs	r2, #1
 80228ca:	0112      	lsls	r2, r2, #4
 80228cc:	4311      	orrs	r1, r2
 80228ce:	687a      	ldr	r2, [r7, #4]
 80228d0:	6812      	ldr	r2, [r2, #0]
 80228d2:	430a      	orrs	r2, r1
 80228d4:	4934      	ldr	r1, [pc, #208]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228d6:	4313      	orrs	r3, r2
 80228d8:	610b      	str	r3, [r1, #16]
 80228da:	e033      	b.n	8022944 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80228dc:	683b      	ldr	r3, [r7, #0]
 80228de:	2b01      	cmp	r3, #1
 80228e0:	d118      	bne.n	8022914 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80228e2:	4b31      	ldr	r3, [pc, #196]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228e4:	691a      	ldr	r2, [r3, #16]
 80228e6:	4b32      	ldr	r3, [pc, #200]	; (80229b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 80228e8:	4013      	ands	r3, r2
 80228ea:	687a      	ldr	r2, [r7, #4]
 80228ec:	6892      	ldr	r2, [r2, #8]
 80228ee:	0211      	lsls	r1, r2, #8
 80228f0:	687a      	ldr	r2, [r7, #4]
 80228f2:	6912      	ldr	r2, [r2, #16]
 80228f4:	0852      	lsrs	r2, r2, #1
 80228f6:	3a01      	subs	r2, #1
 80228f8:	0552      	lsls	r2, r2, #21
 80228fa:	4311      	orrs	r1, r2
 80228fc:	687a      	ldr	r2, [r7, #4]
 80228fe:	6852      	ldr	r2, [r2, #4]
 8022900:	3a01      	subs	r2, #1
 8022902:	0112      	lsls	r2, r2, #4
 8022904:	4311      	orrs	r1, r2
 8022906:	687a      	ldr	r2, [r7, #4]
 8022908:	6812      	ldr	r2, [r2, #0]
 802290a:	430a      	orrs	r2, r1
 802290c:	4926      	ldr	r1, [pc, #152]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 802290e:	4313      	orrs	r3, r2
 8022910:	610b      	str	r3, [r1, #16]
 8022912:	e017      	b.n	8022944 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8022914:	4b24      	ldr	r3, [pc, #144]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022916:	691a      	ldr	r2, [r3, #16]
 8022918:	4b26      	ldr	r3, [pc, #152]	; (80229b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 802291a:	4013      	ands	r3, r2
 802291c:	687a      	ldr	r2, [r7, #4]
 802291e:	6892      	ldr	r2, [r2, #8]
 8022920:	0211      	lsls	r1, r2, #8
 8022922:	687a      	ldr	r2, [r7, #4]
 8022924:	6952      	ldr	r2, [r2, #20]
 8022926:	0852      	lsrs	r2, r2, #1
 8022928:	3a01      	subs	r2, #1
 802292a:	0652      	lsls	r2, r2, #25
 802292c:	4311      	orrs	r1, r2
 802292e:	687a      	ldr	r2, [r7, #4]
 8022930:	6852      	ldr	r2, [r2, #4]
 8022932:	3a01      	subs	r2, #1
 8022934:	0112      	lsls	r2, r2, #4
 8022936:	4311      	orrs	r1, r2
 8022938:	687a      	ldr	r2, [r7, #4]
 802293a:	6812      	ldr	r2, [r2, #0]
 802293c:	430a      	orrs	r2, r1
 802293e:	491a      	ldr	r1, [pc, #104]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022940:	4313      	orrs	r3, r2
 8022942:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8022944:	4b18      	ldr	r3, [pc, #96]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	4a17      	ldr	r2, [pc, #92]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 802294a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802294e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022950:	f7fe f900 	bl	8020b54 <HAL_GetTick>
 8022954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8022956:	e00f      	b.n	8022978 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022958:	f7fe f8fc 	bl	8020b54 <HAL_GetTick>
 802295c:	4602      	mov	r2, r0
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	1ad3      	subs	r3, r2, r3
 8022962:	2b02      	cmp	r3, #2
 8022964:	d908      	bls.n	8022978 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8022966:	4b10      	ldr	r3, [pc, #64]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802296e:	2b00      	cmp	r3, #0
 8022970:	d109      	bne.n	8022986 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8022972:	2303      	movs	r3, #3
 8022974:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8022976:	e006      	b.n	8022986 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8022978:	4b0b      	ldr	r3, [pc, #44]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022980:	2b00      	cmp	r3, #0
 8022982:	d0e9      	beq.n	8022958 <RCCEx_PLLSAI1_Config+0x16c>
 8022984:	e000      	b.n	8022988 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8022986:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8022988:	7bfb      	ldrb	r3, [r7, #15]
 802298a:	2b00      	cmp	r3, #0
 802298c:	d106      	bne.n	802299c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 802298e:	4b06      	ldr	r3, [pc, #24]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022990:	691a      	ldr	r2, [r3, #16]
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	699b      	ldr	r3, [r3, #24]
 8022996:	4904      	ldr	r1, [pc, #16]	; (80229a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022998:	4313      	orrs	r3, r2
 802299a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 802299c:	7bfb      	ldrb	r3, [r7, #15]
}
 802299e:	4618      	mov	r0, r3
 80229a0:	3710      	adds	r7, #16
 80229a2:	46bd      	mov	sp, r7
 80229a4:	bd80      	pop	{r7, pc}
 80229a6:	bf00      	nop
 80229a8:	40021000 	.word	0x40021000
 80229ac:	07ff800c 	.word	0x07ff800c
 80229b0:	ff9f800c 	.word	0xff9f800c
 80229b4:	f9ff800c 	.word	0xf9ff800c

080229b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b084      	sub	sp, #16
 80229bc:	af00      	add	r7, sp, #0
 80229be:	6078      	str	r0, [r7, #4]
 80229c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80229c2:	2300      	movs	r3, #0
 80229c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	2b03      	cmp	r3, #3
 80229cc:	d018      	beq.n	8022a00 <RCCEx_PLLSAI2_Config+0x48>
 80229ce:	2b03      	cmp	r3, #3
 80229d0:	d81f      	bhi.n	8022a12 <RCCEx_PLLSAI2_Config+0x5a>
 80229d2:	2b01      	cmp	r3, #1
 80229d4:	d002      	beq.n	80229dc <RCCEx_PLLSAI2_Config+0x24>
 80229d6:	2b02      	cmp	r3, #2
 80229d8:	d009      	beq.n	80229ee <RCCEx_PLLSAI2_Config+0x36>
 80229da:	e01a      	b.n	8022a12 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80229dc:	4b4a      	ldr	r3, [pc, #296]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	f003 0302 	and.w	r3, r3, #2
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d117      	bne.n	8022a18 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80229e8:	2301      	movs	r3, #1
 80229ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80229ec:	e014      	b.n	8022a18 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80229ee:	4b46      	ldr	r3, [pc, #280]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d110      	bne.n	8022a1c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80229fa:	2301      	movs	r3, #1
 80229fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80229fe:	e00d      	b.n	8022a1c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8022a00:	4b41      	ldr	r3, [pc, #260]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	d109      	bne.n	8022a20 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8022a0c:	2301      	movs	r3, #1
 8022a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022a10:	e006      	b.n	8022a20 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8022a12:	2301      	movs	r3, #1
 8022a14:	73fb      	strb	r3, [r7, #15]
      break;
 8022a16:	e004      	b.n	8022a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a18:	bf00      	nop
 8022a1a:	e002      	b.n	8022a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a1c:	bf00      	nop
 8022a1e:	e000      	b.n	8022a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a20:	bf00      	nop
  }

  if (status == HAL_OK)
 8022a22:	7bfb      	ldrb	r3, [r7, #15]
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d169      	bne.n	8022afc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8022a28:	4b37      	ldr	r3, [pc, #220]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	4a36      	ldr	r2, [pc, #216]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022a34:	f7fe f88e 	bl	8020b54 <HAL_GetTick>
 8022a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022a3a:	e00f      	b.n	8022a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022a3c:	f7fe f88a 	bl	8020b54 <HAL_GetTick>
 8022a40:	4602      	mov	r2, r0
 8022a42:	68bb      	ldr	r3, [r7, #8]
 8022a44:	1ad3      	subs	r3, r2, r3
 8022a46:	2b02      	cmp	r3, #2
 8022a48:	d908      	bls.n	8022a5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022a4a:	4b2f      	ldr	r3, [pc, #188]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	d009      	beq.n	8022a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8022a56:	2303      	movs	r3, #3
 8022a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8022a5a:	e006      	b.n	8022a6a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022a5c:	4b2a      	ldr	r3, [pc, #168]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022a64:	2b00      	cmp	r3, #0
 8022a66:	d1e9      	bne.n	8022a3c <RCCEx_PLLSAI2_Config+0x84>
 8022a68:	e000      	b.n	8022a6c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8022a6a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8022a6c:	7bfb      	ldrb	r3, [r7, #15]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d144      	bne.n	8022afc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8022a72:	683b      	ldr	r3, [r7, #0]
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d115      	bne.n	8022aa4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8022a78:	4b23      	ldr	r3, [pc, #140]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022a7a:	695a      	ldr	r2, [r3, #20]
 8022a7c:	4b23      	ldr	r3, [pc, #140]	; (8022b0c <RCCEx_PLLSAI2_Config+0x154>)
 8022a7e:	4013      	ands	r3, r2
 8022a80:	687a      	ldr	r2, [r7, #4]
 8022a82:	6892      	ldr	r2, [r2, #8]
 8022a84:	0211      	lsls	r1, r2, #8
 8022a86:	687a      	ldr	r2, [r7, #4]
 8022a88:	68d2      	ldr	r2, [r2, #12]
 8022a8a:	06d2      	lsls	r2, r2, #27
 8022a8c:	4311      	orrs	r1, r2
 8022a8e:	687a      	ldr	r2, [r7, #4]
 8022a90:	6852      	ldr	r2, [r2, #4]
 8022a92:	3a01      	subs	r2, #1
 8022a94:	0112      	lsls	r2, r2, #4
 8022a96:	4311      	orrs	r1, r2
 8022a98:	687a      	ldr	r2, [r7, #4]
 8022a9a:	6812      	ldr	r2, [r2, #0]
 8022a9c:	430a      	orrs	r2, r1
 8022a9e:	491a      	ldr	r1, [pc, #104]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022aa0:	4313      	orrs	r3, r2
 8022aa2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8022aa4:	4b18      	ldr	r3, [pc, #96]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	4a17      	ldr	r2, [pc, #92]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022ab0:	f7fe f850 	bl	8020b54 <HAL_GetTick>
 8022ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022ab6:	e00f      	b.n	8022ad8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022ab8:	f7fe f84c 	bl	8020b54 <HAL_GetTick>
 8022abc:	4602      	mov	r2, r0
 8022abe:	68bb      	ldr	r3, [r7, #8]
 8022ac0:	1ad3      	subs	r3, r2, r3
 8022ac2:	2b02      	cmp	r3, #2
 8022ac4:	d908      	bls.n	8022ad8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022ac6:	4b10      	ldr	r3, [pc, #64]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022ac8:	681b      	ldr	r3, [r3, #0]
 8022aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	d109      	bne.n	8022ae6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8022ad2:	2303      	movs	r3, #3
 8022ad4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8022ad6:	e006      	b.n	8022ae6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022ad8:	4b0b      	ldr	r3, [pc, #44]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022ada:	681b      	ldr	r3, [r3, #0]
 8022adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d0e9      	beq.n	8022ab8 <RCCEx_PLLSAI2_Config+0x100>
 8022ae4:	e000      	b.n	8022ae8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8022ae6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8022ae8:	7bfb      	ldrb	r3, [r7, #15]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d106      	bne.n	8022afc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8022aee:	4b06      	ldr	r3, [pc, #24]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022af0:	695a      	ldr	r2, [r3, #20]
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	691b      	ldr	r3, [r3, #16]
 8022af6:	4904      	ldr	r1, [pc, #16]	; (8022b08 <RCCEx_PLLSAI2_Config+0x150>)
 8022af8:	4313      	orrs	r3, r2
 8022afa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8022afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8022afe:	4618      	mov	r0, r3
 8022b00:	3710      	adds	r7, #16
 8022b02:	46bd      	mov	sp, r7
 8022b04:	bd80      	pop	{r7, pc}
 8022b06:	bf00      	nop
 8022b08:	40021000 	.word	0x40021000
 8022b0c:	07ff800c 	.word	0x07ff800c

08022b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022b10:	b580      	push	{r7, lr}
 8022b12:	b082      	sub	sp, #8
 8022b14:	af00      	add	r7, sp, #0
 8022b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d101      	bne.n	8022b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022b1e:	2301      	movs	r3, #1
 8022b20:	e042      	b.n	8022ba8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d106      	bne.n	8022b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	2200      	movs	r2, #0
 8022b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022b34:	6878      	ldr	r0, [r7, #4]
 8022b36:	f7fd fe2f 	bl	8020798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	2224      	movs	r2, #36	; 0x24
 8022b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	681a      	ldr	r2, [r3, #0]
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	f022 0201 	bic.w	r2, r2, #1
 8022b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	d002      	beq.n	8022b60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8022b5a:	6878      	ldr	r0, [r7, #4]
 8022b5c:	f000 fbb6 	bl	80232cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022b60:	6878      	ldr	r0, [r7, #4]
 8022b62:	f000 f8b3 	bl	8022ccc <UART_SetConfig>
 8022b66:	4603      	mov	r3, r0
 8022b68:	2b01      	cmp	r3, #1
 8022b6a:	d101      	bne.n	8022b70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8022b6c:	2301      	movs	r3, #1
 8022b6e:	e01b      	b.n	8022ba8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	681b      	ldr	r3, [r3, #0]
 8022b74:	685a      	ldr	r2, [r3, #4]
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	689a      	ldr	r2, [r3, #8]
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	681b      	ldr	r3, [r3, #0]
 8022b94:	681a      	ldr	r2, [r3, #0]
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	f042 0201 	orr.w	r2, r2, #1
 8022b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022ba0:	6878      	ldr	r0, [r7, #4]
 8022ba2:	f000 fc35 	bl	8023410 <UART_CheckIdleState>
 8022ba6:	4603      	mov	r3, r0
}
 8022ba8:	4618      	mov	r0, r3
 8022baa:	3708      	adds	r7, #8
 8022bac:	46bd      	mov	sp, r7
 8022bae:	bd80      	pop	{r7, pc}

08022bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022bb0:	b580      	push	{r7, lr}
 8022bb2:	b08a      	sub	sp, #40	; 0x28
 8022bb4:	af02      	add	r7, sp, #8
 8022bb6:	60f8      	str	r0, [r7, #12]
 8022bb8:	60b9      	str	r1, [r7, #8]
 8022bba:	603b      	str	r3, [r7, #0]
 8022bbc:	4613      	mov	r3, r2
 8022bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022bc6:	2b20      	cmp	r3, #32
 8022bc8:	d17b      	bne.n	8022cc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8022bca:	68bb      	ldr	r3, [r7, #8]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d002      	beq.n	8022bd6 <HAL_UART_Transmit+0x26>
 8022bd0:	88fb      	ldrh	r3, [r7, #6]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d101      	bne.n	8022bda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8022bd6:	2301      	movs	r3, #1
 8022bd8:	e074      	b.n	8022cc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	2200      	movs	r2, #0
 8022bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022be2:	68fb      	ldr	r3, [r7, #12]
 8022be4:	2221      	movs	r2, #33	; 0x21
 8022be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8022bea:	f7fd ffb3 	bl	8020b54 <HAL_GetTick>
 8022bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	88fa      	ldrh	r2, [r7, #6]
 8022bf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8022bf8:	68fb      	ldr	r3, [r7, #12]
 8022bfa:	88fa      	ldrh	r2, [r7, #6]
 8022bfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022c00:	68fb      	ldr	r3, [r7, #12]
 8022c02:	689b      	ldr	r3, [r3, #8]
 8022c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022c08:	d108      	bne.n	8022c1c <HAL_UART_Transmit+0x6c>
 8022c0a:	68fb      	ldr	r3, [r7, #12]
 8022c0c:	691b      	ldr	r3, [r3, #16]
 8022c0e:	2b00      	cmp	r3, #0
 8022c10:	d104      	bne.n	8022c1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8022c12:	2300      	movs	r3, #0
 8022c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8022c16:	68bb      	ldr	r3, [r7, #8]
 8022c18:	61bb      	str	r3, [r7, #24]
 8022c1a:	e003      	b.n	8022c24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8022c1c:	68bb      	ldr	r3, [r7, #8]
 8022c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022c20:	2300      	movs	r3, #0
 8022c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8022c24:	e030      	b.n	8022c88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022c26:	683b      	ldr	r3, [r7, #0]
 8022c28:	9300      	str	r3, [sp, #0]
 8022c2a:	697b      	ldr	r3, [r7, #20]
 8022c2c:	2200      	movs	r2, #0
 8022c2e:	2180      	movs	r1, #128	; 0x80
 8022c30:	68f8      	ldr	r0, [r7, #12]
 8022c32:	f000 fc97 	bl	8023564 <UART_WaitOnFlagUntilTimeout>
 8022c36:	4603      	mov	r3, r0
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	d005      	beq.n	8022c48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8022c3c:	68fb      	ldr	r3, [r7, #12]
 8022c3e:	2220      	movs	r2, #32
 8022c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8022c44:	2303      	movs	r3, #3
 8022c46:	e03d      	b.n	8022cc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8022c48:	69fb      	ldr	r3, [r7, #28]
 8022c4a:	2b00      	cmp	r3, #0
 8022c4c:	d10b      	bne.n	8022c66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8022c4e:	69bb      	ldr	r3, [r7, #24]
 8022c50:	881b      	ldrh	r3, [r3, #0]
 8022c52:	461a      	mov	r2, r3
 8022c54:	68fb      	ldr	r3, [r7, #12]
 8022c56:	681b      	ldr	r3, [r3, #0]
 8022c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022c5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8022c5e:	69bb      	ldr	r3, [r7, #24]
 8022c60:	3302      	adds	r3, #2
 8022c62:	61bb      	str	r3, [r7, #24]
 8022c64:	e007      	b.n	8022c76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8022c66:	69fb      	ldr	r3, [r7, #28]
 8022c68:	781a      	ldrb	r2, [r3, #0]
 8022c6a:	68fb      	ldr	r3, [r7, #12]
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8022c70:	69fb      	ldr	r3, [r7, #28]
 8022c72:	3301      	adds	r3, #1
 8022c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022c76:	68fb      	ldr	r3, [r7, #12]
 8022c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8022c7c:	b29b      	uxth	r3, r3
 8022c7e:	3b01      	subs	r3, #1
 8022c80:	b29a      	uxth	r2, r3
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8022c8e:	b29b      	uxth	r3, r3
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d1c8      	bne.n	8022c26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022c94:	683b      	ldr	r3, [r7, #0]
 8022c96:	9300      	str	r3, [sp, #0]
 8022c98:	697b      	ldr	r3, [r7, #20]
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	2140      	movs	r1, #64	; 0x40
 8022c9e:	68f8      	ldr	r0, [r7, #12]
 8022ca0:	f000 fc60 	bl	8023564 <UART_WaitOnFlagUntilTimeout>
 8022ca4:	4603      	mov	r3, r0
 8022ca6:	2b00      	cmp	r3, #0
 8022ca8:	d005      	beq.n	8022cb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8022caa:	68fb      	ldr	r3, [r7, #12]
 8022cac:	2220      	movs	r2, #32
 8022cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8022cb2:	2303      	movs	r3, #3
 8022cb4:	e006      	b.n	8022cc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022cb6:	68fb      	ldr	r3, [r7, #12]
 8022cb8:	2220      	movs	r2, #32
 8022cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8022cbe:	2300      	movs	r3, #0
 8022cc0:	e000      	b.n	8022cc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8022cc2:	2302      	movs	r3, #2
  }
}
 8022cc4:	4618      	mov	r0, r3
 8022cc6:	3720      	adds	r7, #32
 8022cc8:	46bd      	mov	sp, r7
 8022cca:	bd80      	pop	{r7, pc}

08022ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022cd0:	b08c      	sub	sp, #48	; 0x30
 8022cd2:	af00      	add	r7, sp, #0
 8022cd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8022cd6:	2300      	movs	r3, #0
 8022cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022cdc:	697b      	ldr	r3, [r7, #20]
 8022cde:	689a      	ldr	r2, [r3, #8]
 8022ce0:	697b      	ldr	r3, [r7, #20]
 8022ce2:	691b      	ldr	r3, [r3, #16]
 8022ce4:	431a      	orrs	r2, r3
 8022ce6:	697b      	ldr	r3, [r7, #20]
 8022ce8:	695b      	ldr	r3, [r3, #20]
 8022cea:	431a      	orrs	r2, r3
 8022cec:	697b      	ldr	r3, [r7, #20]
 8022cee:	69db      	ldr	r3, [r3, #28]
 8022cf0:	4313      	orrs	r3, r2
 8022cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022cf4:	697b      	ldr	r3, [r7, #20]
 8022cf6:	681b      	ldr	r3, [r3, #0]
 8022cf8:	681a      	ldr	r2, [r3, #0]
 8022cfa:	4baa      	ldr	r3, [pc, #680]	; (8022fa4 <UART_SetConfig+0x2d8>)
 8022cfc:	4013      	ands	r3, r2
 8022cfe:	697a      	ldr	r2, [r7, #20]
 8022d00:	6812      	ldr	r2, [r2, #0]
 8022d02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022d04:	430b      	orrs	r3, r1
 8022d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022d08:	697b      	ldr	r3, [r7, #20]
 8022d0a:	681b      	ldr	r3, [r3, #0]
 8022d0c:	685b      	ldr	r3, [r3, #4]
 8022d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022d12:	697b      	ldr	r3, [r7, #20]
 8022d14:	68da      	ldr	r2, [r3, #12]
 8022d16:	697b      	ldr	r3, [r7, #20]
 8022d18:	681b      	ldr	r3, [r3, #0]
 8022d1a:	430a      	orrs	r2, r1
 8022d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8022d1e:	697b      	ldr	r3, [r7, #20]
 8022d20:	699b      	ldr	r3, [r3, #24]
 8022d22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8022d24:	697b      	ldr	r3, [r7, #20]
 8022d26:	681b      	ldr	r3, [r3, #0]
 8022d28:	4a9f      	ldr	r2, [pc, #636]	; (8022fa8 <UART_SetConfig+0x2dc>)
 8022d2a:	4293      	cmp	r3, r2
 8022d2c:	d004      	beq.n	8022d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8022d2e:	697b      	ldr	r3, [r7, #20]
 8022d30:	6a1b      	ldr	r3, [r3, #32]
 8022d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022d34:	4313      	orrs	r3, r2
 8022d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8022d38:	697b      	ldr	r3, [r7, #20]
 8022d3a:	681b      	ldr	r3, [r3, #0]
 8022d3c:	689b      	ldr	r3, [r3, #8]
 8022d3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8022d42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8022d46:	697a      	ldr	r2, [r7, #20]
 8022d48:	6812      	ldr	r2, [r2, #0]
 8022d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022d4c:	430b      	orrs	r3, r1
 8022d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8022d50:	697b      	ldr	r3, [r7, #20]
 8022d52:	681b      	ldr	r3, [r3, #0]
 8022d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d56:	f023 010f 	bic.w	r1, r3, #15
 8022d5a:	697b      	ldr	r3, [r7, #20]
 8022d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022d5e:	697b      	ldr	r3, [r7, #20]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	430a      	orrs	r2, r1
 8022d64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022d66:	697b      	ldr	r3, [r7, #20]
 8022d68:	681b      	ldr	r3, [r3, #0]
 8022d6a:	4a90      	ldr	r2, [pc, #576]	; (8022fac <UART_SetConfig+0x2e0>)
 8022d6c:	4293      	cmp	r3, r2
 8022d6e:	d125      	bne.n	8022dbc <UART_SetConfig+0xf0>
 8022d70:	4b8f      	ldr	r3, [pc, #572]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022d76:	f003 0303 	and.w	r3, r3, #3
 8022d7a:	2b03      	cmp	r3, #3
 8022d7c:	d81a      	bhi.n	8022db4 <UART_SetConfig+0xe8>
 8022d7e:	a201      	add	r2, pc, #4	; (adr r2, 8022d84 <UART_SetConfig+0xb8>)
 8022d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d84:	08022d95 	.word	0x08022d95
 8022d88:	08022da5 	.word	0x08022da5
 8022d8c:	08022d9d 	.word	0x08022d9d
 8022d90:	08022dad 	.word	0x08022dad
 8022d94:	2301      	movs	r3, #1
 8022d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022d9a:	e116      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022d9c:	2302      	movs	r3, #2
 8022d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022da2:	e112      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022da4:	2304      	movs	r3, #4
 8022da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022daa:	e10e      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022dac:	2308      	movs	r3, #8
 8022dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022db2:	e10a      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022db4:	2310      	movs	r3, #16
 8022db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022dba:	e106      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022dbc:	697b      	ldr	r3, [r7, #20]
 8022dbe:	681b      	ldr	r3, [r3, #0]
 8022dc0:	4a7c      	ldr	r2, [pc, #496]	; (8022fb4 <UART_SetConfig+0x2e8>)
 8022dc2:	4293      	cmp	r3, r2
 8022dc4:	d138      	bne.n	8022e38 <UART_SetConfig+0x16c>
 8022dc6:	4b7a      	ldr	r3, [pc, #488]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022dcc:	f003 030c 	and.w	r3, r3, #12
 8022dd0:	2b0c      	cmp	r3, #12
 8022dd2:	d82d      	bhi.n	8022e30 <UART_SetConfig+0x164>
 8022dd4:	a201      	add	r2, pc, #4	; (adr r2, 8022ddc <UART_SetConfig+0x110>)
 8022dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022dda:	bf00      	nop
 8022ddc:	08022e11 	.word	0x08022e11
 8022de0:	08022e31 	.word	0x08022e31
 8022de4:	08022e31 	.word	0x08022e31
 8022de8:	08022e31 	.word	0x08022e31
 8022dec:	08022e21 	.word	0x08022e21
 8022df0:	08022e31 	.word	0x08022e31
 8022df4:	08022e31 	.word	0x08022e31
 8022df8:	08022e31 	.word	0x08022e31
 8022dfc:	08022e19 	.word	0x08022e19
 8022e00:	08022e31 	.word	0x08022e31
 8022e04:	08022e31 	.word	0x08022e31
 8022e08:	08022e31 	.word	0x08022e31
 8022e0c:	08022e29 	.word	0x08022e29
 8022e10:	2300      	movs	r3, #0
 8022e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e16:	e0d8      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e18:	2302      	movs	r3, #2
 8022e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e1e:	e0d4      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e20:	2304      	movs	r3, #4
 8022e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e26:	e0d0      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e28:	2308      	movs	r3, #8
 8022e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e2e:	e0cc      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e30:	2310      	movs	r3, #16
 8022e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e36:	e0c8      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e38:	697b      	ldr	r3, [r7, #20]
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	4a5e      	ldr	r2, [pc, #376]	; (8022fb8 <UART_SetConfig+0x2ec>)
 8022e3e:	4293      	cmp	r3, r2
 8022e40:	d125      	bne.n	8022e8e <UART_SetConfig+0x1c2>
 8022e42:	4b5b      	ldr	r3, [pc, #364]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8022e4c:	2b30      	cmp	r3, #48	; 0x30
 8022e4e:	d016      	beq.n	8022e7e <UART_SetConfig+0x1b2>
 8022e50:	2b30      	cmp	r3, #48	; 0x30
 8022e52:	d818      	bhi.n	8022e86 <UART_SetConfig+0x1ba>
 8022e54:	2b20      	cmp	r3, #32
 8022e56:	d00a      	beq.n	8022e6e <UART_SetConfig+0x1a2>
 8022e58:	2b20      	cmp	r3, #32
 8022e5a:	d814      	bhi.n	8022e86 <UART_SetConfig+0x1ba>
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d002      	beq.n	8022e66 <UART_SetConfig+0x19a>
 8022e60:	2b10      	cmp	r3, #16
 8022e62:	d008      	beq.n	8022e76 <UART_SetConfig+0x1aa>
 8022e64:	e00f      	b.n	8022e86 <UART_SetConfig+0x1ba>
 8022e66:	2300      	movs	r3, #0
 8022e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e6c:	e0ad      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e6e:	2302      	movs	r3, #2
 8022e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e74:	e0a9      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e76:	2304      	movs	r3, #4
 8022e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e7c:	e0a5      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e7e:	2308      	movs	r3, #8
 8022e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e84:	e0a1      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e86:	2310      	movs	r3, #16
 8022e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022e8c:	e09d      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022e8e:	697b      	ldr	r3, [r7, #20]
 8022e90:	681b      	ldr	r3, [r3, #0]
 8022e92:	4a4a      	ldr	r2, [pc, #296]	; (8022fbc <UART_SetConfig+0x2f0>)
 8022e94:	4293      	cmp	r3, r2
 8022e96:	d125      	bne.n	8022ee4 <UART_SetConfig+0x218>
 8022e98:	4b45      	ldr	r3, [pc, #276]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8022ea4:	d016      	beq.n	8022ed4 <UART_SetConfig+0x208>
 8022ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8022ea8:	d818      	bhi.n	8022edc <UART_SetConfig+0x210>
 8022eaa:	2b80      	cmp	r3, #128	; 0x80
 8022eac:	d00a      	beq.n	8022ec4 <UART_SetConfig+0x1f8>
 8022eae:	2b80      	cmp	r3, #128	; 0x80
 8022eb0:	d814      	bhi.n	8022edc <UART_SetConfig+0x210>
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d002      	beq.n	8022ebc <UART_SetConfig+0x1f0>
 8022eb6:	2b40      	cmp	r3, #64	; 0x40
 8022eb8:	d008      	beq.n	8022ecc <UART_SetConfig+0x200>
 8022eba:	e00f      	b.n	8022edc <UART_SetConfig+0x210>
 8022ebc:	2300      	movs	r3, #0
 8022ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022ec2:	e082      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022ec4:	2302      	movs	r3, #2
 8022ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022eca:	e07e      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022ecc:	2304      	movs	r3, #4
 8022ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022ed2:	e07a      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022ed4:	2308      	movs	r3, #8
 8022ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022eda:	e076      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022edc:	2310      	movs	r3, #16
 8022ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022ee2:	e072      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022ee4:	697b      	ldr	r3, [r7, #20]
 8022ee6:	681b      	ldr	r3, [r3, #0]
 8022ee8:	4a35      	ldr	r2, [pc, #212]	; (8022fc0 <UART_SetConfig+0x2f4>)
 8022eea:	4293      	cmp	r3, r2
 8022eec:	d12a      	bne.n	8022f44 <UART_SetConfig+0x278>
 8022eee:	4b30      	ldr	r3, [pc, #192]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022efc:	d01a      	beq.n	8022f34 <UART_SetConfig+0x268>
 8022efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022f02:	d81b      	bhi.n	8022f3c <UART_SetConfig+0x270>
 8022f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022f08:	d00c      	beq.n	8022f24 <UART_SetConfig+0x258>
 8022f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022f0e:	d815      	bhi.n	8022f3c <UART_SetConfig+0x270>
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	d003      	beq.n	8022f1c <UART_SetConfig+0x250>
 8022f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022f18:	d008      	beq.n	8022f2c <UART_SetConfig+0x260>
 8022f1a:	e00f      	b.n	8022f3c <UART_SetConfig+0x270>
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f22:	e052      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f24:	2302      	movs	r3, #2
 8022f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f2a:	e04e      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f2c:	2304      	movs	r3, #4
 8022f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f32:	e04a      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f34:	2308      	movs	r3, #8
 8022f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f3a:	e046      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f3c:	2310      	movs	r3, #16
 8022f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f42:	e042      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f44:	697b      	ldr	r3, [r7, #20]
 8022f46:	681b      	ldr	r3, [r3, #0]
 8022f48:	4a17      	ldr	r2, [pc, #92]	; (8022fa8 <UART_SetConfig+0x2dc>)
 8022f4a:	4293      	cmp	r3, r2
 8022f4c:	d13a      	bne.n	8022fc4 <UART_SetConfig+0x2f8>
 8022f4e:	4b18      	ldr	r3, [pc, #96]	; (8022fb0 <UART_SetConfig+0x2e4>)
 8022f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022f54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8022f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8022f5c:	d01a      	beq.n	8022f94 <UART_SetConfig+0x2c8>
 8022f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8022f62:	d81b      	bhi.n	8022f9c <UART_SetConfig+0x2d0>
 8022f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022f68:	d00c      	beq.n	8022f84 <UART_SetConfig+0x2b8>
 8022f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8022f6e:	d815      	bhi.n	8022f9c <UART_SetConfig+0x2d0>
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	d003      	beq.n	8022f7c <UART_SetConfig+0x2b0>
 8022f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022f78:	d008      	beq.n	8022f8c <UART_SetConfig+0x2c0>
 8022f7a:	e00f      	b.n	8022f9c <UART_SetConfig+0x2d0>
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f82:	e022      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f84:	2302      	movs	r3, #2
 8022f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f8a:	e01e      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f8c:	2304      	movs	r3, #4
 8022f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f92:	e01a      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f94:	2308      	movs	r3, #8
 8022f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022f9a:	e016      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022f9c:	2310      	movs	r3, #16
 8022f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fa2:	e012      	b.n	8022fca <UART_SetConfig+0x2fe>
 8022fa4:	cfff69f3 	.word	0xcfff69f3
 8022fa8:	40008000 	.word	0x40008000
 8022fac:	40013800 	.word	0x40013800
 8022fb0:	40021000 	.word	0x40021000
 8022fb4:	40004400 	.word	0x40004400
 8022fb8:	40004800 	.word	0x40004800
 8022fbc:	40004c00 	.word	0x40004c00
 8022fc0:	40005000 	.word	0x40005000
 8022fc4:	2310      	movs	r3, #16
 8022fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8022fca:	697b      	ldr	r3, [r7, #20]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	4ab0      	ldr	r2, [pc, #704]	; (8023290 <UART_SetConfig+0x5c4>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	f040 809b 	bne.w	802310c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8022fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022fda:	2b08      	cmp	r3, #8
 8022fdc:	d827      	bhi.n	802302e <UART_SetConfig+0x362>
 8022fde:	a201      	add	r2, pc, #4	; (adr r2, 8022fe4 <UART_SetConfig+0x318>)
 8022fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fe4:	08023009 	.word	0x08023009
 8022fe8:	08023011 	.word	0x08023011
 8022fec:	08023019 	.word	0x08023019
 8022ff0:	0802302f 	.word	0x0802302f
 8022ff4:	0802301f 	.word	0x0802301f
 8022ff8:	0802302f 	.word	0x0802302f
 8022ffc:	0802302f 	.word	0x0802302f
 8023000:	0802302f 	.word	0x0802302f
 8023004:	08023027 	.word	0x08023027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023008:	f7fe ff72 	bl	8021ef0 <HAL_RCC_GetPCLK1Freq>
 802300c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802300e:	e014      	b.n	802303a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023010:	f7fe ff82 	bl	8021f18 <HAL_RCC_GetPCLK2Freq>
 8023014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023016:	e010      	b.n	802303a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023018:	4b9e      	ldr	r3, [pc, #632]	; (8023294 <UART_SetConfig+0x5c8>)
 802301a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802301c:	e00d      	b.n	802303a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802301e:	f7fe feb5 	bl	8021d8c <HAL_RCC_GetSysClockFreq>
 8023022:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023024:	e009      	b.n	802303a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802302a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802302c:	e005      	b.n	802303a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 802302e:	2300      	movs	r3, #0
 8023030:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8023032:	2301      	movs	r3, #1
 8023034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023038:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802303c:	2b00      	cmp	r3, #0
 802303e:	f000 8130 	beq.w	80232a2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8023042:	697b      	ldr	r3, [r7, #20]
 8023044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023046:	4a94      	ldr	r2, [pc, #592]	; (8023298 <UART_SetConfig+0x5cc>)
 8023048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802304c:	461a      	mov	r2, r3
 802304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023050:	fbb3 f3f2 	udiv	r3, r3, r2
 8023054:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023056:	697b      	ldr	r3, [r7, #20]
 8023058:	685a      	ldr	r2, [r3, #4]
 802305a:	4613      	mov	r3, r2
 802305c:	005b      	lsls	r3, r3, #1
 802305e:	4413      	add	r3, r2
 8023060:	69ba      	ldr	r2, [r7, #24]
 8023062:	429a      	cmp	r2, r3
 8023064:	d305      	bcc.n	8023072 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8023066:	697b      	ldr	r3, [r7, #20]
 8023068:	685b      	ldr	r3, [r3, #4]
 802306a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802306c:	69ba      	ldr	r2, [r7, #24]
 802306e:	429a      	cmp	r2, r3
 8023070:	d903      	bls.n	802307a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8023072:	2301      	movs	r3, #1
 8023074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8023078:	e113      	b.n	80232a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802307c:	2200      	movs	r2, #0
 802307e:	60bb      	str	r3, [r7, #8]
 8023080:	60fa      	str	r2, [r7, #12]
 8023082:	697b      	ldr	r3, [r7, #20]
 8023084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023086:	4a84      	ldr	r2, [pc, #528]	; (8023298 <UART_SetConfig+0x5cc>)
 8023088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802308c:	b29b      	uxth	r3, r3
 802308e:	2200      	movs	r2, #0
 8023090:	603b      	str	r3, [r7, #0]
 8023092:	607a      	str	r2, [r7, #4]
 8023094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023098:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802309c:	f7fd f8ca 	bl	8020234 <__aeabi_uldivmod>
 80230a0:	4602      	mov	r2, r0
 80230a2:	460b      	mov	r3, r1
 80230a4:	4610      	mov	r0, r2
 80230a6:	4619      	mov	r1, r3
 80230a8:	f04f 0200 	mov.w	r2, #0
 80230ac:	f04f 0300 	mov.w	r3, #0
 80230b0:	020b      	lsls	r3, r1, #8
 80230b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80230b6:	0202      	lsls	r2, r0, #8
 80230b8:	6979      	ldr	r1, [r7, #20]
 80230ba:	6849      	ldr	r1, [r1, #4]
 80230bc:	0849      	lsrs	r1, r1, #1
 80230be:	2000      	movs	r0, #0
 80230c0:	460c      	mov	r4, r1
 80230c2:	4605      	mov	r5, r0
 80230c4:	eb12 0804 	adds.w	r8, r2, r4
 80230c8:	eb43 0905 	adc.w	r9, r3, r5
 80230cc:	697b      	ldr	r3, [r7, #20]
 80230ce:	685b      	ldr	r3, [r3, #4]
 80230d0:	2200      	movs	r2, #0
 80230d2:	469a      	mov	sl, r3
 80230d4:	4693      	mov	fp, r2
 80230d6:	4652      	mov	r2, sl
 80230d8:	465b      	mov	r3, fp
 80230da:	4640      	mov	r0, r8
 80230dc:	4649      	mov	r1, r9
 80230de:	f7fd f8a9 	bl	8020234 <__aeabi_uldivmod>
 80230e2:	4602      	mov	r2, r0
 80230e4:	460b      	mov	r3, r1
 80230e6:	4613      	mov	r3, r2
 80230e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80230ea:	6a3b      	ldr	r3, [r7, #32]
 80230ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80230f0:	d308      	bcc.n	8023104 <UART_SetConfig+0x438>
 80230f2:	6a3b      	ldr	r3, [r7, #32]
 80230f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80230f8:	d204      	bcs.n	8023104 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80230fa:	697b      	ldr	r3, [r7, #20]
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	6a3a      	ldr	r2, [r7, #32]
 8023100:	60da      	str	r2, [r3, #12]
 8023102:	e0ce      	b.n	80232a2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8023104:	2301      	movs	r3, #1
 8023106:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 802310a:	e0ca      	b.n	80232a2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802310c:	697b      	ldr	r3, [r7, #20]
 802310e:	69db      	ldr	r3, [r3, #28]
 8023110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023114:	d166      	bne.n	80231e4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8023116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802311a:	2b08      	cmp	r3, #8
 802311c:	d827      	bhi.n	802316e <UART_SetConfig+0x4a2>
 802311e:	a201      	add	r2, pc, #4	; (adr r2, 8023124 <UART_SetConfig+0x458>)
 8023120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023124:	08023149 	.word	0x08023149
 8023128:	08023151 	.word	0x08023151
 802312c:	08023159 	.word	0x08023159
 8023130:	0802316f 	.word	0x0802316f
 8023134:	0802315f 	.word	0x0802315f
 8023138:	0802316f 	.word	0x0802316f
 802313c:	0802316f 	.word	0x0802316f
 8023140:	0802316f 	.word	0x0802316f
 8023144:	08023167 	.word	0x08023167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023148:	f7fe fed2 	bl	8021ef0 <HAL_RCC_GetPCLK1Freq>
 802314c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802314e:	e014      	b.n	802317a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023150:	f7fe fee2 	bl	8021f18 <HAL_RCC_GetPCLK2Freq>
 8023154:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023156:	e010      	b.n	802317a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023158:	4b4e      	ldr	r3, [pc, #312]	; (8023294 <UART_SetConfig+0x5c8>)
 802315a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802315c:	e00d      	b.n	802317a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802315e:	f7fe fe15 	bl	8021d8c <HAL_RCC_GetSysClockFreq>
 8023162:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023164:	e009      	b.n	802317a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802316a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802316c:	e005      	b.n	802317a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 802316e:	2300      	movs	r3, #0
 8023170:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8023172:	2301      	movs	r3, #1
 8023174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802317c:	2b00      	cmp	r3, #0
 802317e:	f000 8090 	beq.w	80232a2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023182:	697b      	ldr	r3, [r7, #20]
 8023184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023186:	4a44      	ldr	r2, [pc, #272]	; (8023298 <UART_SetConfig+0x5cc>)
 8023188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802318c:	461a      	mov	r2, r3
 802318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023190:	fbb3 f3f2 	udiv	r3, r3, r2
 8023194:	005a      	lsls	r2, r3, #1
 8023196:	697b      	ldr	r3, [r7, #20]
 8023198:	685b      	ldr	r3, [r3, #4]
 802319a:	085b      	lsrs	r3, r3, #1
 802319c:	441a      	add	r2, r3
 802319e:	697b      	ldr	r3, [r7, #20]
 80231a0:	685b      	ldr	r3, [r3, #4]
 80231a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80231a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80231a8:	6a3b      	ldr	r3, [r7, #32]
 80231aa:	2b0f      	cmp	r3, #15
 80231ac:	d916      	bls.n	80231dc <UART_SetConfig+0x510>
 80231ae:	6a3b      	ldr	r3, [r7, #32]
 80231b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80231b4:	d212      	bcs.n	80231dc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80231b6:	6a3b      	ldr	r3, [r7, #32]
 80231b8:	b29b      	uxth	r3, r3
 80231ba:	f023 030f 	bic.w	r3, r3, #15
 80231be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80231c0:	6a3b      	ldr	r3, [r7, #32]
 80231c2:	085b      	lsrs	r3, r3, #1
 80231c4:	b29b      	uxth	r3, r3
 80231c6:	f003 0307 	and.w	r3, r3, #7
 80231ca:	b29a      	uxth	r2, r3
 80231cc:	8bfb      	ldrh	r3, [r7, #30]
 80231ce:	4313      	orrs	r3, r2
 80231d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80231d2:	697b      	ldr	r3, [r7, #20]
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	8bfa      	ldrh	r2, [r7, #30]
 80231d8:	60da      	str	r2, [r3, #12]
 80231da:	e062      	b.n	80232a2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80231dc:	2301      	movs	r3, #1
 80231de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80231e2:	e05e      	b.n	80232a2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80231e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80231e8:	2b08      	cmp	r3, #8
 80231ea:	d828      	bhi.n	802323e <UART_SetConfig+0x572>
 80231ec:	a201      	add	r2, pc, #4	; (adr r2, 80231f4 <UART_SetConfig+0x528>)
 80231ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80231f2:	bf00      	nop
 80231f4:	08023219 	.word	0x08023219
 80231f8:	08023221 	.word	0x08023221
 80231fc:	08023229 	.word	0x08023229
 8023200:	0802323f 	.word	0x0802323f
 8023204:	0802322f 	.word	0x0802322f
 8023208:	0802323f 	.word	0x0802323f
 802320c:	0802323f 	.word	0x0802323f
 8023210:	0802323f 	.word	0x0802323f
 8023214:	08023237 	.word	0x08023237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023218:	f7fe fe6a 	bl	8021ef0 <HAL_RCC_GetPCLK1Freq>
 802321c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802321e:	e014      	b.n	802324a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023220:	f7fe fe7a 	bl	8021f18 <HAL_RCC_GetPCLK2Freq>
 8023224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023226:	e010      	b.n	802324a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023228:	4b1a      	ldr	r3, [pc, #104]	; (8023294 <UART_SetConfig+0x5c8>)
 802322a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802322c:	e00d      	b.n	802324a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802322e:	f7fe fdad 	bl	8021d8c <HAL_RCC_GetSysClockFreq>
 8023232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023234:	e009      	b.n	802324a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802323a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802323c:	e005      	b.n	802324a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 802323e:	2300      	movs	r3, #0
 8023240:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8023242:	2301      	movs	r3, #1
 8023244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023248:	bf00      	nop
    }

    if (pclk != 0U)
 802324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802324c:	2b00      	cmp	r3, #0
 802324e:	d028      	beq.n	80232a2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023250:	697b      	ldr	r3, [r7, #20]
 8023252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023254:	4a10      	ldr	r2, [pc, #64]	; (8023298 <UART_SetConfig+0x5cc>)
 8023256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802325a:	461a      	mov	r2, r3
 802325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802325e:	fbb3 f2f2 	udiv	r2, r3, r2
 8023262:	697b      	ldr	r3, [r7, #20]
 8023264:	685b      	ldr	r3, [r3, #4]
 8023266:	085b      	lsrs	r3, r3, #1
 8023268:	441a      	add	r2, r3
 802326a:	697b      	ldr	r3, [r7, #20]
 802326c:	685b      	ldr	r3, [r3, #4]
 802326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8023272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023274:	6a3b      	ldr	r3, [r7, #32]
 8023276:	2b0f      	cmp	r3, #15
 8023278:	d910      	bls.n	802329c <UART_SetConfig+0x5d0>
 802327a:	6a3b      	ldr	r3, [r7, #32]
 802327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023280:	d20c      	bcs.n	802329c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8023282:	6a3b      	ldr	r3, [r7, #32]
 8023284:	b29a      	uxth	r2, r3
 8023286:	697b      	ldr	r3, [r7, #20]
 8023288:	681b      	ldr	r3, [r3, #0]
 802328a:	60da      	str	r2, [r3, #12]
 802328c:	e009      	b.n	80232a2 <UART_SetConfig+0x5d6>
 802328e:	bf00      	nop
 8023290:	40008000 	.word	0x40008000
 8023294:	00f42400 	.word	0x00f42400
 8023298:	080239f8 	.word	0x080239f8
      }
      else
      {
        ret = HAL_ERROR;
 802329c:	2301      	movs	r3, #1
 802329e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80232a2:	697b      	ldr	r3, [r7, #20]
 80232a4:	2201      	movs	r2, #1
 80232a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80232aa:	697b      	ldr	r3, [r7, #20]
 80232ac:	2201      	movs	r2, #1
 80232ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80232b2:	697b      	ldr	r3, [r7, #20]
 80232b4:	2200      	movs	r2, #0
 80232b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80232b8:	697b      	ldr	r3, [r7, #20]
 80232ba:	2200      	movs	r2, #0
 80232bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80232be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80232c2:	4618      	mov	r0, r3
 80232c4:	3730      	adds	r7, #48	; 0x30
 80232c6:	46bd      	mov	sp, r7
 80232c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080232cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80232cc:	b480      	push	{r7}
 80232ce:	b083      	sub	sp, #12
 80232d0:	af00      	add	r7, sp, #0
 80232d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80232d8:	f003 0308 	and.w	r3, r3, #8
 80232dc:	2b00      	cmp	r3, #0
 80232de:	d00a      	beq.n	80232f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	685b      	ldr	r3, [r3, #4]
 80232e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	430a      	orrs	r2, r1
 80232f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80232fa:	f003 0301 	and.w	r3, r3, #1
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d00a      	beq.n	8023318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	681b      	ldr	r3, [r3, #0]
 8023306:	685b      	ldr	r3, [r3, #4]
 8023308:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	681b      	ldr	r3, [r3, #0]
 8023314:	430a      	orrs	r2, r1
 8023316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802331c:	f003 0302 	and.w	r3, r3, #2
 8023320:	2b00      	cmp	r3, #0
 8023322:	d00a      	beq.n	802333a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	685b      	ldr	r3, [r3, #4]
 802332a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802332e:	687b      	ldr	r3, [r7, #4]
 8023330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	681b      	ldr	r3, [r3, #0]
 8023336:	430a      	orrs	r2, r1
 8023338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802333e:	f003 0304 	and.w	r3, r3, #4
 8023342:	2b00      	cmp	r3, #0
 8023344:	d00a      	beq.n	802335c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	685b      	ldr	r3, [r3, #4]
 802334c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	430a      	orrs	r2, r1
 802335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023360:	f003 0310 	and.w	r3, r3, #16
 8023364:	2b00      	cmp	r3, #0
 8023366:	d00a      	beq.n	802337e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	681b      	ldr	r3, [r3, #0]
 802336c:	689b      	ldr	r3, [r3, #8]
 802336e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	430a      	orrs	r2, r1
 802337c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023382:	f003 0320 	and.w	r3, r3, #32
 8023386:	2b00      	cmp	r3, #0
 8023388:	d00a      	beq.n	80233a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	689b      	ldr	r3, [r3, #8]
 8023390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	430a      	orrs	r2, r1
 802339e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d01a      	beq.n	80233e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80233ac:	687b      	ldr	r3, [r7, #4]
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	685b      	ldr	r3, [r3, #4]
 80233b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	430a      	orrs	r2, r1
 80233c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80233c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80233ca:	d10a      	bne.n	80233e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	685b      	ldr	r3, [r3, #4]
 80233d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	681b      	ldr	r3, [r3, #0]
 80233de:	430a      	orrs	r2, r1
 80233e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d00a      	beq.n	8023404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	685b      	ldr	r3, [r3, #4]
 80233f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	430a      	orrs	r2, r1
 8023402:	605a      	str	r2, [r3, #4]
  }
}
 8023404:	bf00      	nop
 8023406:	370c      	adds	r7, #12
 8023408:	46bd      	mov	sp, r7
 802340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802340e:	4770      	bx	lr

08023410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8023410:	b580      	push	{r7, lr}
 8023412:	b098      	sub	sp, #96	; 0x60
 8023414:	af02      	add	r7, sp, #8
 8023416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	2200      	movs	r2, #0
 802341c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8023420:	f7fd fb98 	bl	8020b54 <HAL_GetTick>
 8023424:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023426:	687b      	ldr	r3, [r7, #4]
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	f003 0308 	and.w	r3, r3, #8
 8023430:	2b08      	cmp	r3, #8
 8023432:	d12f      	bne.n	8023494 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8023438:	9300      	str	r3, [sp, #0]
 802343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802343c:	2200      	movs	r2, #0
 802343e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8023442:	6878      	ldr	r0, [r7, #4]
 8023444:	f000 f88e 	bl	8023564 <UART_WaitOnFlagUntilTimeout>
 8023448:	4603      	mov	r3, r0
 802344a:	2b00      	cmp	r3, #0
 802344c:	d022      	beq.n	8023494 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	681b      	ldr	r3, [r3, #0]
 8023452:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023456:	e853 3f00 	ldrex	r3, [r3]
 802345a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023462:	653b      	str	r3, [r7, #80]	; 0x50
 8023464:	687b      	ldr	r3, [r7, #4]
 8023466:	681b      	ldr	r3, [r3, #0]
 8023468:	461a      	mov	r2, r3
 802346a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802346c:	647b      	str	r3, [r7, #68]	; 0x44
 802346e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8023472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023474:	e841 2300 	strex	r3, r2, [r1]
 8023478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802347c:	2b00      	cmp	r3, #0
 802347e:	d1e6      	bne.n	802344e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8023480:	687b      	ldr	r3, [r7, #4]
 8023482:	2220      	movs	r2, #32
 8023484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8023488:	687b      	ldr	r3, [r7, #4]
 802348a:	2200      	movs	r2, #0
 802348c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023490:	2303      	movs	r3, #3
 8023492:	e063      	b.n	802355c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	f003 0304 	and.w	r3, r3, #4
 802349e:	2b04      	cmp	r3, #4
 80234a0:	d149      	bne.n	8023536 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80234a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80234a6:	9300      	str	r3, [sp, #0]
 80234a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80234aa:	2200      	movs	r2, #0
 80234ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80234b0:	6878      	ldr	r0, [r7, #4]
 80234b2:	f000 f857 	bl	8023564 <UART_WaitOnFlagUntilTimeout>
 80234b6:	4603      	mov	r3, r0
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	d03c      	beq.n	8023536 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80234c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80234c4:	e853 3f00 	ldrex	r3, [r3]
 80234c8:	623b      	str	r3, [r7, #32]
   return(result);
 80234ca:	6a3b      	ldr	r3, [r7, #32]
 80234cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80234d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	681b      	ldr	r3, [r3, #0]
 80234d6:	461a      	mov	r2, r3
 80234d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80234da:	633b      	str	r3, [r7, #48]	; 0x30
 80234dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80234de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80234e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80234e2:	e841 2300 	strex	r3, r2, [r1]
 80234e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80234e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d1e6      	bne.n	80234bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	3308      	adds	r3, #8
 80234f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80234f6:	693b      	ldr	r3, [r7, #16]
 80234f8:	e853 3f00 	ldrex	r3, [r3]
 80234fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80234fe:	68fb      	ldr	r3, [r7, #12]
 8023500:	f023 0301 	bic.w	r3, r3, #1
 8023504:	64bb      	str	r3, [r7, #72]	; 0x48
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	3308      	adds	r3, #8
 802350c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802350e:	61fa      	str	r2, [r7, #28]
 8023510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023512:	69b9      	ldr	r1, [r7, #24]
 8023514:	69fa      	ldr	r2, [r7, #28]
 8023516:	e841 2300 	strex	r3, r2, [r1]
 802351a:	617b      	str	r3, [r7, #20]
   return(result);
 802351c:	697b      	ldr	r3, [r7, #20]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d1e5      	bne.n	80234ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2220      	movs	r2, #32
 8023526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	2200      	movs	r2, #0
 802352e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023532:	2303      	movs	r3, #3
 8023534:	e012      	b.n	802355c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	2220      	movs	r2, #32
 802353a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	2220      	movs	r2, #32
 8023542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	2200      	movs	r2, #0
 802354a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	2200      	movs	r2, #0
 8023550:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	2200      	movs	r2, #0
 8023556:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802355a:	2300      	movs	r3, #0
}
 802355c:	4618      	mov	r0, r3
 802355e:	3758      	adds	r7, #88	; 0x58
 8023560:	46bd      	mov	sp, r7
 8023562:	bd80      	pop	{r7, pc}

08023564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8023564:	b580      	push	{r7, lr}
 8023566:	b084      	sub	sp, #16
 8023568:	af00      	add	r7, sp, #0
 802356a:	60f8      	str	r0, [r7, #12]
 802356c:	60b9      	str	r1, [r7, #8]
 802356e:	603b      	str	r3, [r7, #0]
 8023570:	4613      	mov	r3, r2
 8023572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023574:	e04f      	b.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023576:	69bb      	ldr	r3, [r7, #24]
 8023578:	f1b3 3fff 	cmp.w	r3, #4294967295
 802357c:	d04b      	beq.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802357e:	f7fd fae9 	bl	8020b54 <HAL_GetTick>
 8023582:	4602      	mov	r2, r0
 8023584:	683b      	ldr	r3, [r7, #0]
 8023586:	1ad3      	subs	r3, r2, r3
 8023588:	69ba      	ldr	r2, [r7, #24]
 802358a:	429a      	cmp	r2, r3
 802358c:	d302      	bcc.n	8023594 <UART_WaitOnFlagUntilTimeout+0x30>
 802358e:	69bb      	ldr	r3, [r7, #24]
 8023590:	2b00      	cmp	r3, #0
 8023592:	d101      	bne.n	8023598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8023594:	2303      	movs	r3, #3
 8023596:	e04e      	b.n	8023636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8023598:	68fb      	ldr	r3, [r7, #12]
 802359a:	681b      	ldr	r3, [r3, #0]
 802359c:	681b      	ldr	r3, [r3, #0]
 802359e:	f003 0304 	and.w	r3, r3, #4
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d037      	beq.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80235a6:	68bb      	ldr	r3, [r7, #8]
 80235a8:	2b80      	cmp	r3, #128	; 0x80
 80235aa:	d034      	beq.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80235ac:	68bb      	ldr	r3, [r7, #8]
 80235ae:	2b40      	cmp	r3, #64	; 0x40
 80235b0:	d031      	beq.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80235b2:	68fb      	ldr	r3, [r7, #12]
 80235b4:	681b      	ldr	r3, [r3, #0]
 80235b6:	69db      	ldr	r3, [r3, #28]
 80235b8:	f003 0308 	and.w	r3, r3, #8
 80235bc:	2b08      	cmp	r3, #8
 80235be:	d110      	bne.n	80235e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80235c0:	68fb      	ldr	r3, [r7, #12]
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	2208      	movs	r2, #8
 80235c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80235c8:	68f8      	ldr	r0, [r7, #12]
 80235ca:	f000 f838 	bl	802363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	2208      	movs	r2, #8
 80235d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80235d6:	68fb      	ldr	r3, [r7, #12]
 80235d8:	2200      	movs	r2, #0
 80235da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80235de:	2301      	movs	r3, #1
 80235e0:	e029      	b.n	8023636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80235e2:	68fb      	ldr	r3, [r7, #12]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	69db      	ldr	r3, [r3, #28]
 80235e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80235ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80235f0:	d111      	bne.n	8023616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80235f2:	68fb      	ldr	r3, [r7, #12]
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80235fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80235fc:	68f8      	ldr	r0, [r7, #12]
 80235fe:	f000 f81e 	bl	802363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8023602:	68fb      	ldr	r3, [r7, #12]
 8023604:	2220      	movs	r2, #32
 8023606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	2200      	movs	r2, #0
 802360e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8023612:	2303      	movs	r3, #3
 8023614:	e00f      	b.n	8023636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	69da      	ldr	r2, [r3, #28]
 802361c:	68bb      	ldr	r3, [r7, #8]
 802361e:	4013      	ands	r3, r2
 8023620:	68ba      	ldr	r2, [r7, #8]
 8023622:	429a      	cmp	r2, r3
 8023624:	bf0c      	ite	eq
 8023626:	2301      	moveq	r3, #1
 8023628:	2300      	movne	r3, #0
 802362a:	b2db      	uxtb	r3, r3
 802362c:	461a      	mov	r2, r3
 802362e:	79fb      	ldrb	r3, [r7, #7]
 8023630:	429a      	cmp	r2, r3
 8023632:	d0a0      	beq.n	8023576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023634:	2300      	movs	r3, #0
}
 8023636:	4618      	mov	r0, r3
 8023638:	3710      	adds	r7, #16
 802363a:	46bd      	mov	sp, r7
 802363c:	bd80      	pop	{r7, pc}

0802363e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802363e:	b480      	push	{r7}
 8023640:	b095      	sub	sp, #84	; 0x54
 8023642:	af00      	add	r7, sp, #0
 8023644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023646:	687b      	ldr	r3, [r7, #4]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802364e:	e853 3f00 	ldrex	r3, [r3]
 8023652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8023654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802365a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	681b      	ldr	r3, [r3, #0]
 8023660:	461a      	mov	r2, r3
 8023662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023664:	643b      	str	r3, [r7, #64]	; 0x40
 8023666:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802366a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802366c:	e841 2300 	strex	r3, r2, [r1]
 8023670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8023672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023674:	2b00      	cmp	r3, #0
 8023676:	d1e6      	bne.n	8023646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	3308      	adds	r3, #8
 802367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023680:	6a3b      	ldr	r3, [r7, #32]
 8023682:	e853 3f00 	ldrex	r3, [r3]
 8023686:	61fb      	str	r3, [r7, #28]
   return(result);
 8023688:	69fb      	ldr	r3, [r7, #28]
 802368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802368e:	f023 0301 	bic.w	r3, r3, #1
 8023692:	64bb      	str	r3, [r7, #72]	; 0x48
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	3308      	adds	r3, #8
 802369a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802369c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802369e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80236a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80236a4:	e841 2300 	strex	r3, r2, [r1]
 80236a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80236aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	d1e3      	bne.n	8023678 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80236b4:	2b01      	cmp	r3, #1
 80236b6:	d118      	bne.n	80236ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	681b      	ldr	r3, [r3, #0]
 80236bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80236be:	68fb      	ldr	r3, [r7, #12]
 80236c0:	e853 3f00 	ldrex	r3, [r3]
 80236c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80236c6:	68bb      	ldr	r3, [r7, #8]
 80236c8:	f023 0310 	bic.w	r3, r3, #16
 80236cc:	647b      	str	r3, [r7, #68]	; 0x44
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	461a      	mov	r2, r3
 80236d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80236d6:	61bb      	str	r3, [r7, #24]
 80236d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236da:	6979      	ldr	r1, [r7, #20]
 80236dc:	69ba      	ldr	r2, [r7, #24]
 80236de:	e841 2300 	strex	r3, r2, [r1]
 80236e2:	613b      	str	r3, [r7, #16]
   return(result);
 80236e4:	693b      	ldr	r3, [r7, #16]
 80236e6:	2b00      	cmp	r3, #0
 80236e8:	d1e6      	bne.n	80236b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	2220      	movs	r2, #32
 80236ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	2200      	movs	r2, #0
 80236f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	2200      	movs	r2, #0
 80236fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80236fe:	bf00      	nop
 8023700:	3754      	adds	r7, #84	; 0x54
 8023702:	46bd      	mov	sp, r7
 8023704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023708:	4770      	bx	lr

0802370a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802370a:	b480      	push	{r7}
 802370c:	b085      	sub	sp, #20
 802370e:	af00      	add	r7, sp, #0
 8023710:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023718:	2b01      	cmp	r3, #1
 802371a:	d101      	bne.n	8023720 <HAL_UARTEx_DisableFifoMode+0x16>
 802371c:	2302      	movs	r3, #2
 802371e:	e027      	b.n	8023770 <HAL_UARTEx_DisableFifoMode+0x66>
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	2201      	movs	r2, #1
 8023724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	2224      	movs	r2, #36	; 0x24
 802372c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	681b      	ldr	r3, [r3, #0]
 8023736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	681b      	ldr	r3, [r3, #0]
 802373c:	681a      	ldr	r2, [r3, #0]
 802373e:	687b      	ldr	r3, [r7, #4]
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	f022 0201 	bic.w	r2, r2, #1
 8023746:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8023748:	68fb      	ldr	r3, [r7, #12]
 802374a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802374e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	2200      	movs	r2, #0
 8023754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	68fa      	ldr	r2, [r7, #12]
 802375c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	2220      	movs	r2, #32
 8023762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	2200      	movs	r2, #0
 802376a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802376e:	2300      	movs	r3, #0
}
 8023770:	4618      	mov	r0, r3
 8023772:	3714      	adds	r7, #20
 8023774:	46bd      	mov	sp, r7
 8023776:	f85d 7b04 	ldr.w	r7, [sp], #4
 802377a:	4770      	bx	lr

0802377c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802377c:	b580      	push	{r7, lr}
 802377e:	b084      	sub	sp, #16
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
 8023784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802378c:	2b01      	cmp	r3, #1
 802378e:	d101      	bne.n	8023794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8023790:	2302      	movs	r3, #2
 8023792:	e02d      	b.n	80237f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	2201      	movs	r2, #1
 8023798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802379c:	687b      	ldr	r3, [r7, #4]
 802379e:	2224      	movs	r2, #36	; 0x24
 80237a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80237ac:	687b      	ldr	r3, [r7, #4]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	681a      	ldr	r2, [r3, #0]
 80237b2:	687b      	ldr	r3, [r7, #4]
 80237b4:	681b      	ldr	r3, [r3, #0]
 80237b6:	f022 0201 	bic.w	r2, r2, #1
 80237ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	681b      	ldr	r3, [r3, #0]
 80237c0:	689b      	ldr	r3, [r3, #8]
 80237c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80237c6:	687b      	ldr	r3, [r7, #4]
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	683a      	ldr	r2, [r7, #0]
 80237cc:	430a      	orrs	r2, r1
 80237ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80237d0:	6878      	ldr	r0, [r7, #4]
 80237d2:	f000 f84f 	bl	8023874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	68fa      	ldr	r2, [r7, #12]
 80237dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80237de:	687b      	ldr	r3, [r7, #4]
 80237e0:	2220      	movs	r2, #32
 80237e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80237e6:	687b      	ldr	r3, [r7, #4]
 80237e8:	2200      	movs	r2, #0
 80237ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80237ee:	2300      	movs	r3, #0
}
 80237f0:	4618      	mov	r0, r3
 80237f2:	3710      	adds	r7, #16
 80237f4:	46bd      	mov	sp, r7
 80237f6:	bd80      	pop	{r7, pc}

080237f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80237f8:	b580      	push	{r7, lr}
 80237fa:	b084      	sub	sp, #16
 80237fc:	af00      	add	r7, sp, #0
 80237fe:	6078      	str	r0, [r7, #4]
 8023800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023808:	2b01      	cmp	r3, #1
 802380a:	d101      	bne.n	8023810 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802380c:	2302      	movs	r3, #2
 802380e:	e02d      	b.n	802386c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	2201      	movs	r2, #1
 8023814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	2224      	movs	r2, #36	; 0x24
 802381c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8023820:	687b      	ldr	r3, [r7, #4]
 8023822:	681b      	ldr	r3, [r3, #0]
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	681a      	ldr	r2, [r3, #0]
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	f022 0201 	bic.w	r2, r2, #1
 8023836:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	681b      	ldr	r3, [r3, #0]
 802383c:	689b      	ldr	r3, [r3, #8]
 802383e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	683a      	ldr	r2, [r7, #0]
 8023848:	430a      	orrs	r2, r1
 802384a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802384c:	6878      	ldr	r0, [r7, #4]
 802384e:	f000 f811 	bl	8023874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8023852:	687b      	ldr	r3, [r7, #4]
 8023854:	681b      	ldr	r3, [r3, #0]
 8023856:	68fa      	ldr	r2, [r7, #12]
 8023858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	2220      	movs	r2, #32
 802385e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8023862:	687b      	ldr	r3, [r7, #4]
 8023864:	2200      	movs	r2, #0
 8023866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802386a:	2300      	movs	r3, #0
}
 802386c:	4618      	mov	r0, r3
 802386e:	3710      	adds	r7, #16
 8023870:	46bd      	mov	sp, r7
 8023872:	bd80      	pop	{r7, pc}

08023874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8023874:	b480      	push	{r7}
 8023876:	b085      	sub	sp, #20
 8023878:	af00      	add	r7, sp, #0
 802387a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023880:	2b00      	cmp	r3, #0
 8023882:	d108      	bne.n	8023896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	2201      	movs	r2, #1
 8023888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802388c:	687b      	ldr	r3, [r7, #4]
 802388e:	2201      	movs	r2, #1
 8023890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8023894:	e031      	b.n	80238fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8023896:	2308      	movs	r3, #8
 8023898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802389a:	2308      	movs	r3, #8
 802389c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	681b      	ldr	r3, [r3, #0]
 80238a2:	689b      	ldr	r3, [r3, #8]
 80238a4:	0e5b      	lsrs	r3, r3, #25
 80238a6:	b2db      	uxtb	r3, r3
 80238a8:	f003 0307 	and.w	r3, r3, #7
 80238ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	681b      	ldr	r3, [r3, #0]
 80238b2:	689b      	ldr	r3, [r3, #8]
 80238b4:	0f5b      	lsrs	r3, r3, #29
 80238b6:	b2db      	uxtb	r3, r3
 80238b8:	f003 0307 	and.w	r3, r3, #7
 80238bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80238be:	7bbb      	ldrb	r3, [r7, #14]
 80238c0:	7b3a      	ldrb	r2, [r7, #12]
 80238c2:	4911      	ldr	r1, [pc, #68]	; (8023908 <UARTEx_SetNbDataToProcess+0x94>)
 80238c4:	5c8a      	ldrb	r2, [r1, r2]
 80238c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80238ca:	7b3a      	ldrb	r2, [r7, #12]
 80238cc:	490f      	ldr	r1, [pc, #60]	; (802390c <UARTEx_SetNbDataToProcess+0x98>)
 80238ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80238d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80238d4:	b29a      	uxth	r2, r3
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80238dc:	7bfb      	ldrb	r3, [r7, #15]
 80238de:	7b7a      	ldrb	r2, [r7, #13]
 80238e0:	4909      	ldr	r1, [pc, #36]	; (8023908 <UARTEx_SetNbDataToProcess+0x94>)
 80238e2:	5c8a      	ldrb	r2, [r1, r2]
 80238e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80238e8:	7b7a      	ldrb	r2, [r7, #13]
 80238ea:	4908      	ldr	r1, [pc, #32]	; (802390c <UARTEx_SetNbDataToProcess+0x98>)
 80238ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80238ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80238f2:	b29a      	uxth	r2, r3
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80238fa:	bf00      	nop
 80238fc:	3714      	adds	r7, #20
 80238fe:	46bd      	mov	sp, r7
 8023900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023904:	4770      	bx	lr
 8023906:	bf00      	nop
 8023908:	08023a10 	.word	0x08023a10
 802390c:	08023a18 	.word	0x08023a18

08023910 <__libc_init_array>:
 8023910:	b570      	push	{r4, r5, r6, lr}
 8023912:	4d0d      	ldr	r5, [pc, #52]	; (8023948 <__libc_init_array+0x38>)
 8023914:	2600      	movs	r6, #0
 8023916:	4c0d      	ldr	r4, [pc, #52]	; (802394c <__libc_init_array+0x3c>)
 8023918:	1b64      	subs	r4, r4, r5
 802391a:	10a4      	asrs	r4, r4, #2
 802391c:	42a6      	cmp	r6, r4
 802391e:	d109      	bne.n	8023934 <__libc_init_array+0x24>
 8023920:	4d0b      	ldr	r5, [pc, #44]	; (8023950 <__libc_init_array+0x40>)
 8023922:	2600      	movs	r6, #0
 8023924:	4c0b      	ldr	r4, [pc, #44]	; (8023954 <__libc_init_array+0x44>)
 8023926:	f000 f81f 	bl	8023968 <_init>
 802392a:	1b64      	subs	r4, r4, r5
 802392c:	10a4      	asrs	r4, r4, #2
 802392e:	42a6      	cmp	r6, r4
 8023930:	d105      	bne.n	802393e <__libc_init_array+0x2e>
 8023932:	bd70      	pop	{r4, r5, r6, pc}
 8023934:	f855 3b04 	ldr.w	r3, [r5], #4
 8023938:	3601      	adds	r6, #1
 802393a:	4798      	blx	r3
 802393c:	e7ee      	b.n	802391c <__libc_init_array+0xc>
 802393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023942:	3601      	adds	r6, #1
 8023944:	4798      	blx	r3
 8023946:	e7f2      	b.n	802392e <__libc_init_array+0x1e>
 8023948:	08023a28 	.word	0x08023a28
 802394c:	08023a28 	.word	0x08023a28
 8023950:	08023a28 	.word	0x08023a28
 8023954:	08023a2c 	.word	0x08023a2c

08023958 <memset>:
 8023958:	4402      	add	r2, r0
 802395a:	4603      	mov	r3, r0
 802395c:	4293      	cmp	r3, r2
 802395e:	d100      	bne.n	8023962 <memset+0xa>
 8023960:	4770      	bx	lr
 8023962:	f803 1b01 	strb.w	r1, [r3], #1
 8023966:	e7f9      	b.n	802395c <memset+0x4>

08023968 <_init>:
 8023968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802396a:	bf00      	nop
 802396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802396e:	bc08      	pop	{r3}
 8023970:	469e      	mov	lr, r3
 8023972:	4770      	bx	lr

08023974 <_fini>:
 8023974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023976:	bf00      	nop
 8023978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802397a:	bc08      	pop	{r3}
 802397c:	469e      	mov	lr, r3
 802397e:	4770      	bx	lr
