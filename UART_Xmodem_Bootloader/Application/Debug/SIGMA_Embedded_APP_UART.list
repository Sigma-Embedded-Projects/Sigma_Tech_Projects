
SIGMA_Embedded_APP_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  080201f4  080201f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08023b8c  08023b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023c30  08023c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08023c30  08023c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023c38  08023c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023c38  08023c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023c3c  08023c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08023c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08023c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08023c4c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de47  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c37  00000000  00000000  0002de89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dfc  00000000  00000000  00030f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c89c  00000000  00000000  00057d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa078  00000000  00000000  000645a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a7c  00000000  00000000  0015e668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201f4 <__do_global_dtors_aux>:
 80201f4:	b510      	push	{r4, lr}
 80201f6:	4c05      	ldr	r4, [pc, #20]	; (802020c <__do_global_dtors_aux+0x18>)
 80201f8:	7823      	ldrb	r3, [r4, #0]
 80201fa:	b933      	cbnz	r3, 802020a <__do_global_dtors_aux+0x16>
 80201fc:	4b04      	ldr	r3, [pc, #16]	; (8020210 <__do_global_dtors_aux+0x1c>)
 80201fe:	b113      	cbz	r3, 8020206 <__do_global_dtors_aux+0x12>
 8020200:	4804      	ldr	r0, [pc, #16]	; (8020214 <__do_global_dtors_aux+0x20>)
 8020202:	e000      	b.n	8020206 <__do_global_dtors_aux+0x12>
 8020204:	bf00      	nop
 8020206:	2301      	movs	r3, #1
 8020208:	7023      	strb	r3, [r4, #0]
 802020a:	bd10      	pop	{r4, pc}
 802020c:	2000000c 	.word	0x2000000c
 8020210:	00000000 	.word	0x00000000
 8020214:	08023b74 	.word	0x08023b74

08020218 <frame_dummy>:
 8020218:	b508      	push	{r3, lr}
 802021a:	4b03      	ldr	r3, [pc, #12]	; (8020228 <frame_dummy+0x10>)
 802021c:	b11b      	cbz	r3, 8020226 <frame_dummy+0xe>
 802021e:	4903      	ldr	r1, [pc, #12]	; (802022c <frame_dummy+0x14>)
 8020220:	4803      	ldr	r0, [pc, #12]	; (8020230 <frame_dummy+0x18>)
 8020222:	e000      	b.n	8020226 <frame_dummy+0xe>
 8020224:	bf00      	nop
 8020226:	bd08      	pop	{r3, pc}
 8020228:	00000000 	.word	0x00000000
 802022c:	20000010 	.word	0x20000010
 8020230:	08023b74 	.word	0x08023b74

08020234 <__aeabi_uldivmod>:
 8020234:	b953      	cbnz	r3, 802024c <__aeabi_uldivmod+0x18>
 8020236:	b94a      	cbnz	r2, 802024c <__aeabi_uldivmod+0x18>
 8020238:	2900      	cmp	r1, #0
 802023a:	bf08      	it	eq
 802023c:	2800      	cmpeq	r0, #0
 802023e:	bf1c      	itt	ne
 8020240:	f04f 31ff 	movne.w	r1, #4294967295
 8020244:	f04f 30ff 	movne.w	r0, #4294967295
 8020248:	f000 b982 	b.w	8020550 <__aeabi_idiv0>
 802024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8020250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020254:	f000 f806 	bl	8020264 <__udivmoddi4>
 8020258:	f8dd e004 	ldr.w	lr, [sp, #4]
 802025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020260:	b004      	add	sp, #16
 8020262:	4770      	bx	lr

08020264 <__udivmoddi4>:
 8020264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802026a:	4604      	mov	r4, r0
 802026c:	460f      	mov	r7, r1
 802026e:	2b00      	cmp	r3, #0
 8020270:	d148      	bne.n	8020304 <__udivmoddi4+0xa0>
 8020272:	428a      	cmp	r2, r1
 8020274:	4694      	mov	ip, r2
 8020276:	d961      	bls.n	802033c <__udivmoddi4+0xd8>
 8020278:	fab2 f382 	clz	r3, r2
 802027c:	b143      	cbz	r3, 8020290 <__udivmoddi4+0x2c>
 802027e:	f1c3 0120 	rsb	r1, r3, #32
 8020282:	409f      	lsls	r7, r3
 8020284:	fa02 fc03 	lsl.w	ip, r2, r3
 8020288:	409c      	lsls	r4, r3
 802028a:	fa20 f101 	lsr.w	r1, r0, r1
 802028e:	430f      	orrs	r7, r1
 8020290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8020294:	fa1f fe8c 	uxth.w	lr, ip
 8020298:	0c22      	lsrs	r2, r4, #16
 802029a:	fbb7 f6f1 	udiv	r6, r7, r1
 802029e:	fb01 7716 	mls	r7, r1, r6, r7
 80202a2:	fb06 f00e 	mul.w	r0, r6, lr
 80202a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80202aa:	4290      	cmp	r0, r2
 80202ac:	d908      	bls.n	80202c0 <__udivmoddi4+0x5c>
 80202ae:	eb1c 0202 	adds.w	r2, ip, r2
 80202b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80202b6:	d202      	bcs.n	80202be <__udivmoddi4+0x5a>
 80202b8:	4290      	cmp	r0, r2
 80202ba:	f200 8137 	bhi.w	802052c <__udivmoddi4+0x2c8>
 80202be:	463e      	mov	r6, r7
 80202c0:	1a12      	subs	r2, r2, r0
 80202c2:	b2a4      	uxth	r4, r4
 80202c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80202c8:	fb01 2210 	mls	r2, r1, r0, r2
 80202cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80202d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80202d4:	45a6      	cmp	lr, r4
 80202d6:	d908      	bls.n	80202ea <__udivmoddi4+0x86>
 80202d8:	eb1c 0404 	adds.w	r4, ip, r4
 80202dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80202e0:	d202      	bcs.n	80202e8 <__udivmoddi4+0x84>
 80202e2:	45a6      	cmp	lr, r4
 80202e4:	f200 811c 	bhi.w	8020520 <__udivmoddi4+0x2bc>
 80202e8:	4610      	mov	r0, r2
 80202ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80202ee:	eba4 040e 	sub.w	r4, r4, lr
 80202f2:	2600      	movs	r6, #0
 80202f4:	b11d      	cbz	r5, 80202fe <__udivmoddi4+0x9a>
 80202f6:	40dc      	lsrs	r4, r3
 80202f8:	2300      	movs	r3, #0
 80202fa:	e9c5 4300 	strd	r4, r3, [r5]
 80202fe:	4631      	mov	r1, r6
 8020300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020304:	428b      	cmp	r3, r1
 8020306:	d909      	bls.n	802031c <__udivmoddi4+0xb8>
 8020308:	2d00      	cmp	r5, #0
 802030a:	f000 80fd 	beq.w	8020508 <__udivmoddi4+0x2a4>
 802030e:	2600      	movs	r6, #0
 8020310:	e9c5 0100 	strd	r0, r1, [r5]
 8020314:	4630      	mov	r0, r6
 8020316:	4631      	mov	r1, r6
 8020318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802031c:	fab3 f683 	clz	r6, r3
 8020320:	2e00      	cmp	r6, #0
 8020322:	d14b      	bne.n	80203bc <__udivmoddi4+0x158>
 8020324:	428b      	cmp	r3, r1
 8020326:	f0c0 80f2 	bcc.w	802050e <__udivmoddi4+0x2aa>
 802032a:	4282      	cmp	r2, r0
 802032c:	f240 80ef 	bls.w	802050e <__udivmoddi4+0x2aa>
 8020330:	4630      	mov	r0, r6
 8020332:	2d00      	cmp	r5, #0
 8020334:	d0e3      	beq.n	80202fe <__udivmoddi4+0x9a>
 8020336:	e9c5 4700 	strd	r4, r7, [r5]
 802033a:	e7e0      	b.n	80202fe <__udivmoddi4+0x9a>
 802033c:	b902      	cbnz	r2, 8020340 <__udivmoddi4+0xdc>
 802033e:	deff      	udf	#255	; 0xff
 8020340:	fab2 f382 	clz	r3, r2
 8020344:	2b00      	cmp	r3, #0
 8020346:	f040 809d 	bne.w	8020484 <__udivmoddi4+0x220>
 802034a:	1a89      	subs	r1, r1, r2
 802034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020350:	b297      	uxth	r7, r2
 8020352:	2601      	movs	r6, #1
 8020354:	0c20      	lsrs	r0, r4, #16
 8020356:	fbb1 f2fe 	udiv	r2, r1, lr
 802035a:	fb0e 1112 	mls	r1, lr, r2, r1
 802035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020362:	fb07 f002 	mul.w	r0, r7, r2
 8020366:	4288      	cmp	r0, r1
 8020368:	d90f      	bls.n	802038a <__udivmoddi4+0x126>
 802036a:	eb1c 0101 	adds.w	r1, ip, r1
 802036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8020372:	bf2c      	ite	cs
 8020374:	f04f 0901 	movcs.w	r9, #1
 8020378:	f04f 0900 	movcc.w	r9, #0
 802037c:	4288      	cmp	r0, r1
 802037e:	d903      	bls.n	8020388 <__udivmoddi4+0x124>
 8020380:	f1b9 0f00 	cmp.w	r9, #0
 8020384:	f000 80cf 	beq.w	8020526 <__udivmoddi4+0x2c2>
 8020388:	4642      	mov	r2, r8
 802038a:	1a09      	subs	r1, r1, r0
 802038c:	b2a4      	uxth	r4, r4
 802038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8020392:	fb0e 1110 	mls	r1, lr, r0, r1
 8020396:	fb00 f707 	mul.w	r7, r0, r7
 802039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802039e:	42a7      	cmp	r7, r4
 80203a0:	d908      	bls.n	80203b4 <__udivmoddi4+0x150>
 80203a2:	eb1c 0404 	adds.w	r4, ip, r4
 80203a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80203aa:	d202      	bcs.n	80203b2 <__udivmoddi4+0x14e>
 80203ac:	42a7      	cmp	r7, r4
 80203ae:	f200 80b4 	bhi.w	802051a <__udivmoddi4+0x2b6>
 80203b2:	4608      	mov	r0, r1
 80203b4:	1be4      	subs	r4, r4, r7
 80203b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80203ba:	e79b      	b.n	80202f4 <__udivmoddi4+0x90>
 80203bc:	f1c6 0720 	rsb	r7, r6, #32
 80203c0:	40b3      	lsls	r3, r6
 80203c2:	fa01 f406 	lsl.w	r4, r1, r6
 80203c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80203ca:	40f9      	lsrs	r1, r7
 80203cc:	40b2      	lsls	r2, r6
 80203ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80203d2:	fa20 f307 	lsr.w	r3, r0, r7
 80203d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80203da:	431c      	orrs	r4, r3
 80203dc:	fa1f fe8c 	uxth.w	lr, ip
 80203e0:	fa00 f306 	lsl.w	r3, r0, r6
 80203e4:	0c20      	lsrs	r0, r4, #16
 80203e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80203ea:	fb09 1118 	mls	r1, r9, r8, r1
 80203ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203f2:	fb08 f00e 	mul.w	r0, r8, lr
 80203f6:	4288      	cmp	r0, r1
 80203f8:	d90f      	bls.n	802041a <__udivmoddi4+0x1b6>
 80203fa:	eb1c 0101 	adds.w	r1, ip, r1
 80203fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8020402:	bf2c      	ite	cs
 8020404:	f04f 0b01 	movcs.w	fp, #1
 8020408:	f04f 0b00 	movcc.w	fp, #0
 802040c:	4288      	cmp	r0, r1
 802040e:	d903      	bls.n	8020418 <__udivmoddi4+0x1b4>
 8020410:	f1bb 0f00 	cmp.w	fp, #0
 8020414:	f000 808d 	beq.w	8020532 <__udivmoddi4+0x2ce>
 8020418:	46d0      	mov	r8, sl
 802041a:	1a09      	subs	r1, r1, r0
 802041c:	b2a4      	uxth	r4, r4
 802041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8020422:	fb09 1110 	mls	r1, r9, r0, r1
 8020426:	fb00 fe0e 	mul.w	lr, r0, lr
 802042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 802042e:	458e      	cmp	lr, r1
 8020430:	d907      	bls.n	8020442 <__udivmoddi4+0x1de>
 8020432:	eb1c 0101 	adds.w	r1, ip, r1
 8020436:	f100 34ff 	add.w	r4, r0, #4294967295
 802043a:	d201      	bcs.n	8020440 <__udivmoddi4+0x1dc>
 802043c:	458e      	cmp	lr, r1
 802043e:	d87f      	bhi.n	8020540 <__udivmoddi4+0x2dc>
 8020440:	4620      	mov	r0, r4
 8020442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020446:	eba1 010e 	sub.w	r1, r1, lr
 802044a:	fba0 9802 	umull	r9, r8, r0, r2
 802044e:	4541      	cmp	r1, r8
 8020450:	464c      	mov	r4, r9
 8020452:	46c6      	mov	lr, r8
 8020454:	d302      	bcc.n	802045c <__udivmoddi4+0x1f8>
 8020456:	d106      	bne.n	8020466 <__udivmoddi4+0x202>
 8020458:	454b      	cmp	r3, r9
 802045a:	d204      	bcs.n	8020466 <__udivmoddi4+0x202>
 802045c:	3801      	subs	r0, #1
 802045e:	ebb9 0402 	subs.w	r4, r9, r2
 8020462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8020466:	2d00      	cmp	r5, #0
 8020468:	d070      	beq.n	802054c <__udivmoddi4+0x2e8>
 802046a:	1b1a      	subs	r2, r3, r4
 802046c:	eb61 010e 	sbc.w	r1, r1, lr
 8020470:	fa22 f306 	lsr.w	r3, r2, r6
 8020474:	fa01 f707 	lsl.w	r7, r1, r7
 8020478:	40f1      	lsrs	r1, r6
 802047a:	2600      	movs	r6, #0
 802047c:	431f      	orrs	r7, r3
 802047e:	e9c5 7100 	strd	r7, r1, [r5]
 8020482:	e73c      	b.n	80202fe <__udivmoddi4+0x9a>
 8020484:	fa02 fc03 	lsl.w	ip, r2, r3
 8020488:	f1c3 0020 	rsb	r0, r3, #32
 802048c:	fa01 f203 	lsl.w	r2, r1, r3
 8020490:	fa21 f600 	lsr.w	r6, r1, r0
 8020494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020498:	fa24 f100 	lsr.w	r1, r4, r0
 802049c:	fa1f f78c 	uxth.w	r7, ip
 80204a0:	409c      	lsls	r4, r3
 80204a2:	4311      	orrs	r1, r2
 80204a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80204a8:	0c0a      	lsrs	r2, r1, #16
 80204aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80204ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80204b2:	fb00 f607 	mul.w	r6, r0, r7
 80204b6:	4296      	cmp	r6, r2
 80204b8:	d90e      	bls.n	80204d8 <__udivmoddi4+0x274>
 80204ba:	eb1c 0202 	adds.w	r2, ip, r2
 80204be:	f100 38ff 	add.w	r8, r0, #4294967295
 80204c2:	bf2c      	ite	cs
 80204c4:	f04f 0901 	movcs.w	r9, #1
 80204c8:	f04f 0900 	movcc.w	r9, #0
 80204cc:	4296      	cmp	r6, r2
 80204ce:	d902      	bls.n	80204d6 <__udivmoddi4+0x272>
 80204d0:	f1b9 0f00 	cmp.w	r9, #0
 80204d4:	d031      	beq.n	802053a <__udivmoddi4+0x2d6>
 80204d6:	4640      	mov	r0, r8
 80204d8:	1b92      	subs	r2, r2, r6
 80204da:	b289      	uxth	r1, r1
 80204dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80204e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80204e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80204e8:	fb06 f207 	mul.w	r2, r6, r7
 80204ec:	428a      	cmp	r2, r1
 80204ee:	d907      	bls.n	8020500 <__udivmoddi4+0x29c>
 80204f0:	eb1c 0101 	adds.w	r1, ip, r1
 80204f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80204f8:	d201      	bcs.n	80204fe <__udivmoddi4+0x29a>
 80204fa:	428a      	cmp	r2, r1
 80204fc:	d823      	bhi.n	8020546 <__udivmoddi4+0x2e2>
 80204fe:	4646      	mov	r6, r8
 8020500:	1a89      	subs	r1, r1, r2
 8020502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020506:	e725      	b.n	8020354 <__udivmoddi4+0xf0>
 8020508:	462e      	mov	r6, r5
 802050a:	4628      	mov	r0, r5
 802050c:	e6f7      	b.n	80202fe <__udivmoddi4+0x9a>
 802050e:	1a84      	subs	r4, r0, r2
 8020510:	eb61 0303 	sbc.w	r3, r1, r3
 8020514:	2001      	movs	r0, #1
 8020516:	461f      	mov	r7, r3
 8020518:	e70b      	b.n	8020332 <__udivmoddi4+0xce>
 802051a:	4464      	add	r4, ip
 802051c:	3802      	subs	r0, #2
 802051e:	e749      	b.n	80203b4 <__udivmoddi4+0x150>
 8020520:	4464      	add	r4, ip
 8020522:	3802      	subs	r0, #2
 8020524:	e6e1      	b.n	80202ea <__udivmoddi4+0x86>
 8020526:	3a02      	subs	r2, #2
 8020528:	4461      	add	r1, ip
 802052a:	e72e      	b.n	802038a <__udivmoddi4+0x126>
 802052c:	3e02      	subs	r6, #2
 802052e:	4462      	add	r2, ip
 8020530:	e6c6      	b.n	80202c0 <__udivmoddi4+0x5c>
 8020532:	f1a8 0802 	sub.w	r8, r8, #2
 8020536:	4461      	add	r1, ip
 8020538:	e76f      	b.n	802041a <__udivmoddi4+0x1b6>
 802053a:	3802      	subs	r0, #2
 802053c:	4462      	add	r2, ip
 802053e:	e7cb      	b.n	80204d8 <__udivmoddi4+0x274>
 8020540:	3802      	subs	r0, #2
 8020542:	4461      	add	r1, ip
 8020544:	e77d      	b.n	8020442 <__udivmoddi4+0x1de>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	e7d9      	b.n	8020500 <__udivmoddi4+0x29c>
 802054c:	462e      	mov	r6, r5
 802054e:	e6d6      	b.n	80202fe <__udivmoddi4+0x9a>

08020550 <__aeabi_idiv0>:
 8020550:	4770      	bx	lr
 8020552:	bf00      	nop

08020554 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020554:	b480      	push	{r7}
 8020556:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020558:	f3bf 8f4f 	dsb	sy
}
 802055c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802055e:	4b06      	ldr	r3, [pc, #24]	; (8020578 <__NVIC_SystemReset+0x24>)
 8020560:	68db      	ldr	r3, [r3, #12]
 8020562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020566:	4904      	ldr	r1, [pc, #16]	; (8020578 <__NVIC_SystemReset+0x24>)
 8020568:	4b04      	ldr	r3, [pc, #16]	; (802057c <__NVIC_SystemReset+0x28>)
 802056a:	4313      	orrs	r3, r2
 802056c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802056e:	f3bf 8f4f 	dsb	sy
}
 8020572:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020574:	bf00      	nop
 8020576:	e7fd      	b.n	8020574 <__NVIC_SystemReset+0x20>
 8020578:	e000ed00 	.word	0xe000ed00
 802057c:	05fa0004 	.word	0x05fa0004

08020580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020580:	b580      	push	{r7, lr}
 8020582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020584:	f000 fab9 	bl	8020afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020588:	f000 f818 	bl	80205bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802058c:	f000 f8b4 	bl	80206f8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8020590:	f000 f866 	bl	8020660 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SIGMA_Uart_Transmit_str((uint8_t*)"\nHello, I am Running the App now!");
 8020594:	4807      	ldr	r0, [pc, #28]	; (80205b4 <main+0x34>)
 8020596:	f000 f8d3 	bl	8020740 <SIGMA_Uart_Transmit_str>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Enter J Character to jump to Bootloader
	  if(SIGMA_Uart_Receive(&Serial_CMD) == UART_OK){
 802059a:	4807      	ldr	r0, [pc, #28]	; (80205b8 <main+0x38>)
 802059c:	f000 f8f6 	bl	802078c <SIGMA_Uart_Receive>
 80205a0:	4603      	mov	r3, r0
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d1f9      	bne.n	802059a <main+0x1a>
		  if(Serial_CMD == 'J'){
 80205a6:	4b04      	ldr	r3, [pc, #16]	; (80205b8 <main+0x38>)
 80205a8:	781b      	ldrb	r3, [r3, #0]
 80205aa:	2b4a      	cmp	r3, #74	; 0x4a
 80205ac:	d1f5      	bne.n	802059a <main+0x1a>
			  NVIC_SystemReset();
 80205ae:	f7ff ffd1 	bl	8020554 <__NVIC_SystemReset>
 80205b2:	bf00      	nop
 80205b4:	08023b8c 	.word	0x08023b8c
 80205b8:	200000bc 	.word	0x200000bc

080205bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205bc:	b580      	push	{r7, lr}
 80205be:	b098      	sub	sp, #96	; 0x60
 80205c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205c2:	f107 0318 	add.w	r3, r7, #24
 80205c6:	2248      	movs	r2, #72	; 0x48
 80205c8:	2100      	movs	r1, #0
 80205ca:	4618      	mov	r0, r3
 80205cc:	f003 faca 	bl	8023b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205d0:	1d3b      	adds	r3, r7, #4
 80205d2:	2200      	movs	r2, #0
 80205d4:	601a      	str	r2, [r3, #0]
 80205d6:	605a      	str	r2, [r3, #4]
 80205d8:	609a      	str	r2, [r3, #8]
 80205da:	60da      	str	r2, [r3, #12]
 80205dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80205de:	2000      	movs	r0, #0
 80205e0:	f000 fd74 	bl	80210cc <HAL_PWREx_ControlVoltageScaling>
 80205e4:	4603      	mov	r3, r0
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d001      	beq.n	80205ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80205ea:	f000 f8e9 	bl	80207c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80205ee:	2310      	movs	r3, #16
 80205f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80205f2:	2301      	movs	r3, #1
 80205f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80205f6:	2300      	movs	r3, #0
 80205f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80205fa:	2360      	movs	r3, #96	; 0x60
 80205fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80205fe:	2302      	movs	r3, #2
 8020600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020602:	2301      	movs	r3, #1
 8020604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8020606:	2301      	movs	r3, #1
 8020608:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 802060a:	2337      	movs	r3, #55	; 0x37
 802060c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 802060e:	2307      	movs	r3, #7
 8020610:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8020612:	2302      	movs	r3, #2
 8020614:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8020616:	2302      	movs	r3, #2
 8020618:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802061a:	f107 0318 	add.w	r3, r7, #24
 802061e:	4618      	mov	r0, r3
 8020620:	f000 fde4 	bl	80211ec <HAL_RCC_OscConfig>
 8020624:	4603      	mov	r3, r0
 8020626:	2b00      	cmp	r3, #0
 8020628:	d001      	beq.n	802062e <SystemClock_Config+0x72>
  {
    Error_Handler();
 802062a:	f000 f8c9 	bl	80207c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802062e:	230f      	movs	r3, #15
 8020630:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020632:	2303      	movs	r3, #3
 8020634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020636:	2300      	movs	r3, #0
 8020638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802063a:	2300      	movs	r3, #0
 802063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802063e:	2300      	movs	r3, #0
 8020640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020642:	1d3b      	adds	r3, r7, #4
 8020644:	2105      	movs	r1, #5
 8020646:	4618      	mov	r0, r3
 8020648:	f001 faa6 	bl	8021b98 <HAL_RCC_ClockConfig>
 802064c:	4603      	mov	r3, r0
 802064e:	2b00      	cmp	r3, #0
 8020650:	d001      	beq.n	8020656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020652:	f000 f8b5 	bl	80207c0 <Error_Handler>
  }
}
 8020656:	bf00      	nop
 8020658:	3760      	adds	r7, #96	; 0x60
 802065a:	46bd      	mov	sp, r7
 802065c:	bd80      	pop	{r7, pc}
	...

08020660 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8020660:	b580      	push	{r7, lr}
 8020662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8020664:	4b22      	ldr	r3, [pc, #136]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020666:	4a23      	ldr	r2, [pc, #140]	; (80206f4 <MX_LPUART1_UART_Init+0x94>)
 8020668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 802066a:	4b21      	ldr	r3, [pc, #132]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 802066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020672:	4b1f      	ldr	r3, [pc, #124]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020674:	2200      	movs	r2, #0
 8020676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8020678:	4b1d      	ldr	r3, [pc, #116]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 802067a:	2200      	movs	r2, #0
 802067c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 802067e:	4b1c      	ldr	r3, [pc, #112]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020680:	2200      	movs	r2, #0
 8020682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8020684:	4b1a      	ldr	r3, [pc, #104]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020686:	220c      	movs	r2, #12
 8020688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802068a:	4b19      	ldr	r3, [pc, #100]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 802068c:	2200      	movs	r2, #0
 802068e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020690:	4b17      	ldr	r3, [pc, #92]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020692:	2200      	movs	r2, #0
 8020694:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020696:	4b16      	ldr	r3, [pc, #88]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 8020698:	2200      	movs	r2, #0
 802069a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802069c:	4b14      	ldr	r3, [pc, #80]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 802069e:	2200      	movs	r2, #0
 80206a0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80206a2:	4b13      	ldr	r3, [pc, #76]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 80206a4:	2200      	movs	r2, #0
 80206a6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80206a8:	4811      	ldr	r0, [pc, #68]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 80206aa:	f002 fa6f 	bl	8022b8c <HAL_UART_Init>
 80206ae:	4603      	mov	r3, r0
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d001      	beq.n	80206b8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80206b4:	f000 f884 	bl	80207c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80206b8:	2100      	movs	r1, #0
 80206ba:	480d      	ldr	r0, [pc, #52]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 80206bc:	f003 f964 	bl	8023988 <HAL_UARTEx_SetTxFifoThreshold>
 80206c0:	4603      	mov	r3, r0
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d001      	beq.n	80206ca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80206c6:	f000 f87b 	bl	80207c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80206ca:	2100      	movs	r1, #0
 80206cc:	4808      	ldr	r0, [pc, #32]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 80206ce:	f003 f999 	bl	8023a04 <HAL_UARTEx_SetRxFifoThreshold>
 80206d2:	4603      	mov	r3, r0
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d001      	beq.n	80206dc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80206d8:	f000 f872 	bl	80207c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80206dc:	4804      	ldr	r0, [pc, #16]	; (80206f0 <MX_LPUART1_UART_Init+0x90>)
 80206de:	f003 f91a 	bl	8023916 <HAL_UARTEx_DisableFifoMode>
 80206e2:	4603      	mov	r3, r0
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d001      	beq.n	80206ec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80206e8:	f000 f86a 	bl	80207c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80206ec:	bf00      	nop
 80206ee:	bd80      	pop	{r7, pc}
 80206f0:	20000028 	.word	0x20000028
 80206f4:	40008000 	.word	0x40008000

080206f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b082      	sub	sp, #8
 80206fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80206fe:	4b0f      	ldr	r3, [pc, #60]	; (802073c <MX_GPIO_Init+0x44>)
 8020700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020702:	4a0e      	ldr	r2, [pc, #56]	; (802073c <MX_GPIO_Init+0x44>)
 8020704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020708:	64d3      	str	r3, [r2, #76]	; 0x4c
 802070a:	4b0c      	ldr	r3, [pc, #48]	; (802073c <MX_GPIO_Init+0x44>)
 802070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020712:	607b      	str	r3, [r7, #4]
 8020714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020716:	4b09      	ldr	r3, [pc, #36]	; (802073c <MX_GPIO_Init+0x44>)
 8020718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802071a:	4a08      	ldr	r2, [pc, #32]	; (802073c <MX_GPIO_Init+0x44>)
 802071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020722:	4b06      	ldr	r3, [pc, #24]	; (802073c <MX_GPIO_Init+0x44>)
 8020724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802072a:	603b      	str	r3, [r7, #0]
 802072c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 802072e:	f000 fd29 	bl	8021184 <HAL_PWREx_EnableVddIO2>

}
 8020732:	bf00      	nop
 8020734:	3708      	adds	r7, #8
 8020736:	46bd      	mov	sp, r7
 8020738:	bd80      	pop	{r7, pc}
 802073a:	bf00      	nop
 802073c:	40021000 	.word	0x40021000

08020740 <SIGMA_Uart_Transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status SIGMA_Uart_Transmit_str(uint8_t *data)
{
 8020740:	b580      	push	{r7, lr}
 8020742:	b084      	sub	sp, #16
 8020744:	af00      	add	r7, sp, #0
 8020746:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8020748:	23ff      	movs	r3, #255	; 0xff
 802074a:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 802074c:	2300      	movs	r3, #0
 802074e:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8020750:	e002      	b.n	8020758 <SIGMA_Uart_Transmit_str+0x18>
  {
    length++;
 8020752:	89bb      	ldrh	r3, [r7, #12]
 8020754:	3301      	adds	r3, #1
 8020756:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8020758:	89bb      	ldrh	r3, [r7, #12]
 802075a:	687a      	ldr	r2, [r7, #4]
 802075c:	4413      	add	r3, r2
 802075e:	781b      	ldrb	r3, [r3, #0]
 8020760:	2b00      	cmp	r3, #0
 8020762:	d1f6      	bne.n	8020752 <SIGMA_Uart_Transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&hlpuart1, data, length, UART_TIMEOUT))
 8020764:	89ba      	ldrh	r2, [r7, #12]
 8020766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802076a:	6879      	ldr	r1, [r7, #4]
 802076c:	4806      	ldr	r0, [pc, #24]	; (8020788 <SIGMA_Uart_Transmit_str+0x48>)
 802076e:	f002 fa5d 	bl	8022c2c <HAL_UART_Transmit>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	d101      	bne.n	802077c <SIGMA_Uart_Transmit_str+0x3c>
  {
    status = UART_OK;
 8020778:	2300      	movs	r3, #0
 802077a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802077c:	7bfb      	ldrb	r3, [r7, #15]
}
 802077e:	4618      	mov	r0, r3
 8020780:	3710      	adds	r7, #16
 8020782:	46bd      	mov	sp, r7
 8020784:	bd80      	pop	{r7, pc}
 8020786:	bf00      	nop
 8020788:	20000028 	.word	0x20000028

0802078c <SIGMA_Uart_Receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status SIGMA_Uart_Receive(uint8_t *data)
{
 802078c:	b580      	push	{r7, lr}
 802078e:	b084      	sub	sp, #16
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8020794:	23ff      	movs	r3, #255	; 0xff
 8020796:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&hlpuart1, data, 1U, UART_TIMEOUT))
 8020798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802079c:	2201      	movs	r2, #1
 802079e:	6879      	ldr	r1, [r7, #4]
 80207a0:	4806      	ldr	r0, [pc, #24]	; (80207bc <SIGMA_Uart_Receive+0x30>)
 80207a2:	f002 fad1 	bl	8022d48 <HAL_UART_Receive>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d101      	bne.n	80207b0 <SIGMA_Uart_Receive+0x24>
  {
    status = UART_OK;
 80207ac:	2300      	movs	r3, #0
 80207ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80207b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80207b2:	4618      	mov	r0, r3
 80207b4:	3710      	adds	r7, #16
 80207b6:	46bd      	mov	sp, r7
 80207b8:	bd80      	pop	{r7, pc}
 80207ba:	bf00      	nop
 80207bc:	20000028 	.word	0x20000028

080207c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80207c0:	b480      	push	{r7}
 80207c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80207c4:	b672      	cpsid	i
}
 80207c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80207c8:	e7fe      	b.n	80207c8 <Error_Handler+0x8>
	...

080207cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80207cc:	b480      	push	{r7}
 80207ce:	b083      	sub	sp, #12
 80207d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80207d2:	4b0f      	ldr	r3, [pc, #60]	; (8020810 <HAL_MspInit+0x44>)
 80207d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207d6:	4a0e      	ldr	r2, [pc, #56]	; (8020810 <HAL_MspInit+0x44>)
 80207d8:	f043 0301 	orr.w	r3, r3, #1
 80207dc:	6613      	str	r3, [r2, #96]	; 0x60
 80207de:	4b0c      	ldr	r3, [pc, #48]	; (8020810 <HAL_MspInit+0x44>)
 80207e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207e2:	f003 0301 	and.w	r3, r3, #1
 80207e6:	607b      	str	r3, [r7, #4]
 80207e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80207ea:	4b09      	ldr	r3, [pc, #36]	; (8020810 <HAL_MspInit+0x44>)
 80207ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80207ee:	4a08      	ldr	r2, [pc, #32]	; (8020810 <HAL_MspInit+0x44>)
 80207f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80207f4:	6593      	str	r3, [r2, #88]	; 0x58
 80207f6:	4b06      	ldr	r3, [pc, #24]	; (8020810 <HAL_MspInit+0x44>)
 80207f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80207fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80207fe:	603b      	str	r3, [r7, #0]
 8020800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020802:	bf00      	nop
 8020804:	370c      	adds	r7, #12
 8020806:	46bd      	mov	sp, r7
 8020808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802080c:	4770      	bx	lr
 802080e:	bf00      	nop
 8020810:	40021000 	.word	0x40021000

08020814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b0ae      	sub	sp, #184	; 0xb8
 8020818:	af00      	add	r7, sp, #0
 802081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802081c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020820:	2200      	movs	r2, #0
 8020822:	601a      	str	r2, [r3, #0]
 8020824:	605a      	str	r2, [r3, #4]
 8020826:	609a      	str	r2, [r3, #8]
 8020828:	60da      	str	r2, [r3, #12]
 802082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 802082c:	f107 0310 	add.w	r3, r7, #16
 8020830:	2294      	movs	r2, #148	; 0x94
 8020832:	2100      	movs	r1, #0
 8020834:	4618      	mov	r0, r3
 8020836:	f003 f995 	bl	8023b64 <memset>
  if(huart->Instance==LPUART1)
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	4a22      	ldr	r2, [pc, #136]	; (80208c8 <HAL_UART_MspInit+0xb4>)
 8020840:	4293      	cmp	r3, r2
 8020842:	d13d      	bne.n	80208c0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8020844:	2320      	movs	r3, #32
 8020846:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8020848:	2300      	movs	r3, #0
 802084a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 802084c:	f107 0310 	add.w	r3, r7, #16
 8020850:	4618      	mov	r0, r3
 8020852:	f001 fc85 	bl	8022160 <HAL_RCCEx_PeriphCLKConfig>
 8020856:	4603      	mov	r3, r0
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 802085c:	f7ff ffb0 	bl	80207c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8020860:	4b1a      	ldr	r3, [pc, #104]	; (80208cc <HAL_UART_MspInit+0xb8>)
 8020862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020864:	4a19      	ldr	r2, [pc, #100]	; (80208cc <HAL_UART_MspInit+0xb8>)
 8020866:	f043 0301 	orr.w	r3, r3, #1
 802086a:	65d3      	str	r3, [r2, #92]	; 0x5c
 802086c:	4b17      	ldr	r3, [pc, #92]	; (80208cc <HAL_UART_MspInit+0xb8>)
 802086e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020870:	f003 0301 	and.w	r3, r3, #1
 8020874:	60fb      	str	r3, [r7, #12]
 8020876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020878:	4b14      	ldr	r3, [pc, #80]	; (80208cc <HAL_UART_MspInit+0xb8>)
 802087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802087c:	4a13      	ldr	r2, [pc, #76]	; (80208cc <HAL_UART_MspInit+0xb8>)
 802087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8020884:	4b11      	ldr	r3, [pc, #68]	; (80208cc <HAL_UART_MspInit+0xb8>)
 8020886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802088c:	60bb      	str	r3, [r7, #8]
 802088e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8020890:	f000 fc78 	bl	8021184 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8020894:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8020898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802089c:	2302      	movs	r3, #2
 802089e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208a2:	2300      	movs	r3, #0
 80208a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208a8:	2300      	movs	r3, #0
 80208aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80208ae:	2308      	movs	r3, #8
 80208b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80208b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80208b8:	4619      	mov	r1, r3
 80208ba:	4805      	ldr	r0, [pc, #20]	; (80208d0 <HAL_UART_MspInit+0xbc>)
 80208bc:	f000 fa78 	bl	8020db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80208c0:	bf00      	nop
 80208c2:	37b8      	adds	r7, #184	; 0xb8
 80208c4:	46bd      	mov	sp, r7
 80208c6:	bd80      	pop	{r7, pc}
 80208c8:	40008000 	.word	0x40008000
 80208cc:	40021000 	.word	0x40021000
 80208d0:	42021800 	.word	0x42021800

080208d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80208d4:	b480      	push	{r7}
 80208d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80208d8:	e7fe      	b.n	80208d8 <NMI_Handler+0x4>

080208da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80208da:	b480      	push	{r7}
 80208dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80208de:	e7fe      	b.n	80208de <HardFault_Handler+0x4>

080208e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80208e0:	b480      	push	{r7}
 80208e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80208e4:	e7fe      	b.n	80208e4 <MemManage_Handler+0x4>

080208e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80208e6:	b480      	push	{r7}
 80208e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80208ea:	e7fe      	b.n	80208ea <BusFault_Handler+0x4>

080208ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80208ec:	b480      	push	{r7}
 80208ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80208f0:	e7fe      	b.n	80208f0 <UsageFault_Handler+0x4>

080208f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80208f2:	b480      	push	{r7}
 80208f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80208f6:	bf00      	nop
 80208f8:	46bd      	mov	sp, r7
 80208fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208fe:	4770      	bx	lr

08020900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020900:	b480      	push	{r7}
 8020902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020904:	bf00      	nop
 8020906:	46bd      	mov	sp, r7
 8020908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802090c:	4770      	bx	lr

0802090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802090e:	b480      	push	{r7}
 8020910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020912:	bf00      	nop
 8020914:	46bd      	mov	sp, r7
 8020916:	f85d 7b04 	ldr.w	r7, [sp], #4
 802091a:	4770      	bx	lr

0802091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802091c:	b580      	push	{r7, lr}
 802091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020920:	f000 f942 	bl	8020ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020924:	bf00      	nop
 8020926:	bd80      	pop	{r7, pc}

08020928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020928:	b480      	push	{r7}
 802092a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 802092c:	4b06      	ldr	r3, [pc, #24]	; (8020948 <SystemInit+0x20>)
 802092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020932:	4a05      	ldr	r2, [pc, #20]	; (8020948 <SystemInit+0x20>)
 8020934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 802093c:	bf00      	nop
 802093e:	46bd      	mov	sp, r7
 8020940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020944:	4770      	bx	lr
 8020946:	bf00      	nop
 8020948:	e000ed00 	.word	0xe000ed00

0802094c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 802094c:	b480      	push	{r7}
 802094e:	b087      	sub	sp, #28
 8020950:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8020952:	4b4f      	ldr	r3, [pc, #316]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	f003 0308 	and.w	r3, r3, #8
 802095a:	2b00      	cmp	r3, #0
 802095c:	d107      	bne.n	802096e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 802095e:	4b4c      	ldr	r3, [pc, #304]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020964:	0a1b      	lsrs	r3, r3, #8
 8020966:	f003 030f 	and.w	r3, r3, #15
 802096a:	617b      	str	r3, [r7, #20]
 802096c:	e005      	b.n	802097a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 802096e:	4b48      	ldr	r3, [pc, #288]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	091b      	lsrs	r3, r3, #4
 8020974:	f003 030f 	and.w	r3, r3, #15
 8020978:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 802097a:	4a46      	ldr	r2, [pc, #280]	; (8020a94 <SystemCoreClockUpdate+0x148>)
 802097c:	697b      	ldr	r3, [r7, #20]
 802097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020982:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020984:	4b42      	ldr	r3, [pc, #264]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020986:	689b      	ldr	r3, [r3, #8]
 8020988:	f003 030c 	and.w	r3, r3, #12
 802098c:	2b0c      	cmp	r3, #12
 802098e:	d866      	bhi.n	8020a5e <SystemCoreClockUpdate+0x112>
 8020990:	a201      	add	r2, pc, #4	; (adr r2, 8020998 <SystemCoreClockUpdate+0x4c>)
 8020992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020996:	bf00      	nop
 8020998:	080209cd 	.word	0x080209cd
 802099c:	08020a5f 	.word	0x08020a5f
 80209a0:	08020a5f 	.word	0x08020a5f
 80209a4:	08020a5f 	.word	0x08020a5f
 80209a8:	080209d5 	.word	0x080209d5
 80209ac:	08020a5f 	.word	0x08020a5f
 80209b0:	08020a5f 	.word	0x08020a5f
 80209b4:	08020a5f 	.word	0x08020a5f
 80209b8:	080209dd 	.word	0x080209dd
 80209bc:	08020a5f 	.word	0x08020a5f
 80209c0:	08020a5f 	.word	0x08020a5f
 80209c4:	08020a5f 	.word	0x08020a5f
 80209c8:	080209e5 	.word	0x080209e5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80209cc:	4a32      	ldr	r2, [pc, #200]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 80209ce:	697b      	ldr	r3, [r7, #20]
 80209d0:	6013      	str	r3, [r2, #0]
      break;
 80209d2:	e048      	b.n	8020a66 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80209d4:	4b30      	ldr	r3, [pc, #192]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 80209d6:	4a31      	ldr	r2, [pc, #196]	; (8020a9c <SystemCoreClockUpdate+0x150>)
 80209d8:	601a      	str	r2, [r3, #0]
      break;
 80209da:	e044      	b.n	8020a66 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80209dc:	4b2e      	ldr	r3, [pc, #184]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 80209de:	4a30      	ldr	r2, [pc, #192]	; (8020aa0 <SystemCoreClockUpdate+0x154>)
 80209e0:	601a      	str	r2, [r3, #0]
      break;
 80209e2:	e040      	b.n	8020a66 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80209e4:	4b2a      	ldr	r3, [pc, #168]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 80209e6:	68db      	ldr	r3, [r3, #12]
 80209e8:	f003 0303 	and.w	r3, r3, #3
 80209ec:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80209ee:	4b28      	ldr	r3, [pc, #160]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 80209f0:	68db      	ldr	r3, [r3, #12]
 80209f2:	091b      	lsrs	r3, r3, #4
 80209f4:	f003 030f 	and.w	r3, r3, #15
 80209f8:	3301      	adds	r3, #1
 80209fa:	60bb      	str	r3, [r7, #8]
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	2b02      	cmp	r3, #2
 8020a00:	d003      	beq.n	8020a0a <SystemCoreClockUpdate+0xbe>
 8020a02:	68fb      	ldr	r3, [r7, #12]
 8020a04:	2b03      	cmp	r3, #3
 8020a06:	d006      	beq.n	8020a16 <SystemCoreClockUpdate+0xca>
 8020a08:	e00b      	b.n	8020a22 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8020a0a:	4a24      	ldr	r2, [pc, #144]	; (8020a9c <SystemCoreClockUpdate+0x150>)
 8020a0c:	68bb      	ldr	r3, [r7, #8]
 8020a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a12:	613b      	str	r3, [r7, #16]
          break;
 8020a14:	e00b      	b.n	8020a2e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8020a16:	4a22      	ldr	r2, [pc, #136]	; (8020aa0 <SystemCoreClockUpdate+0x154>)
 8020a18:	68bb      	ldr	r3, [r7, #8]
 8020a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a1e:	613b      	str	r3, [r7, #16]
          break;
 8020a20:	e005      	b.n	8020a2e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8020a22:	697a      	ldr	r2, [r7, #20]
 8020a24:	68bb      	ldr	r3, [r7, #8]
 8020a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a2a:	613b      	str	r3, [r7, #16]
          break;
 8020a2c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8020a2e:	4b18      	ldr	r3, [pc, #96]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020a30:	68db      	ldr	r3, [r3, #12]
 8020a32:	0a1b      	lsrs	r3, r3, #8
 8020a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020a38:	693b      	ldr	r3, [r7, #16]
 8020a3a:	fb02 f303 	mul.w	r3, r2, r3
 8020a3e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8020a40:	4b13      	ldr	r3, [pc, #76]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020a42:	68db      	ldr	r3, [r3, #12]
 8020a44:	0e5b      	lsrs	r3, r3, #25
 8020a46:	f003 0303 	and.w	r3, r3, #3
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	005b      	lsls	r3, r3, #1
 8020a4e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8020a50:	693a      	ldr	r2, [r7, #16]
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8020a58:	4a0f      	ldr	r2, [pc, #60]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 8020a5a:	6013      	str	r3, [r2, #0]
      break;
 8020a5c:	e003      	b.n	8020a66 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8020a5e:	4a0e      	ldr	r2, [pc, #56]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 8020a60:	697b      	ldr	r3, [r7, #20]
 8020a62:	6013      	str	r3, [r2, #0]
      break;
 8020a64:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8020a66:	4b0a      	ldr	r3, [pc, #40]	; (8020a90 <SystemCoreClockUpdate+0x144>)
 8020a68:	689b      	ldr	r3, [r3, #8]
 8020a6a:	091b      	lsrs	r3, r3, #4
 8020a6c:	f003 030f 	and.w	r3, r3, #15
 8020a70:	4a0c      	ldr	r2, [pc, #48]	; (8020aa4 <SystemCoreClockUpdate+0x158>)
 8020a72:	5cd3      	ldrb	r3, [r2, r3]
 8020a74:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8020a76:	4b08      	ldr	r3, [pc, #32]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 8020a78:	681a      	ldr	r2, [r3, #0]
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8020a80:	4a05      	ldr	r2, [pc, #20]	; (8020a98 <SystemCoreClockUpdate+0x14c>)
 8020a82:	6013      	str	r3, [r2, #0]
}
 8020a84:	bf00      	nop
 8020a86:	371c      	adds	r7, #28
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8e:	4770      	bx	lr
 8020a90:	40021000 	.word	0x40021000
 8020a94:	08023bc8 	.word	0x08023bc8
 8020a98:	20000000 	.word	0x20000000
 8020a9c:	00f42400 	.word	0x00f42400
 8020aa0:	007a1200 	.word	0x007a1200
 8020aa4:	08023bb0 	.word	0x08023bb0

08020aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8020aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8020aac:	f7ff ff3c 	bl	8020928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020ab0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020ab2:	e003      	b.n	8020abc <LoopCopyDataInit>

08020ab4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020ab4:	4b0b      	ldr	r3, [pc, #44]	; (8020ae4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8020ab6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020ab8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020aba:	3104      	adds	r1, #4

08020abc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020abc:	480a      	ldr	r0, [pc, #40]	; (8020ae8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020abe:	4b0b      	ldr	r3, [pc, #44]	; (8020aec <LoopForever+0xe>)
	adds	r2, r0, r1
 8020ac0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020ac2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020ac4:	d3f6      	bcc.n	8020ab4 <CopyDataInit>
	ldr	r2, =_sbss
 8020ac6:	4a0a      	ldr	r2, [pc, #40]	; (8020af0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8020ac8:	e002      	b.n	8020ad0 <LoopFillZerobss>

08020aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020aca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020acc:	f842 3b04 	str.w	r3, [r2], #4

08020ad0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020ad0:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <LoopForever+0x16>)
	cmp	r2, r3
 8020ad2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020ad4:	d3f9      	bcc.n	8020aca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8020ad6:	f003 f821 	bl	8023b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020ada:	f7ff fd51 	bl	8020580 <main>

08020ade <LoopForever>:

LoopForever:
    b LoopForever
 8020ade:	e7fe      	b.n	8020ade <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8020ae0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8020ae4:	08023c40 	.word	0x08023c40
	ldr	r0, =_sdata
 8020ae8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020aec:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8020af0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8020af4:	200000c4 	.word	0x200000c4

08020af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020af8:	e7fe      	b.n	8020af8 <ADC1_2_IRQHandler>

08020afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020afa:	b580      	push	{r7, lr}
 8020afc:	b082      	sub	sp, #8
 8020afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020b00:	2300      	movs	r3, #0
 8020b02:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8020b04:	2004      	movs	r0, #4
 8020b06:	f000 f921 	bl	8020d4c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8020b0a:	f7ff ff1f 	bl	802094c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020b0e:	2000      	movs	r0, #0
 8020b10:	f000 f80e 	bl	8020b30 <HAL_InitTick>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d002      	beq.n	8020b20 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8020b1a:	2301      	movs	r3, #1
 8020b1c:	71fb      	strb	r3, [r7, #7]
 8020b1e:	e001      	b.n	8020b24 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020b20:	f7ff fe54 	bl	80207cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020b24:	79fb      	ldrb	r3, [r7, #7]
}
 8020b26:	4618      	mov	r0, r3
 8020b28:	3708      	adds	r7, #8
 8020b2a:	46bd      	mov	sp, r7
 8020b2c:	bd80      	pop	{r7, pc}
	...

08020b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020b30:	b580      	push	{r7, lr}
 8020b32:	b084      	sub	sp, #16
 8020b34:	af00      	add	r7, sp, #0
 8020b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020b38:	2300      	movs	r3, #0
 8020b3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020b3c:	4b17      	ldr	r3, [pc, #92]	; (8020b9c <HAL_InitTick+0x6c>)
 8020b3e:	781b      	ldrb	r3, [r3, #0]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d023      	beq.n	8020b8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020b44:	4b16      	ldr	r3, [pc, #88]	; (8020ba0 <HAL_InitTick+0x70>)
 8020b46:	681a      	ldr	r2, [r3, #0]
 8020b48:	4b14      	ldr	r3, [pc, #80]	; (8020b9c <HAL_InitTick+0x6c>)
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	4619      	mov	r1, r3
 8020b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8020b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8020b5a:	4618      	mov	r0, r3
 8020b5c:	f000 f91b 	bl	8020d96 <HAL_SYSTICK_Config>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d10f      	bne.n	8020b86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	2b07      	cmp	r3, #7
 8020b6a:	d809      	bhi.n	8020b80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020b6c:	2200      	movs	r2, #0
 8020b6e:	6879      	ldr	r1, [r7, #4]
 8020b70:	f04f 30ff 	mov.w	r0, #4294967295
 8020b74:	f000 f8f5 	bl	8020d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020b78:	4a0a      	ldr	r2, [pc, #40]	; (8020ba4 <HAL_InitTick+0x74>)
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	6013      	str	r3, [r2, #0]
 8020b7e:	e007      	b.n	8020b90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020b80:	2301      	movs	r3, #1
 8020b82:	73fb      	strb	r3, [r7, #15]
 8020b84:	e004      	b.n	8020b90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020b86:	2301      	movs	r3, #1
 8020b88:	73fb      	strb	r3, [r7, #15]
 8020b8a:	e001      	b.n	8020b90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020b8c:	2301      	movs	r3, #1
 8020b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8020b92:	4618      	mov	r0, r3
 8020b94:	3710      	adds	r7, #16
 8020b96:	46bd      	mov	sp, r7
 8020b98:	bd80      	pop	{r7, pc}
 8020b9a:	bf00      	nop
 8020b9c:	20000008 	.word	0x20000008
 8020ba0:	20000000 	.word	0x20000000
 8020ba4:	20000004 	.word	0x20000004

08020ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020ba8:	b480      	push	{r7}
 8020baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020bac:	4b06      	ldr	r3, [pc, #24]	; (8020bc8 <HAL_IncTick+0x20>)
 8020bae:	781b      	ldrb	r3, [r3, #0]
 8020bb0:	461a      	mov	r2, r3
 8020bb2:	4b06      	ldr	r3, [pc, #24]	; (8020bcc <HAL_IncTick+0x24>)
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	4413      	add	r3, r2
 8020bb8:	4a04      	ldr	r2, [pc, #16]	; (8020bcc <HAL_IncTick+0x24>)
 8020bba:	6013      	str	r3, [r2, #0]
}
 8020bbc:	bf00      	nop
 8020bbe:	46bd      	mov	sp, r7
 8020bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc4:	4770      	bx	lr
 8020bc6:	bf00      	nop
 8020bc8:	20000008 	.word	0x20000008
 8020bcc:	200000c0 	.word	0x200000c0

08020bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020bd0:	b480      	push	{r7}
 8020bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8020bd4:	4b03      	ldr	r3, [pc, #12]	; (8020be4 <HAL_GetTick+0x14>)
 8020bd6:	681b      	ldr	r3, [r3, #0]
}
 8020bd8:	4618      	mov	r0, r3
 8020bda:	46bd      	mov	sp, r7
 8020bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020be0:	4770      	bx	lr
 8020be2:	bf00      	nop
 8020be4:	200000c0 	.word	0x200000c0

08020be8 <__NVIC_SetPriorityGrouping>:
{
 8020be8:	b480      	push	{r7}
 8020bea:	b085      	sub	sp, #20
 8020bec:	af00      	add	r7, sp, #0
 8020bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	f003 0307 	and.w	r3, r3, #7
 8020bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020bf8:	4b0c      	ldr	r3, [pc, #48]	; (8020c2c <__NVIC_SetPriorityGrouping+0x44>)
 8020bfa:	68db      	ldr	r3, [r3, #12]
 8020bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020bfe:	68ba      	ldr	r2, [r7, #8]
 8020c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020c04:	4013      	ands	r3, r2
 8020c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020c0c:	68bb      	ldr	r3, [r7, #8]
 8020c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020c1a:	4a04      	ldr	r2, [pc, #16]	; (8020c2c <__NVIC_SetPriorityGrouping+0x44>)
 8020c1c:	68bb      	ldr	r3, [r7, #8]
 8020c1e:	60d3      	str	r3, [r2, #12]
}
 8020c20:	bf00      	nop
 8020c22:	3714      	adds	r7, #20
 8020c24:	46bd      	mov	sp, r7
 8020c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c2a:	4770      	bx	lr
 8020c2c:	e000ed00 	.word	0xe000ed00

08020c30 <__NVIC_GetPriorityGrouping>:
{
 8020c30:	b480      	push	{r7}
 8020c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020c34:	4b04      	ldr	r3, [pc, #16]	; (8020c48 <__NVIC_GetPriorityGrouping+0x18>)
 8020c36:	68db      	ldr	r3, [r3, #12]
 8020c38:	0a1b      	lsrs	r3, r3, #8
 8020c3a:	f003 0307 	and.w	r3, r3, #7
}
 8020c3e:	4618      	mov	r0, r3
 8020c40:	46bd      	mov	sp, r7
 8020c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c46:	4770      	bx	lr
 8020c48:	e000ed00 	.word	0xe000ed00

08020c4c <__NVIC_SetPriority>:
{
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	4603      	mov	r3, r0
 8020c54:	6039      	str	r1, [r7, #0]
 8020c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020c5c:	2b00      	cmp	r3, #0
 8020c5e:	db0a      	blt.n	8020c76 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020c60:	683b      	ldr	r3, [r7, #0]
 8020c62:	b2da      	uxtb	r2, r3
 8020c64:	490c      	ldr	r1, [pc, #48]	; (8020c98 <__NVIC_SetPriority+0x4c>)
 8020c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020c6a:	0152      	lsls	r2, r2, #5
 8020c6c:	b2d2      	uxtb	r2, r2
 8020c6e:	440b      	add	r3, r1
 8020c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8020c74:	e00a      	b.n	8020c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020c76:	683b      	ldr	r3, [r7, #0]
 8020c78:	b2da      	uxtb	r2, r3
 8020c7a:	4908      	ldr	r1, [pc, #32]	; (8020c9c <__NVIC_SetPriority+0x50>)
 8020c7c:	79fb      	ldrb	r3, [r7, #7]
 8020c7e:	f003 030f 	and.w	r3, r3, #15
 8020c82:	3b04      	subs	r3, #4
 8020c84:	0152      	lsls	r2, r2, #5
 8020c86:	b2d2      	uxtb	r2, r2
 8020c88:	440b      	add	r3, r1
 8020c8a:	761a      	strb	r2, [r3, #24]
}
 8020c8c:	bf00      	nop
 8020c8e:	370c      	adds	r7, #12
 8020c90:	46bd      	mov	sp, r7
 8020c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c96:	4770      	bx	lr
 8020c98:	e000e100 	.word	0xe000e100
 8020c9c:	e000ed00 	.word	0xe000ed00

08020ca0 <NVIC_EncodePriority>:
{
 8020ca0:	b480      	push	{r7}
 8020ca2:	b089      	sub	sp, #36	; 0x24
 8020ca4:	af00      	add	r7, sp, #0
 8020ca6:	60f8      	str	r0, [r7, #12]
 8020ca8:	60b9      	str	r1, [r7, #8]
 8020caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	f003 0307 	and.w	r3, r3, #7
 8020cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020cb4:	69fb      	ldr	r3, [r7, #28]
 8020cb6:	f1c3 0307 	rsb	r3, r3, #7
 8020cba:	2b03      	cmp	r3, #3
 8020cbc:	bf28      	it	cs
 8020cbe:	2303      	movcs	r3, #3
 8020cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020cc2:	69fb      	ldr	r3, [r7, #28]
 8020cc4:	3303      	adds	r3, #3
 8020cc6:	2b06      	cmp	r3, #6
 8020cc8:	d902      	bls.n	8020cd0 <NVIC_EncodePriority+0x30>
 8020cca:	69fb      	ldr	r3, [r7, #28]
 8020ccc:	3b04      	subs	r3, #4
 8020cce:	e000      	b.n	8020cd2 <NVIC_EncodePriority+0x32>
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8020cd8:	69bb      	ldr	r3, [r7, #24]
 8020cda:	fa02 f303 	lsl.w	r3, r2, r3
 8020cde:	43da      	mvns	r2, r3
 8020ce0:	68bb      	ldr	r3, [r7, #8]
 8020ce2:	401a      	ands	r2, r3
 8020ce4:	697b      	ldr	r3, [r7, #20]
 8020ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8020cec:	697b      	ldr	r3, [r7, #20]
 8020cee:	fa01 f303 	lsl.w	r3, r1, r3
 8020cf2:	43d9      	mvns	r1, r3
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020cf8:	4313      	orrs	r3, r2
}
 8020cfa:	4618      	mov	r0, r3
 8020cfc:	3724      	adds	r7, #36	; 0x24
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d04:	4770      	bx	lr
	...

08020d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b082      	sub	sp, #8
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	3b01      	subs	r3, #1
 8020d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020d18:	d301      	bcc.n	8020d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020d1a:	2301      	movs	r3, #1
 8020d1c:	e00f      	b.n	8020d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020d1e:	4a0a      	ldr	r2, [pc, #40]	; (8020d48 <SysTick_Config+0x40>)
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	3b01      	subs	r3, #1
 8020d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020d26:	2107      	movs	r1, #7
 8020d28:	f04f 30ff 	mov.w	r0, #4294967295
 8020d2c:	f7ff ff8e 	bl	8020c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020d30:	4b05      	ldr	r3, [pc, #20]	; (8020d48 <SysTick_Config+0x40>)
 8020d32:	2200      	movs	r2, #0
 8020d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020d36:	4b04      	ldr	r3, [pc, #16]	; (8020d48 <SysTick_Config+0x40>)
 8020d38:	2207      	movs	r2, #7
 8020d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020d3c:	2300      	movs	r3, #0
}
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	e000e010 	.word	0xe000e010

08020d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b082      	sub	sp, #8
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020d54:	6878      	ldr	r0, [r7, #4]
 8020d56:	f7ff ff47 	bl	8020be8 <__NVIC_SetPriorityGrouping>
}
 8020d5a:	bf00      	nop
 8020d5c:	3708      	adds	r7, #8
 8020d5e:	46bd      	mov	sp, r7
 8020d60:	bd80      	pop	{r7, pc}

08020d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020d62:	b580      	push	{r7, lr}
 8020d64:	b086      	sub	sp, #24
 8020d66:	af00      	add	r7, sp, #0
 8020d68:	4603      	mov	r3, r0
 8020d6a:	60b9      	str	r1, [r7, #8]
 8020d6c:	607a      	str	r2, [r7, #4]
 8020d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020d70:	f7ff ff5e 	bl	8020c30 <__NVIC_GetPriorityGrouping>
 8020d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020d76:	687a      	ldr	r2, [r7, #4]
 8020d78:	68b9      	ldr	r1, [r7, #8]
 8020d7a:	6978      	ldr	r0, [r7, #20]
 8020d7c:	f7ff ff90 	bl	8020ca0 <NVIC_EncodePriority>
 8020d80:	4602      	mov	r2, r0
 8020d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020d86:	4611      	mov	r1, r2
 8020d88:	4618      	mov	r0, r3
 8020d8a:	f7ff ff5f 	bl	8020c4c <__NVIC_SetPriority>
}
 8020d8e:	bf00      	nop
 8020d90:	3718      	adds	r7, #24
 8020d92:	46bd      	mov	sp, r7
 8020d94:	bd80      	pop	{r7, pc}

08020d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020d96:	b580      	push	{r7, lr}
 8020d98:	b082      	sub	sp, #8
 8020d9a:	af00      	add	r7, sp, #0
 8020d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8020d9e:	6878      	ldr	r0, [r7, #4]
 8020da0:	f7ff ffb2 	bl	8020d08 <SysTick_Config>
 8020da4:	4603      	mov	r3, r0
}
 8020da6:	4618      	mov	r0, r3
 8020da8:	3708      	adds	r7, #8
 8020daa:	46bd      	mov	sp, r7
 8020dac:	bd80      	pop	{r7, pc}
	...

08020db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020db0:	b480      	push	{r7}
 8020db2:	b087      	sub	sp, #28
 8020db4:	af00      	add	r7, sp, #0
 8020db6:	6078      	str	r0, [r7, #4]
 8020db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8020dbe:	e158      	b.n	8021072 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8020dc0:	683b      	ldr	r3, [r7, #0]
 8020dc2:	681a      	ldr	r2, [r3, #0]
 8020dc4:	2101      	movs	r1, #1
 8020dc6:	697b      	ldr	r3, [r7, #20]
 8020dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8020dcc:	4013      	ands	r3, r2
 8020dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8020dd0:	68fb      	ldr	r3, [r7, #12]
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	f000 814a 	beq.w	802106c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8020dd8:	683b      	ldr	r3, [r7, #0]
 8020dda:	685b      	ldr	r3, [r3, #4]
 8020ddc:	f003 0303 	and.w	r3, r3, #3
 8020de0:	2b01      	cmp	r3, #1
 8020de2:	d005      	beq.n	8020df0 <HAL_GPIO_Init+0x40>
 8020de4:	683b      	ldr	r3, [r7, #0]
 8020de6:	685b      	ldr	r3, [r3, #4]
 8020de8:	f003 0303 	and.w	r3, r3, #3
 8020dec:	2b02      	cmp	r3, #2
 8020dee:	d130      	bne.n	8020e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	689b      	ldr	r3, [r3, #8]
 8020df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8020df6:	697b      	ldr	r3, [r7, #20]
 8020df8:	005b      	lsls	r3, r3, #1
 8020dfa:	2203      	movs	r2, #3
 8020dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8020e00:	43db      	mvns	r3, r3
 8020e02:	693a      	ldr	r2, [r7, #16]
 8020e04:	4013      	ands	r3, r2
 8020e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020e08:	683b      	ldr	r3, [r7, #0]
 8020e0a:	68da      	ldr	r2, [r3, #12]
 8020e0c:	697b      	ldr	r3, [r7, #20]
 8020e0e:	005b      	lsls	r3, r3, #1
 8020e10:	fa02 f303 	lsl.w	r3, r2, r3
 8020e14:	693a      	ldr	r2, [r7, #16]
 8020e16:	4313      	orrs	r3, r2
 8020e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	693a      	ldr	r2, [r7, #16]
 8020e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	685b      	ldr	r3, [r3, #4]
 8020e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8020e26:	2201      	movs	r2, #1
 8020e28:	697b      	ldr	r3, [r7, #20]
 8020e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8020e2e:	43db      	mvns	r3, r3
 8020e30:	693a      	ldr	r2, [r7, #16]
 8020e32:	4013      	ands	r3, r2
 8020e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	685b      	ldr	r3, [r3, #4]
 8020e3a:	091b      	lsrs	r3, r3, #4
 8020e3c:	f003 0201 	and.w	r2, r3, #1
 8020e40:	697b      	ldr	r3, [r7, #20]
 8020e42:	fa02 f303 	lsl.w	r3, r2, r3
 8020e46:	693a      	ldr	r2, [r7, #16]
 8020e48:	4313      	orrs	r3, r2
 8020e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	693a      	ldr	r2, [r7, #16]
 8020e50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	685b      	ldr	r3, [r3, #4]
 8020e56:	f003 0303 	and.w	r3, r3, #3
 8020e5a:	2b03      	cmp	r3, #3
 8020e5c:	d017      	beq.n	8020e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	68db      	ldr	r3, [r3, #12]
 8020e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8020e64:	697b      	ldr	r3, [r7, #20]
 8020e66:	005b      	lsls	r3, r3, #1
 8020e68:	2203      	movs	r2, #3
 8020e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8020e6e:	43db      	mvns	r3, r3
 8020e70:	693a      	ldr	r2, [r7, #16]
 8020e72:	4013      	ands	r3, r2
 8020e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020e76:	683b      	ldr	r3, [r7, #0]
 8020e78:	689a      	ldr	r2, [r3, #8]
 8020e7a:	697b      	ldr	r3, [r7, #20]
 8020e7c:	005b      	lsls	r3, r3, #1
 8020e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8020e82:	693a      	ldr	r2, [r7, #16]
 8020e84:	4313      	orrs	r3, r2
 8020e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	693a      	ldr	r2, [r7, #16]
 8020e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020e8e:	683b      	ldr	r3, [r7, #0]
 8020e90:	685b      	ldr	r3, [r3, #4]
 8020e92:	f003 0303 	and.w	r3, r3, #3
 8020e96:	2b02      	cmp	r3, #2
 8020e98:	d123      	bne.n	8020ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020e9a:	697b      	ldr	r3, [r7, #20]
 8020e9c:	08da      	lsrs	r2, r3, #3
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	3208      	adds	r2, #8
 8020ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8020ea8:	697b      	ldr	r3, [r7, #20]
 8020eaa:	f003 0307 	and.w	r3, r3, #7
 8020eae:	009b      	lsls	r3, r3, #2
 8020eb0:	220f      	movs	r2, #15
 8020eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8020eb6:	43db      	mvns	r3, r3
 8020eb8:	693a      	ldr	r2, [r7, #16]
 8020eba:	4013      	ands	r3, r2
 8020ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8020ebe:	683b      	ldr	r3, [r7, #0]
 8020ec0:	691a      	ldr	r2, [r3, #16]
 8020ec2:	697b      	ldr	r3, [r7, #20]
 8020ec4:	f003 0307 	and.w	r3, r3, #7
 8020ec8:	009b      	lsls	r3, r3, #2
 8020eca:	fa02 f303 	lsl.w	r3, r2, r3
 8020ece:	693a      	ldr	r2, [r7, #16]
 8020ed0:	4313      	orrs	r3, r2
 8020ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8020ed4:	697b      	ldr	r3, [r7, #20]
 8020ed6:	08da      	lsrs	r2, r3, #3
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	3208      	adds	r2, #8
 8020edc:	6939      	ldr	r1, [r7, #16]
 8020ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	681b      	ldr	r3, [r3, #0]
 8020ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8020ee8:	697b      	ldr	r3, [r7, #20]
 8020eea:	005b      	lsls	r3, r3, #1
 8020eec:	2203      	movs	r2, #3
 8020eee:	fa02 f303 	lsl.w	r3, r2, r3
 8020ef2:	43db      	mvns	r3, r3
 8020ef4:	693a      	ldr	r2, [r7, #16]
 8020ef6:	4013      	ands	r3, r2
 8020ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020efa:	683b      	ldr	r3, [r7, #0]
 8020efc:	685b      	ldr	r3, [r3, #4]
 8020efe:	f003 0203 	and.w	r2, r3, #3
 8020f02:	697b      	ldr	r3, [r7, #20]
 8020f04:	005b      	lsls	r3, r3, #1
 8020f06:	fa02 f303 	lsl.w	r3, r2, r3
 8020f0a:	693a      	ldr	r2, [r7, #16]
 8020f0c:	4313      	orrs	r3, r2
 8020f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	693a      	ldr	r2, [r7, #16]
 8020f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8020f16:	683b      	ldr	r3, [r7, #0]
 8020f18:	685b      	ldr	r3, [r3, #4]
 8020f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	f000 80a4 	beq.w	802106c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8020f24:	4a5a      	ldr	r2, [pc, #360]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8020f26:	697b      	ldr	r3, [r7, #20]
 8020f28:	089b      	lsrs	r3, r3, #2
 8020f2a:	3318      	adds	r3, #24
 8020f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020f30:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8020f32:	697b      	ldr	r3, [r7, #20]
 8020f34:	f003 0303 	and.w	r3, r3, #3
 8020f38:	00db      	lsls	r3, r3, #3
 8020f3a:	220f      	movs	r2, #15
 8020f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8020f40:	43db      	mvns	r3, r3
 8020f42:	693a      	ldr	r2, [r7, #16]
 8020f44:	4013      	ands	r3, r2
 8020f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	4a52      	ldr	r2, [pc, #328]	; (8021094 <HAL_GPIO_Init+0x2e4>)
 8020f4c:	4293      	cmp	r3, r2
 8020f4e:	d025      	beq.n	8020f9c <HAL_GPIO_Init+0x1ec>
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	4a51      	ldr	r2, [pc, #324]	; (8021098 <HAL_GPIO_Init+0x2e8>)
 8020f54:	4293      	cmp	r3, r2
 8020f56:	d01f      	beq.n	8020f98 <HAL_GPIO_Init+0x1e8>
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	4a50      	ldr	r2, [pc, #320]	; (802109c <HAL_GPIO_Init+0x2ec>)
 8020f5c:	4293      	cmp	r3, r2
 8020f5e:	d019      	beq.n	8020f94 <HAL_GPIO_Init+0x1e4>
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	4a4f      	ldr	r2, [pc, #316]	; (80210a0 <HAL_GPIO_Init+0x2f0>)
 8020f64:	4293      	cmp	r3, r2
 8020f66:	d013      	beq.n	8020f90 <HAL_GPIO_Init+0x1e0>
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	4a4e      	ldr	r2, [pc, #312]	; (80210a4 <HAL_GPIO_Init+0x2f4>)
 8020f6c:	4293      	cmp	r3, r2
 8020f6e:	d00d      	beq.n	8020f8c <HAL_GPIO_Init+0x1dc>
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	4a4d      	ldr	r2, [pc, #308]	; (80210a8 <HAL_GPIO_Init+0x2f8>)
 8020f74:	4293      	cmp	r3, r2
 8020f76:	d007      	beq.n	8020f88 <HAL_GPIO_Init+0x1d8>
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	4a4c      	ldr	r2, [pc, #304]	; (80210ac <HAL_GPIO_Init+0x2fc>)
 8020f7c:	4293      	cmp	r3, r2
 8020f7e:	d101      	bne.n	8020f84 <HAL_GPIO_Init+0x1d4>
 8020f80:	2306      	movs	r3, #6
 8020f82:	e00c      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f84:	2307      	movs	r3, #7
 8020f86:	e00a      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f88:	2305      	movs	r3, #5
 8020f8a:	e008      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f8c:	2304      	movs	r3, #4
 8020f8e:	e006      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f90:	2303      	movs	r3, #3
 8020f92:	e004      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f94:	2302      	movs	r3, #2
 8020f96:	e002      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f98:	2301      	movs	r3, #1
 8020f9a:	e000      	b.n	8020f9e <HAL_GPIO_Init+0x1ee>
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	697a      	ldr	r2, [r7, #20]
 8020fa0:	f002 0203 	and.w	r2, r2, #3
 8020fa4:	00d2      	lsls	r2, r2, #3
 8020fa6:	4093      	lsls	r3, r2
 8020fa8:	693a      	ldr	r2, [r7, #16]
 8020faa:	4313      	orrs	r3, r2
 8020fac:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8020fae:	4938      	ldr	r1, [pc, #224]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8020fb0:	697b      	ldr	r3, [r7, #20]
 8020fb2:	089b      	lsrs	r3, r3, #2
 8020fb4:	3318      	adds	r3, #24
 8020fb6:	693a      	ldr	r2, [r7, #16]
 8020fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8020fbc:	4b34      	ldr	r3, [pc, #208]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8020fbe:	681b      	ldr	r3, [r3, #0]
 8020fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	43db      	mvns	r3, r3
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	4013      	ands	r3, r2
 8020fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8020fcc:	683b      	ldr	r3, [r7, #0]
 8020fce:	685b      	ldr	r3, [r3, #4]
 8020fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d003      	beq.n	8020fe0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8020fd8:	693a      	ldr	r2, [r7, #16]
 8020fda:	68fb      	ldr	r3, [r7, #12]
 8020fdc:	4313      	orrs	r3, r2
 8020fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8020fe0:	4a2b      	ldr	r2, [pc, #172]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8020fe2:	693b      	ldr	r3, [r7, #16]
 8020fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8020fe6:	4b2a      	ldr	r3, [pc, #168]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8020fe8:	685b      	ldr	r3, [r3, #4]
 8020fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020fec:	68fb      	ldr	r3, [r7, #12]
 8020fee:	43db      	mvns	r3, r3
 8020ff0:	693a      	ldr	r2, [r7, #16]
 8020ff2:	4013      	ands	r3, r2
 8020ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8020ff6:	683b      	ldr	r3, [r7, #0]
 8020ff8:	685b      	ldr	r3, [r3, #4]
 8020ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d003      	beq.n	802100a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8021002:	693a      	ldr	r2, [r7, #16]
 8021004:	68fb      	ldr	r3, [r7, #12]
 8021006:	4313      	orrs	r3, r2
 8021008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 802100a:	4a21      	ldr	r2, [pc, #132]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 802100c:	693b      	ldr	r3, [r7, #16]
 802100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8021010:	4b1f      	ldr	r3, [pc, #124]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8021012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	43db      	mvns	r3, r3
 802101c:	693a      	ldr	r2, [r7, #16]
 802101e:	4013      	ands	r3, r2
 8021020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8021022:	683b      	ldr	r3, [r7, #0]
 8021024:	685b      	ldr	r3, [r3, #4]
 8021026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802102a:	2b00      	cmp	r3, #0
 802102c:	d003      	beq.n	8021036 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	68fb      	ldr	r3, [r7, #12]
 8021032:	4313      	orrs	r3, r2
 8021034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8021036:	4a16      	ldr	r2, [pc, #88]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8021038:	693b      	ldr	r3, [r7, #16]
 802103a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 802103e:	4b14      	ldr	r3, [pc, #80]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8021040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8021046:	68fb      	ldr	r3, [r7, #12]
 8021048:	43db      	mvns	r3, r3
 802104a:	693a      	ldr	r2, [r7, #16]
 802104c:	4013      	ands	r3, r2
 802104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8021050:	683b      	ldr	r3, [r7, #0]
 8021052:	685b      	ldr	r3, [r3, #4]
 8021054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021058:	2b00      	cmp	r3, #0
 802105a:	d003      	beq.n	8021064 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 802105c:	693a      	ldr	r2, [r7, #16]
 802105e:	68fb      	ldr	r3, [r7, #12]
 8021060:	4313      	orrs	r3, r2
 8021062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8021064:	4a0a      	ldr	r2, [pc, #40]	; (8021090 <HAL_GPIO_Init+0x2e0>)
 8021066:	693b      	ldr	r3, [r7, #16]
 8021068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 802106c:	697b      	ldr	r3, [r7, #20]
 802106e:	3301      	adds	r3, #1
 8021070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8021072:	683b      	ldr	r3, [r7, #0]
 8021074:	681a      	ldr	r2, [r3, #0]
 8021076:	697b      	ldr	r3, [r7, #20]
 8021078:	fa22 f303 	lsr.w	r3, r2, r3
 802107c:	2b00      	cmp	r3, #0
 802107e:	f47f ae9f 	bne.w	8020dc0 <HAL_GPIO_Init+0x10>
  }
}
 8021082:	bf00      	nop
 8021084:	bf00      	nop
 8021086:	371c      	adds	r7, #28
 8021088:	46bd      	mov	sp, r7
 802108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802108e:	4770      	bx	lr
 8021090:	4002f400 	.word	0x4002f400
 8021094:	42020000 	.word	0x42020000
 8021098:	42020400 	.word	0x42020400
 802109c:	42020800 	.word	0x42020800
 80210a0:	42020c00 	.word	0x42020c00
 80210a4:	42021000 	.word	0x42021000
 80210a8:	42021400 	.word	0x42021400
 80210ac:	42021800 	.word	0x42021800

080210b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80210b0:	b480      	push	{r7}
 80210b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80210b4:	4b04      	ldr	r3, [pc, #16]	; (80210c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80210bc:	4618      	mov	r0, r3
 80210be:	46bd      	mov	sp, r7
 80210c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210c4:	4770      	bx	lr
 80210c6:	bf00      	nop
 80210c8:	40007000 	.word	0x40007000

080210cc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80210cc:	b580      	push	{r7, lr}
 80210ce:	b084      	sub	sp, #16
 80210d0:	af00      	add	r7, sp, #0
 80210d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80210d4:	4b27      	ldr	r3, [pc, #156]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80210dc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80210de:	f000 f861 	bl	80211a4 <HAL_PWREx_SMPS_GetEffectiveMode>
 80210e2:	4603      	mov	r3, r0
 80210e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80210e8:	d101      	bne.n	80210ee <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80210ea:	2301      	movs	r3, #1
 80210ec:	e03e      	b.n	802116c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80210ee:	4b21      	ldr	r3, [pc, #132]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80210f0:	68db      	ldr	r3, [r3, #12]
 80210f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80210f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80210fa:	d101      	bne.n	8021100 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80210fc:	2301      	movs	r3, #1
 80210fe:	e035      	b.n	802116c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8021100:	68ba      	ldr	r2, [r7, #8]
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	429a      	cmp	r2, r3
 8021106:	d101      	bne.n	802110c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8021108:	2300      	movs	r3, #0
 802110a:	e02f      	b.n	802116c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 802110c:	4b19      	ldr	r3, [pc, #100]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8021114:	4917      	ldr	r1, [pc, #92]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	4313      	orrs	r3, r2
 802111a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 802111c:	4b16      	ldr	r3, [pc, #88]	; (8021178 <HAL_PWREx_ControlVoltageScaling+0xac>)
 802111e:	681b      	ldr	r3, [r3, #0]
 8021120:	095b      	lsrs	r3, r3, #5
 8021122:	4a16      	ldr	r2, [pc, #88]	; (802117c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8021124:	fba2 2303 	umull	r2, r3, r2, r3
 8021128:	09db      	lsrs	r3, r3, #7
 802112a:	2232      	movs	r2, #50	; 0x32
 802112c:	fb02 f303 	mul.w	r3, r2, r3
 8021130:	4a13      	ldr	r2, [pc, #76]	; (8021180 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8021132:	fba2 2303 	umull	r2, r3, r2, r3
 8021136:	08db      	lsrs	r3, r3, #3
 8021138:	3301      	adds	r3, #1
 802113a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802113c:	e002      	b.n	8021144 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 802113e:	68fb      	ldr	r3, [r7, #12]
 8021140:	3b01      	subs	r3, #1
 8021142:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021144:	4b0b      	ldr	r3, [pc, #44]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8021146:	695b      	ldr	r3, [r3, #20]
 8021148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021150:	d102      	bne.n	8021158 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8021152:	68fb      	ldr	r3, [r7, #12]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d1f2      	bne.n	802113e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021158:	4b06      	ldr	r3, [pc, #24]	; (8021174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 802115a:	695b      	ldr	r3, [r3, #20]
 802115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021164:	d101      	bne.n	802116a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8021166:	2303      	movs	r3, #3
 8021168:	e000      	b.n	802116c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 802116a:	2300      	movs	r3, #0
}
 802116c:	4618      	mov	r0, r3
 802116e:	3710      	adds	r7, #16
 8021170:	46bd      	mov	sp, r7
 8021172:	bd80      	pop	{r7, pc}
 8021174:	40007000 	.word	0x40007000
 8021178:	20000000 	.word	0x20000000
 802117c:	0a7c5ac5 	.word	0x0a7c5ac5
 8021180:	cccccccd 	.word	0xcccccccd

08021184 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8021184:	b480      	push	{r7}
 8021186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8021188:	4b05      	ldr	r3, [pc, #20]	; (80211a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 802118a:	685b      	ldr	r3, [r3, #4]
 802118c:	4a04      	ldr	r2, [pc, #16]	; (80211a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 802118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021192:	6053      	str	r3, [r2, #4]
}
 8021194:	bf00      	nop
 8021196:	46bd      	mov	sp, r7
 8021198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802119c:	4770      	bx	lr
 802119e:	bf00      	nop
 80211a0:	40007000 	.word	0x40007000

080211a4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80211a4:	b480      	push	{r7}
 80211a6:	b083      	sub	sp, #12
 80211a8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80211aa:	4b0f      	ldr	r3, [pc, #60]	; (80211e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80211ac:	691b      	ldr	r3, [r3, #16]
 80211ae:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80211b0:	683b      	ldr	r3, [r7, #0]
 80211b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d003      	beq.n	80211c2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80211ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80211be:	607b      	str	r3, [r7, #4]
 80211c0:	e00a      	b.n	80211d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80211c2:	683b      	ldr	r3, [r7, #0]
 80211c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d103      	bne.n	80211d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80211cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80211d0:	607b      	str	r3, [r7, #4]
 80211d2:	e001      	b.n	80211d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80211d4:	2300      	movs	r3, #0
 80211d6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80211d8:	687b      	ldr	r3, [r7, #4]
}
 80211da:	4618      	mov	r0, r3
 80211dc:	370c      	adds	r7, #12
 80211de:	46bd      	mov	sp, r7
 80211e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211e4:	4770      	bx	lr
 80211e6:	bf00      	nop
 80211e8:	40007000 	.word	0x40007000

080211ec <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80211ec:	b580      	push	{r7, lr}
 80211ee:	b088      	sub	sp, #32
 80211f0:	af00      	add	r7, sp, #0
 80211f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d102      	bne.n	8021200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80211fa:	2301      	movs	r3, #1
 80211fc:	f000 bcc2 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021200:	4b99      	ldr	r3, [pc, #612]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021202:	689b      	ldr	r3, [r3, #8]
 8021204:	f003 030c 	and.w	r3, r3, #12
 8021208:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802120a:	4b97      	ldr	r3, [pc, #604]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802120c:	68db      	ldr	r3, [r3, #12]
 802120e:	f003 0303 	and.w	r3, r3, #3
 8021212:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	f003 0310 	and.w	r3, r3, #16
 802121c:	2b00      	cmp	r3, #0
 802121e:	f000 80e9 	beq.w	80213f4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8021222:	69bb      	ldr	r3, [r7, #24]
 8021224:	2b00      	cmp	r3, #0
 8021226:	d006      	beq.n	8021236 <HAL_RCC_OscConfig+0x4a>
 8021228:	69bb      	ldr	r3, [r7, #24]
 802122a:	2b0c      	cmp	r3, #12
 802122c:	f040 8083 	bne.w	8021336 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021230:	697b      	ldr	r3, [r7, #20]
 8021232:	2b01      	cmp	r3, #1
 8021234:	d17f      	bne.n	8021336 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021236:	4b8c      	ldr	r3, [pc, #560]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	f003 0302 	and.w	r3, r3, #2
 802123e:	2b00      	cmp	r3, #0
 8021240:	d006      	beq.n	8021250 <HAL_RCC_OscConfig+0x64>
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	69db      	ldr	r3, [r3, #28]
 8021246:	2b00      	cmp	r3, #0
 8021248:	d102      	bne.n	8021250 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 802124a:	2301      	movs	r3, #1
 802124c:	f000 bc9a 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021254:	4b84      	ldr	r3, [pc, #528]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	f003 0308 	and.w	r3, r3, #8
 802125c:	2b00      	cmp	r3, #0
 802125e:	d004      	beq.n	802126a <HAL_RCC_OscConfig+0x7e>
 8021260:	4b81      	ldr	r3, [pc, #516]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021268:	e005      	b.n	8021276 <HAL_RCC_OscConfig+0x8a>
 802126a:	4b7f      	ldr	r3, [pc, #508]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021270:	091b      	lsrs	r3, r3, #4
 8021272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021276:	4293      	cmp	r3, r2
 8021278:	d224      	bcs.n	80212c4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802127e:	4618      	mov	r0, r3
 8021280:	f000 fe9c 	bl	8021fbc <RCC_SetFlashLatencyFromMSIRange>
 8021284:	4603      	mov	r3, r0
 8021286:	2b00      	cmp	r3, #0
 8021288:	d002      	beq.n	8021290 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 802128a:	2301      	movs	r3, #1
 802128c:	f000 bc7a 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021290:	4b75      	ldr	r3, [pc, #468]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	4a74      	ldr	r2, [pc, #464]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021296:	f043 0308 	orr.w	r3, r3, #8
 802129a:	6013      	str	r3, [r2, #0]
 802129c:	4b72      	ldr	r3, [pc, #456]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212a8:	496f      	ldr	r1, [pc, #444]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212aa:	4313      	orrs	r3, r2
 80212ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80212ae:	4b6e      	ldr	r3, [pc, #440]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212b0:	685b      	ldr	r3, [r3, #4]
 80212b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	6a1b      	ldr	r3, [r3, #32]
 80212ba:	021b      	lsls	r3, r3, #8
 80212bc:	496a      	ldr	r1, [pc, #424]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212be:	4313      	orrs	r3, r2
 80212c0:	604b      	str	r3, [r1, #4]
 80212c2:	e026      	b.n	8021312 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80212c4:	4b68      	ldr	r3, [pc, #416]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	4a67      	ldr	r2, [pc, #412]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212ca:	f043 0308 	orr.w	r3, r3, #8
 80212ce:	6013      	str	r3, [r2, #0]
 80212d0:	4b65      	ldr	r3, [pc, #404]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212dc:	4962      	ldr	r1, [pc, #392]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212de:	4313      	orrs	r3, r2
 80212e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80212e2:	4b61      	ldr	r3, [pc, #388]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212e4:	685b      	ldr	r3, [r3, #4]
 80212e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	6a1b      	ldr	r3, [r3, #32]
 80212ee:	021b      	lsls	r3, r3, #8
 80212f0:	495d      	ldr	r1, [pc, #372]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80212f2:	4313      	orrs	r3, r2
 80212f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80212f6:	69bb      	ldr	r3, [r7, #24]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d10a      	bne.n	8021312 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021300:	4618      	mov	r0, r3
 8021302:	f000 fe5b 	bl	8021fbc <RCC_SetFlashLatencyFromMSIRange>
 8021306:	4603      	mov	r3, r0
 8021308:	2b00      	cmp	r3, #0
 802130a:	d002      	beq.n	8021312 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 802130c:	2301      	movs	r3, #1
 802130e:	f000 bc39 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8021312:	f000 fe17 	bl	8021f44 <HAL_RCC_GetHCLKFreq>
 8021316:	4603      	mov	r3, r0
 8021318:	4a54      	ldr	r2, [pc, #336]	; (802146c <HAL_RCC_OscConfig+0x280>)
 802131a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 802131c:	4b54      	ldr	r3, [pc, #336]	; (8021470 <HAL_RCC_OscConfig+0x284>)
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	4618      	mov	r0, r3
 8021322:	f7ff fc05 	bl	8020b30 <HAL_InitTick>
 8021326:	4603      	mov	r3, r0
 8021328:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 802132a:	7bfb      	ldrb	r3, [r7, #15]
 802132c:	2b00      	cmp	r3, #0
 802132e:	d060      	beq.n	80213f2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8021330:	7bfb      	ldrb	r3, [r7, #15]
 8021332:	f000 bc27 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	69db      	ldr	r3, [r3, #28]
 802133a:	2b00      	cmp	r3, #0
 802133c:	d039      	beq.n	80213b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 802133e:	4b4a      	ldr	r3, [pc, #296]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	4a49      	ldr	r2, [pc, #292]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021344:	f043 0301 	orr.w	r3, r3, #1
 8021348:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 802134a:	f7ff fc41 	bl	8020bd0 <HAL_GetTick>
 802134e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021350:	e00f      	b.n	8021372 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021352:	f7ff fc3d 	bl	8020bd0 <HAL_GetTick>
 8021356:	4602      	mov	r2, r0
 8021358:	693b      	ldr	r3, [r7, #16]
 802135a:	1ad3      	subs	r3, r2, r3
 802135c:	2b02      	cmp	r3, #2
 802135e:	d908      	bls.n	8021372 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021360:	4b41      	ldr	r3, [pc, #260]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	f003 0302 	and.w	r3, r3, #2
 8021368:	2b00      	cmp	r3, #0
 802136a:	d102      	bne.n	8021372 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 802136c:	2303      	movs	r3, #3
 802136e:	f000 bc09 	b.w	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021372:	4b3d      	ldr	r3, [pc, #244]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	f003 0302 	and.w	r3, r3, #2
 802137a:	2b00      	cmp	r3, #0
 802137c:	d0e9      	beq.n	8021352 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 802137e:	4b3a      	ldr	r3, [pc, #232]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	4a39      	ldr	r2, [pc, #228]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021384:	f043 0308 	orr.w	r3, r3, #8
 8021388:	6013      	str	r3, [r2, #0]
 802138a:	4b37      	ldr	r3, [pc, #220]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021396:	4934      	ldr	r1, [pc, #208]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021398:	4313      	orrs	r3, r2
 802139a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 802139c:	4b32      	ldr	r3, [pc, #200]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802139e:	685b      	ldr	r3, [r3, #4]
 80213a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	6a1b      	ldr	r3, [r3, #32]
 80213a8:	021b      	lsls	r3, r3, #8
 80213aa:	492f      	ldr	r1, [pc, #188]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80213ac:	4313      	orrs	r3, r2
 80213ae:	604b      	str	r3, [r1, #4]
 80213b0:	e020      	b.n	80213f4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80213b2:	4b2d      	ldr	r3, [pc, #180]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	4a2c      	ldr	r2, [pc, #176]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80213b8:	f023 0301 	bic.w	r3, r3, #1
 80213bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80213be:	f7ff fc07 	bl	8020bd0 <HAL_GetTick>
 80213c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80213c4:	e00e      	b.n	80213e4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80213c6:	f7ff fc03 	bl	8020bd0 <HAL_GetTick>
 80213ca:	4602      	mov	r2, r0
 80213cc:	693b      	ldr	r3, [r7, #16]
 80213ce:	1ad3      	subs	r3, r2, r3
 80213d0:	2b02      	cmp	r3, #2
 80213d2:	d907      	bls.n	80213e4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80213d4:	4b24      	ldr	r3, [pc, #144]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	f003 0302 	and.w	r3, r3, #2
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d001      	beq.n	80213e4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80213e0:	2303      	movs	r3, #3
 80213e2:	e3cf      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80213e4:	4b20      	ldr	r3, [pc, #128]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	f003 0302 	and.w	r3, r3, #2
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d1ea      	bne.n	80213c6 <HAL_RCC_OscConfig+0x1da>
 80213f0:	e000      	b.n	80213f4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80213f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	f003 0301 	and.w	r3, r3, #1
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d07e      	beq.n	80214fe <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8021400:	69bb      	ldr	r3, [r7, #24]
 8021402:	2b08      	cmp	r3, #8
 8021404:	d005      	beq.n	8021412 <HAL_RCC_OscConfig+0x226>
 8021406:	69bb      	ldr	r3, [r7, #24]
 8021408:	2b0c      	cmp	r3, #12
 802140a:	d10e      	bne.n	802142a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 802140c:	697b      	ldr	r3, [r7, #20]
 802140e:	2b03      	cmp	r3, #3
 8021410:	d10b      	bne.n	802142a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021412:	4b15      	ldr	r3, [pc, #84]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802141a:	2b00      	cmp	r3, #0
 802141c:	d06e      	beq.n	80214fc <HAL_RCC_OscConfig+0x310>
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	685b      	ldr	r3, [r3, #4]
 8021422:	2b00      	cmp	r3, #0
 8021424:	d16a      	bne.n	80214fc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8021426:	2301      	movs	r3, #1
 8021428:	e3ac      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	685b      	ldr	r3, [r3, #4]
 802142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021432:	d106      	bne.n	8021442 <HAL_RCC_OscConfig+0x256>
 8021434:	4b0c      	ldr	r3, [pc, #48]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	4a0b      	ldr	r2, [pc, #44]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802143a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802143e:	6013      	str	r3, [r2, #0]
 8021440:	e024      	b.n	802148c <HAL_RCC_OscConfig+0x2a0>
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	685b      	ldr	r3, [r3, #4]
 8021446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802144a:	d113      	bne.n	8021474 <HAL_RCC_OscConfig+0x288>
 802144c:	4b06      	ldr	r3, [pc, #24]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	4a05      	ldr	r2, [pc, #20]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 8021452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021456:	6013      	str	r3, [r2, #0]
 8021458:	4b03      	ldr	r3, [pc, #12]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	4a02      	ldr	r2, [pc, #8]	; (8021468 <HAL_RCC_OscConfig+0x27c>)
 802145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021462:	6013      	str	r3, [r2, #0]
 8021464:	e012      	b.n	802148c <HAL_RCC_OscConfig+0x2a0>
 8021466:	bf00      	nop
 8021468:	40021000 	.word	0x40021000
 802146c:	20000000 	.word	0x20000000
 8021470:	20000004 	.word	0x20000004
 8021474:	4b8b      	ldr	r3, [pc, #556]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a8a      	ldr	r2, [pc, #552]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802147a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802147e:	6013      	str	r3, [r2, #0]
 8021480:	4b88      	ldr	r3, [pc, #544]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	4a87      	ldr	r2, [pc, #540]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	685b      	ldr	r3, [r3, #4]
 8021490:	2b00      	cmp	r3, #0
 8021492:	d019      	beq.n	80214c8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021494:	f7ff fb9c 	bl	8020bd0 <HAL_GetTick>
 8021498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802149a:	e00e      	b.n	80214ba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802149c:	f7ff fb98 	bl	8020bd0 <HAL_GetTick>
 80214a0:	4602      	mov	r2, r0
 80214a2:	693b      	ldr	r3, [r7, #16]
 80214a4:	1ad3      	subs	r3, r2, r3
 80214a6:	2b64      	cmp	r3, #100	; 0x64
 80214a8:	d907      	bls.n	80214ba <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80214aa:	4b7e      	ldr	r3, [pc, #504]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80214ac:	681b      	ldr	r3, [r3, #0]
 80214ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d101      	bne.n	80214ba <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80214b6:	2303      	movs	r3, #3
 80214b8:	e364      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80214ba:	4b7a      	ldr	r3, [pc, #488]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d0ea      	beq.n	802149c <HAL_RCC_OscConfig+0x2b0>
 80214c6:	e01a      	b.n	80214fe <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80214c8:	f7ff fb82 	bl	8020bd0 <HAL_GetTick>
 80214cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80214ce:	e00e      	b.n	80214ee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80214d0:	f7ff fb7e 	bl	8020bd0 <HAL_GetTick>
 80214d4:	4602      	mov	r2, r0
 80214d6:	693b      	ldr	r3, [r7, #16]
 80214d8:	1ad3      	subs	r3, r2, r3
 80214da:	2b64      	cmp	r3, #100	; 0x64
 80214dc:	d907      	bls.n	80214ee <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80214de:	4b71      	ldr	r3, [pc, #452]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d001      	beq.n	80214ee <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80214ea:	2303      	movs	r3, #3
 80214ec:	e34a      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80214ee:	4b6d      	ldr	r3, [pc, #436]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80214f0:	681b      	ldr	r3, [r3, #0]
 80214f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d1ea      	bne.n	80214d0 <HAL_RCC_OscConfig+0x2e4>
 80214fa:	e000      	b.n	80214fe <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80214fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	f003 0302 	and.w	r3, r3, #2
 8021506:	2b00      	cmp	r3, #0
 8021508:	d06c      	beq.n	80215e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 802150a:	69bb      	ldr	r3, [r7, #24]
 802150c:	2b04      	cmp	r3, #4
 802150e:	d005      	beq.n	802151c <HAL_RCC_OscConfig+0x330>
 8021510:	69bb      	ldr	r3, [r7, #24]
 8021512:	2b0c      	cmp	r3, #12
 8021514:	d119      	bne.n	802154a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021516:	697b      	ldr	r3, [r7, #20]
 8021518:	2b02      	cmp	r3, #2
 802151a:	d116      	bne.n	802154a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802151c:	4b61      	ldr	r3, [pc, #388]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021524:	2b00      	cmp	r3, #0
 8021526:	d005      	beq.n	8021534 <HAL_RCC_OscConfig+0x348>
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	68db      	ldr	r3, [r3, #12]
 802152c:	2b00      	cmp	r3, #0
 802152e:	d101      	bne.n	8021534 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8021530:	2301      	movs	r3, #1
 8021532:	e327      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021534:	4b5b      	ldr	r3, [pc, #364]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021536:	685b      	ldr	r3, [r3, #4]
 8021538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	691b      	ldr	r3, [r3, #16]
 8021540:	061b      	lsls	r3, r3, #24
 8021542:	4958      	ldr	r1, [pc, #352]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021544:	4313      	orrs	r3, r2
 8021546:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021548:	e04c      	b.n	80215e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 802154a:	687b      	ldr	r3, [r7, #4]
 802154c:	68db      	ldr	r3, [r3, #12]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d029      	beq.n	80215a6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021552:	4b54      	ldr	r3, [pc, #336]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	4a53      	ldr	r2, [pc, #332]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802155c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802155e:	f7ff fb37 	bl	8020bd0 <HAL_GetTick>
 8021562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021564:	e00e      	b.n	8021584 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021566:	f7ff fb33 	bl	8020bd0 <HAL_GetTick>
 802156a:	4602      	mov	r2, r0
 802156c:	693b      	ldr	r3, [r7, #16]
 802156e:	1ad3      	subs	r3, r2, r3
 8021570:	2b02      	cmp	r3, #2
 8021572:	d907      	bls.n	8021584 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021574:	4b4b      	ldr	r3, [pc, #300]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802157c:	2b00      	cmp	r3, #0
 802157e:	d101      	bne.n	8021584 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8021580:	2303      	movs	r3, #3
 8021582:	e2ff      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021584:	4b47      	ldr	r3, [pc, #284]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802158c:	2b00      	cmp	r3, #0
 802158e:	d0ea      	beq.n	8021566 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021590:	4b44      	ldr	r3, [pc, #272]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021592:	685b      	ldr	r3, [r3, #4]
 8021594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	691b      	ldr	r3, [r3, #16]
 802159c:	061b      	lsls	r3, r3, #24
 802159e:	4941      	ldr	r1, [pc, #260]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80215a0:	4313      	orrs	r3, r2
 80215a2:	604b      	str	r3, [r1, #4]
 80215a4:	e01e      	b.n	80215e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80215a6:	4b3f      	ldr	r3, [pc, #252]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80215a8:	681b      	ldr	r3, [r3, #0]
 80215aa:	4a3e      	ldr	r2, [pc, #248]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80215ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80215b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80215b2:	f7ff fb0d 	bl	8020bd0 <HAL_GetTick>
 80215b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80215b8:	e00e      	b.n	80215d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80215ba:	f7ff fb09 	bl	8020bd0 <HAL_GetTick>
 80215be:	4602      	mov	r2, r0
 80215c0:	693b      	ldr	r3, [r7, #16]
 80215c2:	1ad3      	subs	r3, r2, r3
 80215c4:	2b02      	cmp	r3, #2
 80215c6:	d907      	bls.n	80215d8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80215c8:	4b36      	ldr	r3, [pc, #216]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d001      	beq.n	80215d8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80215d4:	2303      	movs	r3, #3
 80215d6:	e2d5      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80215d8:	4b32      	ldr	r3, [pc, #200]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d1ea      	bne.n	80215ba <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80215e4:	687b      	ldr	r3, [r7, #4]
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	f003 0308 	and.w	r3, r3, #8
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d062      	beq.n	80216b6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	695b      	ldr	r3, [r3, #20]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d038      	beq.n	802166a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	699b      	ldr	r3, [r3, #24]
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d108      	bne.n	8021612 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8021600:	4b28      	ldr	r3, [pc, #160]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021606:	4a27      	ldr	r2, [pc, #156]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021608:	f023 0310 	bic.w	r3, r3, #16
 802160c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8021610:	e007      	b.n	8021622 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8021612:	4b24      	ldr	r3, [pc, #144]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021618:	4a22      	ldr	r2, [pc, #136]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802161a:	f043 0310 	orr.w	r3, r3, #16
 802161e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021622:	4b20      	ldr	r3, [pc, #128]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021628:	4a1e      	ldr	r2, [pc, #120]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802162a:	f043 0301 	orr.w	r3, r3, #1
 802162e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021632:	f7ff facd 	bl	8020bd0 <HAL_GetTick>
 8021636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021638:	e00f      	b.n	802165a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802163a:	f7ff fac9 	bl	8020bd0 <HAL_GetTick>
 802163e:	4602      	mov	r2, r0
 8021640:	693b      	ldr	r3, [r7, #16]
 8021642:	1ad3      	subs	r3, r2, r3
 8021644:	2b07      	cmp	r3, #7
 8021646:	d908      	bls.n	802165a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021648:	4b16      	ldr	r3, [pc, #88]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802164e:	f003 0302 	and.w	r3, r3, #2
 8021652:	2b00      	cmp	r3, #0
 8021654:	d101      	bne.n	802165a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8021656:	2303      	movs	r3, #3
 8021658:	e294      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802165a:	4b12      	ldr	r3, [pc, #72]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802165c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021660:	f003 0302 	and.w	r3, r3, #2
 8021664:	2b00      	cmp	r3, #0
 8021666:	d0e8      	beq.n	802163a <HAL_RCC_OscConfig+0x44e>
 8021668:	e025      	b.n	80216b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802166a:	4b0e      	ldr	r3, [pc, #56]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 802166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021670:	4a0c      	ldr	r2, [pc, #48]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021672:	f023 0301 	bic.w	r3, r3, #1
 8021676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802167a:	f7ff faa9 	bl	8020bd0 <HAL_GetTick>
 802167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021680:	e012      	b.n	80216a8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021682:	f7ff faa5 	bl	8020bd0 <HAL_GetTick>
 8021686:	4602      	mov	r2, r0
 8021688:	693b      	ldr	r3, [r7, #16]
 802168a:	1ad3      	subs	r3, r2, r3
 802168c:	2b07      	cmp	r3, #7
 802168e:	d90b      	bls.n	80216a8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021690:	4b04      	ldr	r3, [pc, #16]	; (80216a4 <HAL_RCC_OscConfig+0x4b8>)
 8021692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021696:	f003 0302 	and.w	r3, r3, #2
 802169a:	2b00      	cmp	r3, #0
 802169c:	d004      	beq.n	80216a8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 802169e:	2303      	movs	r3, #3
 80216a0:	e270      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
 80216a2:	bf00      	nop
 80216a4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80216a8:	4ba8      	ldr	r3, [pc, #672]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80216aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80216ae:	f003 0302 	and.w	r3, r3, #2
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d1e5      	bne.n	8021682 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	f003 0304 	and.w	r3, r3, #4
 80216be:	2b00      	cmp	r3, #0
 80216c0:	f000 812d 	beq.w	802191e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80216c4:	2300      	movs	r3, #0
 80216c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80216c8:	4ba0      	ldr	r3, [pc, #640]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80216ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80216cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80216d0:	2b00      	cmp	r3, #0
 80216d2:	d10d      	bne.n	80216f0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80216d4:	4b9d      	ldr	r3, [pc, #628]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80216d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80216d8:	4a9c      	ldr	r2, [pc, #624]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80216da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80216de:	6593      	str	r3, [r2, #88]	; 0x58
 80216e0:	4b9a      	ldr	r3, [pc, #616]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80216e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80216e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80216e8:	60bb      	str	r3, [r7, #8]
 80216ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80216ec:	2301      	movs	r3, #1
 80216ee:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80216f0:	4b97      	ldr	r3, [pc, #604]	; (8021950 <HAL_RCC_OscConfig+0x764>)
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d11e      	bne.n	802173a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80216fc:	4b94      	ldr	r3, [pc, #592]	; (8021950 <HAL_RCC_OscConfig+0x764>)
 80216fe:	681b      	ldr	r3, [r3, #0]
 8021700:	4a93      	ldr	r2, [pc, #588]	; (8021950 <HAL_RCC_OscConfig+0x764>)
 8021702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021708:	f7ff fa62 	bl	8020bd0 <HAL_GetTick>
 802170c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802170e:	e00e      	b.n	802172e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021710:	f7ff fa5e 	bl	8020bd0 <HAL_GetTick>
 8021714:	4602      	mov	r2, r0
 8021716:	693b      	ldr	r3, [r7, #16]
 8021718:	1ad3      	subs	r3, r2, r3
 802171a:	2b02      	cmp	r3, #2
 802171c:	d907      	bls.n	802172e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802171e:	4b8c      	ldr	r3, [pc, #560]	; (8021950 <HAL_RCC_OscConfig+0x764>)
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021726:	2b00      	cmp	r3, #0
 8021728:	d101      	bne.n	802172e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 802172a:	2303      	movs	r3, #3
 802172c:	e22a      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802172e:	4b88      	ldr	r3, [pc, #544]	; (8021950 <HAL_RCC_OscConfig+0x764>)
 8021730:	681b      	ldr	r3, [r3, #0]
 8021732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021736:	2b00      	cmp	r3, #0
 8021738:	d0ea      	beq.n	8021710 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	689b      	ldr	r3, [r3, #8]
 802173e:	f003 0301 	and.w	r3, r3, #1
 8021742:	2b00      	cmp	r3, #0
 8021744:	d01f      	beq.n	8021786 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	689b      	ldr	r3, [r3, #8]
 802174a:	f003 0304 	and.w	r3, r3, #4
 802174e:	2b00      	cmp	r3, #0
 8021750:	d010      	beq.n	8021774 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8021752:	4b7e      	ldr	r3, [pc, #504]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021758:	4a7c      	ldr	r2, [pc, #496]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802175a:	f043 0304 	orr.w	r3, r3, #4
 802175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8021762:	4b7a      	ldr	r3, [pc, #488]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021768:	4a78      	ldr	r2, [pc, #480]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802176a:	f043 0301 	orr.w	r3, r3, #1
 802176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8021772:	e018      	b.n	80217a6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8021774:	4b75      	ldr	r3, [pc, #468]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802177a:	4a74      	ldr	r2, [pc, #464]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802177c:	f043 0301 	orr.w	r3, r3, #1
 8021780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8021784:	e00f      	b.n	80217a6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8021786:	4b71      	ldr	r3, [pc, #452]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802178c:	4a6f      	ldr	r2, [pc, #444]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802178e:	f023 0301 	bic.w	r3, r3, #1
 8021792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8021796:	4b6d      	ldr	r3, [pc, #436]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802179c:	4a6b      	ldr	r2, [pc, #428]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802179e:	f023 0304 	bic.w	r3, r3, #4
 80217a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	689b      	ldr	r3, [r3, #8]
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d068      	beq.n	8021880 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80217ae:	f7ff fa0f 	bl	8020bd0 <HAL_GetTick>
 80217b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80217b4:	e011      	b.n	80217da <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80217b6:	f7ff fa0b 	bl	8020bd0 <HAL_GetTick>
 80217ba:	4602      	mov	r2, r0
 80217bc:	693b      	ldr	r3, [r7, #16]
 80217be:	1ad3      	subs	r3, r2, r3
 80217c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80217c4:	4293      	cmp	r3, r2
 80217c6:	d908      	bls.n	80217da <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80217c8:	4b60      	ldr	r3, [pc, #384]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80217ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217ce:	f003 0302 	and.w	r3, r3, #2
 80217d2:	2b00      	cmp	r3, #0
 80217d4:	d101      	bne.n	80217da <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80217d6:	2303      	movs	r3, #3
 80217d8:	e1d4      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80217da:	4b5c      	ldr	r3, [pc, #368]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80217dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217e0:	f003 0302 	and.w	r3, r3, #2
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d0e6      	beq.n	80217b6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	689b      	ldr	r3, [r3, #8]
 80217ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d022      	beq.n	802183a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80217f4:	4b55      	ldr	r3, [pc, #340]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80217f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80217fa:	4a54      	ldr	r2, [pc, #336]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80217fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8021804:	e011      	b.n	802182a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021806:	f7ff f9e3 	bl	8020bd0 <HAL_GetTick>
 802180a:	4602      	mov	r2, r0
 802180c:	693b      	ldr	r3, [r7, #16]
 802180e:	1ad3      	subs	r3, r2, r3
 8021810:	f241 3288 	movw	r2, #5000	; 0x1388
 8021814:	4293      	cmp	r3, r2
 8021816:	d908      	bls.n	802182a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8021818:	4b4c      	ldr	r3, [pc, #304]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802181e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021822:	2b00      	cmp	r3, #0
 8021824:	d101      	bne.n	802182a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8021826:	2303      	movs	r3, #3
 8021828:	e1ac      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 802182a:	4b48      	ldr	r3, [pc, #288]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021834:	2b00      	cmp	r3, #0
 8021836:	d0e6      	beq.n	8021806 <HAL_RCC_OscConfig+0x61a>
 8021838:	e068      	b.n	802190c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 802183a:	4b44      	ldr	r3, [pc, #272]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021840:	4a42      	ldr	r2, [pc, #264]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 802184a:	e011      	b.n	8021870 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802184c:	f7ff f9c0 	bl	8020bd0 <HAL_GetTick>
 8021850:	4602      	mov	r2, r0
 8021852:	693b      	ldr	r3, [r7, #16]
 8021854:	1ad3      	subs	r3, r2, r3
 8021856:	f241 3288 	movw	r2, #5000	; 0x1388
 802185a:	4293      	cmp	r3, r2
 802185c:	d908      	bls.n	8021870 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 802185e:	4b3b      	ldr	r3, [pc, #236]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021868:	2b00      	cmp	r3, #0
 802186a:	d001      	beq.n	8021870 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 802186c:	2303      	movs	r3, #3
 802186e:	e189      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8021870:	4b36      	ldr	r3, [pc, #216]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802187a:	2b00      	cmp	r3, #0
 802187c:	d1e6      	bne.n	802184c <HAL_RCC_OscConfig+0x660>
 802187e:	e045      	b.n	802190c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021880:	f7ff f9a6 	bl	8020bd0 <HAL_GetTick>
 8021884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8021886:	e011      	b.n	80218ac <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021888:	f7ff f9a2 	bl	8020bd0 <HAL_GetTick>
 802188c:	4602      	mov	r2, r0
 802188e:	693b      	ldr	r3, [r7, #16]
 8021890:	1ad3      	subs	r3, r2, r3
 8021892:	f241 3288 	movw	r2, #5000	; 0x1388
 8021896:	4293      	cmp	r3, r2
 8021898:	d908      	bls.n	80218ac <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802189a:	4b2c      	ldr	r3, [pc, #176]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80218a0:	f003 0302 	and.w	r3, r3, #2
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d001      	beq.n	80218ac <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80218a8:	2303      	movs	r3, #3
 80218aa:	e16b      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80218ac:	4b27      	ldr	r3, [pc, #156]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80218ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80218b2:	f003 0302 	and.w	r3, r3, #2
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d1e6      	bne.n	8021888 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80218ba:	4b24      	ldr	r3, [pc, #144]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80218bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80218c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d021      	beq.n	802190c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80218c8:	4b20      	ldr	r3, [pc, #128]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80218ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80218ce:	4a1f      	ldr	r2, [pc, #124]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80218d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80218d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80218d8:	e011      	b.n	80218fe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80218da:	f7ff f979 	bl	8020bd0 <HAL_GetTick>
 80218de:	4602      	mov	r2, r0
 80218e0:	693b      	ldr	r3, [r7, #16]
 80218e2:	1ad3      	subs	r3, r2, r3
 80218e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80218e8:	4293      	cmp	r3, r2
 80218ea:	d908      	bls.n	80218fe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80218ec:	4b17      	ldr	r3, [pc, #92]	; (802194c <HAL_RCC_OscConfig+0x760>)
 80218ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80218f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d001      	beq.n	80218fe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80218fa:	2303      	movs	r3, #3
 80218fc:	e142      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80218fe:	4b13      	ldr	r3, [pc, #76]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8021904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021908:	2b00      	cmp	r3, #0
 802190a:	d1e6      	bne.n	80218da <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 802190c:	7ffb      	ldrb	r3, [r7, #31]
 802190e:	2b01      	cmp	r3, #1
 8021910:	d105      	bne.n	802191e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021912:	4b0e      	ldr	r3, [pc, #56]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021916:	4a0d      	ldr	r2, [pc, #52]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802191c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	f003 0320 	and.w	r3, r3, #32
 8021926:	2b00      	cmp	r3, #0
 8021928:	d04f      	beq.n	80219ca <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802192e:	2b00      	cmp	r3, #0
 8021930:	d028      	beq.n	8021984 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8021932:	4b06      	ldr	r3, [pc, #24]	; (802194c <HAL_RCC_OscConfig+0x760>)
 8021934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8021938:	4a04      	ldr	r2, [pc, #16]	; (802194c <HAL_RCC_OscConfig+0x760>)
 802193a:	f043 0301 	orr.w	r3, r3, #1
 802193e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021942:	f7ff f945 	bl	8020bd0 <HAL_GetTick>
 8021946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021948:	e014      	b.n	8021974 <HAL_RCC_OscConfig+0x788>
 802194a:	bf00      	nop
 802194c:	40021000 	.word	0x40021000
 8021950:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021954:	f7ff f93c 	bl	8020bd0 <HAL_GetTick>
 8021958:	4602      	mov	r2, r0
 802195a:	693b      	ldr	r3, [r7, #16]
 802195c:	1ad3      	subs	r3, r2, r3
 802195e:	2b02      	cmp	r3, #2
 8021960:	d908      	bls.n	8021974 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021962:	4b8a      	ldr	r3, [pc, #552]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8021968:	f003 0302 	and.w	r3, r3, #2
 802196c:	2b00      	cmp	r3, #0
 802196e:	d101      	bne.n	8021974 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8021970:	2303      	movs	r3, #3
 8021972:	e107      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8021974:	4b85      	ldr	r3, [pc, #532]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802197a:	f003 0302 	and.w	r3, r3, #2
 802197e:	2b00      	cmp	r3, #0
 8021980:	d0e8      	beq.n	8021954 <HAL_RCC_OscConfig+0x768>
 8021982:	e022      	b.n	80219ca <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8021984:	4b81      	ldr	r3, [pc, #516]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802198a:	4a80      	ldr	r2, [pc, #512]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 802198c:	f023 0301 	bic.w	r3, r3, #1
 8021990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021994:	f7ff f91c 	bl	8020bd0 <HAL_GetTick>
 8021998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802199a:	e00f      	b.n	80219bc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802199c:	f7ff f918 	bl	8020bd0 <HAL_GetTick>
 80219a0:	4602      	mov	r2, r0
 80219a2:	693b      	ldr	r3, [r7, #16]
 80219a4:	1ad3      	subs	r3, r2, r3
 80219a6:	2b02      	cmp	r3, #2
 80219a8:	d908      	bls.n	80219bc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80219aa:	4b78      	ldr	r3, [pc, #480]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 80219ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80219b0:	f003 0302 	and.w	r3, r3, #2
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d001      	beq.n	80219bc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80219b8:	2303      	movs	r3, #3
 80219ba:	e0e3      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80219bc:	4b73      	ldr	r3, [pc, #460]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 80219be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80219c2:	f003 0302 	and.w	r3, r3, #2
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d1e8      	bne.n	802199c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	f000 80d7 	beq.w	8021b82 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80219d4:	4b6d      	ldr	r3, [pc, #436]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 80219d6:	689b      	ldr	r3, [r3, #8]
 80219d8:	f003 030c 	and.w	r3, r3, #12
 80219dc:	2b0c      	cmp	r3, #12
 80219de:	f000 8091 	beq.w	8021b04 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219e6:	2b02      	cmp	r3, #2
 80219e8:	d166      	bne.n	8021ab8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80219ea:	4b68      	ldr	r3, [pc, #416]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 80219ec:	681b      	ldr	r3, [r3, #0]
 80219ee:	4a67      	ldr	r2, [pc, #412]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 80219f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80219f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80219f6:	f7ff f8eb 	bl	8020bd0 <HAL_GetTick>
 80219fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80219fc:	e00e      	b.n	8021a1c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80219fe:	f7ff f8e7 	bl	8020bd0 <HAL_GetTick>
 8021a02:	4602      	mov	r2, r0
 8021a04:	693b      	ldr	r3, [r7, #16]
 8021a06:	1ad3      	subs	r3, r2, r3
 8021a08:	2b02      	cmp	r3, #2
 8021a0a:	d907      	bls.n	8021a1c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021a0c:	4b5f      	ldr	r3, [pc, #380]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d001      	beq.n	8021a1c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8021a18:	2303      	movs	r3, #3
 8021a1a:	e0b3      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021a1c:	4b5b      	ldr	r3, [pc, #364]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a1e:	681b      	ldr	r3, [r3, #0]
 8021a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d1ea      	bne.n	80219fe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021a28:	4b58      	ldr	r3, [pc, #352]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a2a:	68da      	ldr	r2, [r3, #12]
 8021a2c:	4b58      	ldr	r3, [pc, #352]	; (8021b90 <HAL_RCC_OscConfig+0x9a4>)
 8021a2e:	4013      	ands	r3, r2
 8021a30:	687a      	ldr	r2, [r7, #4]
 8021a32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8021a34:	687a      	ldr	r2, [r7, #4]
 8021a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8021a38:	3a01      	subs	r2, #1
 8021a3a:	0112      	lsls	r2, r2, #4
 8021a3c:	4311      	orrs	r1, r2
 8021a3e:	687a      	ldr	r2, [r7, #4]
 8021a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8021a42:	0212      	lsls	r2, r2, #8
 8021a44:	4311      	orrs	r1, r2
 8021a46:	687a      	ldr	r2, [r7, #4]
 8021a48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8021a4a:	0852      	lsrs	r2, r2, #1
 8021a4c:	3a01      	subs	r2, #1
 8021a4e:	0552      	lsls	r2, r2, #21
 8021a50:	4311      	orrs	r1, r2
 8021a52:	687a      	ldr	r2, [r7, #4]
 8021a54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8021a56:	0852      	lsrs	r2, r2, #1
 8021a58:	3a01      	subs	r2, #1
 8021a5a:	0652      	lsls	r2, r2, #25
 8021a5c:	4311      	orrs	r1, r2
 8021a5e:	687a      	ldr	r2, [r7, #4]
 8021a60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8021a62:	06d2      	lsls	r2, r2, #27
 8021a64:	430a      	orrs	r2, r1
 8021a66:	4949      	ldr	r1, [pc, #292]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a68:	4313      	orrs	r3, r2
 8021a6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021a6c:	4b47      	ldr	r3, [pc, #284]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a6e:	681b      	ldr	r3, [r3, #0]
 8021a70:	4a46      	ldr	r2, [pc, #280]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021a76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8021a78:	4b44      	ldr	r3, [pc, #272]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a7a:	68db      	ldr	r3, [r3, #12]
 8021a7c:	4a43      	ldr	r2, [pc, #268]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021a82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a84:	f7ff f8a4 	bl	8020bd0 <HAL_GetTick>
 8021a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021a8a:	e00e      	b.n	8021aaa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021a8c:	f7ff f8a0 	bl	8020bd0 <HAL_GetTick>
 8021a90:	4602      	mov	r2, r0
 8021a92:	693b      	ldr	r3, [r7, #16]
 8021a94:	1ad3      	subs	r3, r2, r3
 8021a96:	2b02      	cmp	r3, #2
 8021a98:	d907      	bls.n	8021aaa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021a9a:	4b3c      	ldr	r3, [pc, #240]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d101      	bne.n	8021aaa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8021aa6:	2303      	movs	r3, #3
 8021aa8:	e06c      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021aaa:	4b38      	ldr	r3, [pc, #224]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021aac:	681b      	ldr	r3, [r3, #0]
 8021aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d0ea      	beq.n	8021a8c <HAL_RCC_OscConfig+0x8a0>
 8021ab6:	e064      	b.n	8021b82 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021ab8:	4b34      	ldr	r3, [pc, #208]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	4a33      	ldr	r2, [pc, #204]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ac4:	f7ff f884 	bl	8020bd0 <HAL_GetTick>
 8021ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021aca:	e00e      	b.n	8021aea <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021acc:	f7ff f880 	bl	8020bd0 <HAL_GetTick>
 8021ad0:	4602      	mov	r2, r0
 8021ad2:	693b      	ldr	r3, [r7, #16]
 8021ad4:	1ad3      	subs	r3, r2, r3
 8021ad6:	2b02      	cmp	r3, #2
 8021ad8:	d907      	bls.n	8021aea <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021ada:	4b2c      	ldr	r3, [pc, #176]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021adc:	681b      	ldr	r3, [r3, #0]
 8021ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d001      	beq.n	8021aea <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8021ae6:	2303      	movs	r3, #3
 8021ae8:	e04c      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8021aea:	4b28      	ldr	r3, [pc, #160]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d1ea      	bne.n	8021acc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8021af6:	4b25      	ldr	r3, [pc, #148]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021af8:	68da      	ldr	r2, [r3, #12]
 8021afa:	4924      	ldr	r1, [pc, #144]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021afc:	4b25      	ldr	r3, [pc, #148]	; (8021b94 <HAL_RCC_OscConfig+0x9a8>)
 8021afe:	4013      	ands	r3, r2
 8021b00:	60cb      	str	r3, [r1, #12]
 8021b02:	e03e      	b.n	8021b82 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b08:	2b01      	cmp	r3, #1
 8021b0a:	d101      	bne.n	8021b10 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8021b0c:	2301      	movs	r3, #1
 8021b0e:	e039      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8021b10:	4b1e      	ldr	r3, [pc, #120]	; (8021b8c <HAL_RCC_OscConfig+0x9a0>)
 8021b12:	68db      	ldr	r3, [r3, #12]
 8021b14:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021b16:	697b      	ldr	r3, [r7, #20]
 8021b18:	f003 0203 	and.w	r2, r3, #3
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b20:	429a      	cmp	r2, r3
 8021b22:	d12c      	bne.n	8021b7e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021b24:	697b      	ldr	r3, [r7, #20]
 8021b26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021b2e:	3b01      	subs	r3, #1
 8021b30:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8021b32:	429a      	cmp	r2, r3
 8021b34:	d123      	bne.n	8021b7e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021b36:	697b      	ldr	r3, [r7, #20]
 8021b38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b40:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8021b42:	429a      	cmp	r2, r3
 8021b44:	d11b      	bne.n	8021b7e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021b46:	697b      	ldr	r3, [r7, #20]
 8021b48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021b50:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021b52:	429a      	cmp	r2, r3
 8021b54:	d113      	bne.n	8021b7e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021b56:	697b      	ldr	r3, [r7, #20]
 8021b58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b60:	085b      	lsrs	r3, r3, #1
 8021b62:	3b01      	subs	r3, #1
 8021b64:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8021b66:	429a      	cmp	r2, r3
 8021b68:	d109      	bne.n	8021b7e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8021b6a:	697b      	ldr	r3, [r7, #20]
 8021b6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b74:	085b      	lsrs	r3, r3, #1
 8021b76:	3b01      	subs	r3, #1
 8021b78:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021b7a:	429a      	cmp	r2, r3
 8021b7c:	d001      	beq.n	8021b82 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8021b7e:	2301      	movs	r3, #1
 8021b80:	e000      	b.n	8021b84 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8021b82:	2300      	movs	r3, #0
}
 8021b84:	4618      	mov	r0, r3
 8021b86:	3720      	adds	r7, #32
 8021b88:	46bd      	mov	sp, r7
 8021b8a:	bd80      	pop	{r7, pc}
 8021b8c:	40021000 	.word	0x40021000
 8021b90:	019f800c 	.word	0x019f800c
 8021b94:	feeefffc 	.word	0xfeeefffc

08021b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021b98:	b580      	push	{r7, lr}
 8021b9a:	b086      	sub	sp, #24
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	6078      	str	r0, [r7, #4]
 8021ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d101      	bne.n	8021bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8021bac:	2301      	movs	r3, #1
 8021bae:	e11c      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8021bb0:	4b90      	ldr	r3, [pc, #576]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021bb2:	681b      	ldr	r3, [r3, #0]
 8021bb4:	f003 030f 	and.w	r3, r3, #15
 8021bb8:	683a      	ldr	r2, [r7, #0]
 8021bba:	429a      	cmp	r2, r3
 8021bbc:	d910      	bls.n	8021be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021bbe:	4b8d      	ldr	r3, [pc, #564]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021bc0:	681b      	ldr	r3, [r3, #0]
 8021bc2:	f023 020f 	bic.w	r2, r3, #15
 8021bc6:	498b      	ldr	r1, [pc, #556]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021bc8:	683b      	ldr	r3, [r7, #0]
 8021bca:	4313      	orrs	r3, r2
 8021bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021bce:	4b89      	ldr	r3, [pc, #548]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021bd0:	681b      	ldr	r3, [r3, #0]
 8021bd2:	f003 030f 	and.w	r3, r3, #15
 8021bd6:	683a      	ldr	r2, [r7, #0]
 8021bd8:	429a      	cmp	r2, r3
 8021bda:	d001      	beq.n	8021be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8021bdc:	2301      	movs	r3, #1
 8021bde:	e104      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	f003 0302 	and.w	r3, r3, #2
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d010      	beq.n	8021c0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	689a      	ldr	r2, [r3, #8]
 8021bf0:	4b81      	ldr	r3, [pc, #516]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021bf2:	689b      	ldr	r3, [r3, #8]
 8021bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021bf8:	429a      	cmp	r2, r3
 8021bfa:	d908      	bls.n	8021c0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021bfc:	4b7e      	ldr	r3, [pc, #504]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021bfe:	689b      	ldr	r3, [r3, #8]
 8021c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	689b      	ldr	r3, [r3, #8]
 8021c08:	497b      	ldr	r1, [pc, #492]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c0a:	4313      	orrs	r3, r2
 8021c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	681b      	ldr	r3, [r3, #0]
 8021c12:	f003 0301 	and.w	r3, r3, #1
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	f000 8085 	beq.w	8021d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	685b      	ldr	r3, [r3, #4]
 8021c20:	2b03      	cmp	r3, #3
 8021c22:	d11f      	bne.n	8021c64 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8021c24:	4b74      	ldr	r3, [pc, #464]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d101      	bne.n	8021c34 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8021c30:	2301      	movs	r3, #1
 8021c32:	e0da      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8021c34:	f000 fa26 	bl	8022084 <RCC_GetSysClockFreqFromPLLSource>
 8021c38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8021c3a:	693b      	ldr	r3, [r7, #16]
 8021c3c:	4a6f      	ldr	r2, [pc, #444]	; (8021dfc <HAL_RCC_ClockConfig+0x264>)
 8021c3e:	4293      	cmp	r3, r2
 8021c40:	d947      	bls.n	8021cd2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021c42:	4b6d      	ldr	r3, [pc, #436]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c44:	689b      	ldr	r3, [r3, #8]
 8021c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d141      	bne.n	8021cd2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021c4e:	4b6a      	ldr	r3, [pc, #424]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c50:	689b      	ldr	r3, [r3, #8]
 8021c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021c56:	4a68      	ldr	r2, [pc, #416]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021c5e:	2380      	movs	r3, #128	; 0x80
 8021c60:	617b      	str	r3, [r7, #20]
 8021c62:	e036      	b.n	8021cd2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	685b      	ldr	r3, [r3, #4]
 8021c68:	2b02      	cmp	r3, #2
 8021c6a:	d107      	bne.n	8021c7c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021c6c:	4b62      	ldr	r3, [pc, #392]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c6e:	681b      	ldr	r3, [r3, #0]
 8021c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d115      	bne.n	8021ca4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021c78:	2301      	movs	r3, #1
 8021c7a:	e0b6      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	685b      	ldr	r3, [r3, #4]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d107      	bne.n	8021c94 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021c84:	4b5c      	ldr	r3, [pc, #368]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c86:	681b      	ldr	r3, [r3, #0]
 8021c88:	f003 0302 	and.w	r3, r3, #2
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d109      	bne.n	8021ca4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021c90:	2301      	movs	r3, #1
 8021c92:	e0aa      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021c94:	4b58      	ldr	r3, [pc, #352]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d101      	bne.n	8021ca4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8021ca0:	2301      	movs	r3, #1
 8021ca2:	e0a2      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8021ca4:	f000 f8b0 	bl	8021e08 <HAL_RCC_GetSysClockFreq>
 8021ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8021caa:	693b      	ldr	r3, [r7, #16]
 8021cac:	4a53      	ldr	r2, [pc, #332]	; (8021dfc <HAL_RCC_ClockConfig+0x264>)
 8021cae:	4293      	cmp	r3, r2
 8021cb0:	d90f      	bls.n	8021cd2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021cb2:	4b51      	ldr	r3, [pc, #324]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021cb4:	689b      	ldr	r3, [r3, #8]
 8021cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d109      	bne.n	8021cd2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021cbe:	4b4e      	ldr	r3, [pc, #312]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021cc0:	689b      	ldr	r3, [r3, #8]
 8021cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021cc6:	4a4c      	ldr	r2, [pc, #304]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021cce:	2380      	movs	r3, #128	; 0x80
 8021cd0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021cd2:	4b49      	ldr	r3, [pc, #292]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021cd4:	689b      	ldr	r3, [r3, #8]
 8021cd6:	f023 0203 	bic.w	r2, r3, #3
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	685b      	ldr	r3, [r3, #4]
 8021cde:	4946      	ldr	r1, [pc, #280]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021ce0:	4313      	orrs	r3, r2
 8021ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021ce4:	f7fe ff74 	bl	8020bd0 <HAL_GetTick>
 8021ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021cea:	e013      	b.n	8021d14 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021cec:	f7fe ff70 	bl	8020bd0 <HAL_GetTick>
 8021cf0:	4602      	mov	r2, r0
 8021cf2:	68fb      	ldr	r3, [r7, #12]
 8021cf4:	1ad3      	subs	r3, r2, r3
 8021cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8021cfa:	4293      	cmp	r3, r2
 8021cfc:	d90a      	bls.n	8021d14 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021cfe:	4b3e      	ldr	r3, [pc, #248]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d00:	689b      	ldr	r3, [r3, #8]
 8021d02:	f003 020c 	and.w	r2, r3, #12
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	685b      	ldr	r3, [r3, #4]
 8021d0a:	009b      	lsls	r3, r3, #2
 8021d0c:	429a      	cmp	r2, r3
 8021d0e:	d001      	beq.n	8021d14 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8021d10:	2303      	movs	r3, #3
 8021d12:	e06a      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021d14:	4b38      	ldr	r3, [pc, #224]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d16:	689b      	ldr	r3, [r3, #8]
 8021d18:	f003 020c 	and.w	r2, r3, #12
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	685b      	ldr	r3, [r3, #4]
 8021d20:	009b      	lsls	r3, r3, #2
 8021d22:	429a      	cmp	r2, r3
 8021d24:	d1e2      	bne.n	8021cec <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8021d26:	697b      	ldr	r3, [r7, #20]
 8021d28:	2b80      	cmp	r3, #128	; 0x80
 8021d2a:	d105      	bne.n	8021d38 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8021d2c:	4b32      	ldr	r3, [pc, #200]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d2e:	689b      	ldr	r3, [r3, #8]
 8021d30:	4a31      	ldr	r2, [pc, #196]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021d36:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	f003 0302 	and.w	r3, r3, #2
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d010      	beq.n	8021d66 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	689a      	ldr	r2, [r3, #8]
 8021d48:	4b2b      	ldr	r3, [pc, #172]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d4a:	689b      	ldr	r3, [r3, #8]
 8021d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d50:	429a      	cmp	r2, r3
 8021d52:	d208      	bcs.n	8021d66 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021d54:	4b28      	ldr	r3, [pc, #160]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d56:	689b      	ldr	r3, [r3, #8]
 8021d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	689b      	ldr	r3, [r3, #8]
 8021d60:	4925      	ldr	r1, [pc, #148]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021d62:	4313      	orrs	r3, r2
 8021d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8021d66:	4b23      	ldr	r3, [pc, #140]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	f003 030f 	and.w	r3, r3, #15
 8021d6e:	683a      	ldr	r2, [r7, #0]
 8021d70:	429a      	cmp	r2, r3
 8021d72:	d210      	bcs.n	8021d96 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021d74:	4b1f      	ldr	r3, [pc, #124]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	f023 020f 	bic.w	r2, r3, #15
 8021d7c:	491d      	ldr	r1, [pc, #116]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021d7e:	683b      	ldr	r3, [r7, #0]
 8021d80:	4313      	orrs	r3, r2
 8021d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021d84:	4b1b      	ldr	r3, [pc, #108]	; (8021df4 <HAL_RCC_ClockConfig+0x25c>)
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	f003 030f 	and.w	r3, r3, #15
 8021d8c:	683a      	ldr	r2, [r7, #0]
 8021d8e:	429a      	cmp	r2, r3
 8021d90:	d001      	beq.n	8021d96 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8021d92:	2301      	movs	r3, #1
 8021d94:	e029      	b.n	8021dea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	f003 0304 	and.w	r3, r3, #4
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d008      	beq.n	8021db4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021da2:	4b15      	ldr	r3, [pc, #84]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021da4:	689b      	ldr	r3, [r3, #8]
 8021da6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	68db      	ldr	r3, [r3, #12]
 8021dae:	4912      	ldr	r1, [pc, #72]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021db0:	4313      	orrs	r3, r2
 8021db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	681b      	ldr	r3, [r3, #0]
 8021db8:	f003 0308 	and.w	r3, r3, #8
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	d009      	beq.n	8021dd4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021dc0:	4b0d      	ldr	r3, [pc, #52]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021dc2:	689b      	ldr	r3, [r3, #8]
 8021dc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	691b      	ldr	r3, [r3, #16]
 8021dcc:	00db      	lsls	r3, r3, #3
 8021dce:	490a      	ldr	r1, [pc, #40]	; (8021df8 <HAL_RCC_ClockConfig+0x260>)
 8021dd0:	4313      	orrs	r3, r2
 8021dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8021dd4:	f000 f8b6 	bl	8021f44 <HAL_RCC_GetHCLKFreq>
 8021dd8:	4603      	mov	r3, r0
 8021dda:	4a09      	ldr	r2, [pc, #36]	; (8021e00 <HAL_RCC_ClockConfig+0x268>)
 8021ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8021dde:	4b09      	ldr	r3, [pc, #36]	; (8021e04 <HAL_RCC_ClockConfig+0x26c>)
 8021de0:	681b      	ldr	r3, [r3, #0]
 8021de2:	4618      	mov	r0, r3
 8021de4:	f7fe fea4 	bl	8020b30 <HAL_InitTick>
 8021de8:	4603      	mov	r3, r0
}
 8021dea:	4618      	mov	r0, r3
 8021dec:	3718      	adds	r7, #24
 8021dee:	46bd      	mov	sp, r7
 8021df0:	bd80      	pop	{r7, pc}
 8021df2:	bf00      	nop
 8021df4:	40022000 	.word	0x40022000
 8021df8:	40021000 	.word	0x40021000
 8021dfc:	04c4b400 	.word	0x04c4b400
 8021e00:	20000000 	.word	0x20000000
 8021e04:	20000004 	.word	0x20000004

08021e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021e08:	b480      	push	{r7}
 8021e0a:	b089      	sub	sp, #36	; 0x24
 8021e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021e0e:	2300      	movs	r3, #0
 8021e10:	61fb      	str	r3, [r7, #28]
 8021e12:	2300      	movs	r3, #0
 8021e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021e16:	4b47      	ldr	r3, [pc, #284]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e18:	689b      	ldr	r3, [r3, #8]
 8021e1a:	f003 030c 	and.w	r3, r3, #12
 8021e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021e20:	4b44      	ldr	r3, [pc, #272]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e22:	68db      	ldr	r3, [r3, #12]
 8021e24:	f003 0303 	and.w	r3, r3, #3
 8021e28:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8021e2a:	693b      	ldr	r3, [r7, #16]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d005      	beq.n	8021e3c <HAL_RCC_GetSysClockFreq+0x34>
 8021e30:	693b      	ldr	r3, [r7, #16]
 8021e32:	2b0c      	cmp	r3, #12
 8021e34:	d121      	bne.n	8021e7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021e36:	68fb      	ldr	r3, [r7, #12]
 8021e38:	2b01      	cmp	r3, #1
 8021e3a:	d11e      	bne.n	8021e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021e3c:	4b3d      	ldr	r3, [pc, #244]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e3e:	681b      	ldr	r3, [r3, #0]
 8021e40:	f003 0308 	and.w	r3, r3, #8
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d107      	bne.n	8021e58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021e48:	4b3a      	ldr	r3, [pc, #232]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021e4e:	0a1b      	lsrs	r3, r3, #8
 8021e50:	f003 030f 	and.w	r3, r3, #15
 8021e54:	61fb      	str	r3, [r7, #28]
 8021e56:	e005      	b.n	8021e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021e58:	4b36      	ldr	r3, [pc, #216]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e5a:	681b      	ldr	r3, [r3, #0]
 8021e5c:	091b      	lsrs	r3, r3, #4
 8021e5e:	f003 030f 	and.w	r3, r3, #15
 8021e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8021e64:	4a34      	ldr	r2, [pc, #208]	; (8021f38 <HAL_RCC_GetSysClockFreq+0x130>)
 8021e66:	69fb      	ldr	r3, [r7, #28]
 8021e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021e6c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8021e6e:	693b      	ldr	r3, [r7, #16]
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d10d      	bne.n	8021e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021e74:	69fb      	ldr	r3, [r7, #28]
 8021e76:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8021e78:	e00a      	b.n	8021e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021e7a:	693b      	ldr	r3, [r7, #16]
 8021e7c:	2b04      	cmp	r3, #4
 8021e7e:	d102      	bne.n	8021e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8021e80:	4b2e      	ldr	r3, [pc, #184]	; (8021f3c <HAL_RCC_GetSysClockFreq+0x134>)
 8021e82:	61bb      	str	r3, [r7, #24]
 8021e84:	e004      	b.n	8021e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021e86:	693b      	ldr	r3, [r7, #16]
 8021e88:	2b08      	cmp	r3, #8
 8021e8a:	d101      	bne.n	8021e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021e8c:	4b2c      	ldr	r3, [pc, #176]	; (8021f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8021e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021e90:	693b      	ldr	r3, [r7, #16]
 8021e92:	2b0c      	cmp	r3, #12
 8021e94:	d146      	bne.n	8021f24 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8021e96:	4b27      	ldr	r3, [pc, #156]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021e98:	68db      	ldr	r3, [r3, #12]
 8021e9a:	f003 0303 	and.w	r3, r3, #3
 8021e9e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021ea0:	4b24      	ldr	r3, [pc, #144]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021ea2:	68db      	ldr	r3, [r3, #12]
 8021ea4:	091b      	lsrs	r3, r3, #4
 8021ea6:	f003 030f 	and.w	r3, r3, #15
 8021eaa:	3301      	adds	r3, #1
 8021eac:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8021eae:	68bb      	ldr	r3, [r7, #8]
 8021eb0:	2b02      	cmp	r3, #2
 8021eb2:	d003      	beq.n	8021ebc <HAL_RCC_GetSysClockFreq+0xb4>
 8021eb4:	68bb      	ldr	r3, [r7, #8]
 8021eb6:	2b03      	cmp	r3, #3
 8021eb8:	d00d      	beq.n	8021ed6 <HAL_RCC_GetSysClockFreq+0xce>
 8021eba:	e019      	b.n	8021ef0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021ebc:	4a1f      	ldr	r2, [pc, #124]	; (8021f3c <HAL_RCC_GetSysClockFreq+0x134>)
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ec4:	4a1b      	ldr	r2, [pc, #108]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021ec6:	68d2      	ldr	r2, [r2, #12]
 8021ec8:	0a12      	lsrs	r2, r2, #8
 8021eca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021ece:	fb02 f303 	mul.w	r3, r2, r3
 8021ed2:	617b      	str	r3, [r7, #20]
        break;
 8021ed4:	e019      	b.n	8021f0a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021ed6:	4a1a      	ldr	r2, [pc, #104]	; (8021f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ede:	4a15      	ldr	r2, [pc, #84]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021ee0:	68d2      	ldr	r2, [r2, #12]
 8021ee2:	0a12      	lsrs	r2, r2, #8
 8021ee4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021ee8:	fb02 f303 	mul.w	r3, r2, r3
 8021eec:	617b      	str	r3, [r7, #20]
        break;
 8021eee:	e00c      	b.n	8021f0a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8021ef0:	69fa      	ldr	r2, [r7, #28]
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ef8:	4a0e      	ldr	r2, [pc, #56]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021efa:	68d2      	ldr	r2, [r2, #12]
 8021efc:	0a12      	lsrs	r2, r2, #8
 8021efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021f02:	fb02 f303 	mul.w	r3, r2, r3
 8021f06:	617b      	str	r3, [r7, #20]
        break;
 8021f08:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8021f0a:	4b0a      	ldr	r3, [pc, #40]	; (8021f34 <HAL_RCC_GetSysClockFreq+0x12c>)
 8021f0c:	68db      	ldr	r3, [r3, #12]
 8021f0e:	0e5b      	lsrs	r3, r3, #25
 8021f10:	f003 0303 	and.w	r3, r3, #3
 8021f14:	3301      	adds	r3, #1
 8021f16:	005b      	lsls	r3, r3, #1
 8021f18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8021f1a:	697a      	ldr	r2, [r7, #20]
 8021f1c:	683b      	ldr	r3, [r7, #0]
 8021f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021f22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8021f24:	69bb      	ldr	r3, [r7, #24]
}
 8021f26:	4618      	mov	r0, r3
 8021f28:	3724      	adds	r7, #36	; 0x24
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f30:	4770      	bx	lr
 8021f32:	bf00      	nop
 8021f34:	40021000 	.word	0x40021000
 8021f38:	08023bc8 	.word	0x08023bc8
 8021f3c:	00f42400 	.word	0x00f42400
 8021f40:	007a1200 	.word	0x007a1200

08021f44 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021f44:	b580      	push	{r7, lr}
 8021f46:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8021f48:	f7ff ff5e 	bl	8021e08 <HAL_RCC_GetSysClockFreq>
 8021f4c:	4602      	mov	r2, r0
 8021f4e:	4b05      	ldr	r3, [pc, #20]	; (8021f64 <HAL_RCC_GetHCLKFreq+0x20>)
 8021f50:	689b      	ldr	r3, [r3, #8]
 8021f52:	091b      	lsrs	r3, r3, #4
 8021f54:	f003 030f 	and.w	r3, r3, #15
 8021f58:	4903      	ldr	r1, [pc, #12]	; (8021f68 <HAL_RCC_GetHCLKFreq+0x24>)
 8021f5a:	5ccb      	ldrb	r3, [r1, r3]
 8021f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021f60:	4618      	mov	r0, r3
 8021f62:	bd80      	pop	{r7, pc}
 8021f64:	40021000 	.word	0x40021000
 8021f68:	08023bb0 	.word	0x08023bb0

08021f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8021f70:	f7ff ffe8 	bl	8021f44 <HAL_RCC_GetHCLKFreq>
 8021f74:	4602      	mov	r2, r0
 8021f76:	4b05      	ldr	r3, [pc, #20]	; (8021f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8021f78:	689b      	ldr	r3, [r3, #8]
 8021f7a:	0a1b      	lsrs	r3, r3, #8
 8021f7c:	f003 0307 	and.w	r3, r3, #7
 8021f80:	4903      	ldr	r1, [pc, #12]	; (8021f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021f82:	5ccb      	ldrb	r3, [r1, r3]
 8021f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021f88:	4618      	mov	r0, r3
 8021f8a:	bd80      	pop	{r7, pc}
 8021f8c:	40021000 	.word	0x40021000
 8021f90:	08023bc0 	.word	0x08023bc0

08021f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021f94:	b580      	push	{r7, lr}
 8021f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021f98:	f7ff ffd4 	bl	8021f44 <HAL_RCC_GetHCLKFreq>
 8021f9c:	4602      	mov	r2, r0
 8021f9e:	4b05      	ldr	r3, [pc, #20]	; (8021fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8021fa0:	689b      	ldr	r3, [r3, #8]
 8021fa2:	0adb      	lsrs	r3, r3, #11
 8021fa4:	f003 0307 	and.w	r3, r3, #7
 8021fa8:	4903      	ldr	r1, [pc, #12]	; (8021fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021faa:	5ccb      	ldrb	r3, [r1, r3]
 8021fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	bd80      	pop	{r7, pc}
 8021fb4:	40021000 	.word	0x40021000
 8021fb8:	08023bc0 	.word	0x08023bc0

08021fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021fbc:	b580      	push	{r7, lr}
 8021fbe:	b086      	sub	sp, #24
 8021fc0:	af00      	add	r7, sp, #0
 8021fc2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021fc4:	2300      	movs	r3, #0
 8021fc6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021fc8:	4b2c      	ldr	r3, [pc, #176]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021fd0:	2b00      	cmp	r3, #0
 8021fd2:	d003      	beq.n	8021fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021fd4:	f7ff f86c 	bl	80210b0 <HAL_PWREx_GetVoltageRange>
 8021fd8:	6138      	str	r0, [r7, #16]
 8021fda:	e014      	b.n	8022006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8021fdc:	4b27      	ldr	r3, [pc, #156]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021fe0:	4a26      	ldr	r2, [pc, #152]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8021fe8:	4b24      	ldr	r3, [pc, #144]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021ff0:	60fb      	str	r3, [r7, #12]
 8021ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021ff4:	f7ff f85c 	bl	80210b0 <HAL_PWREx_GetVoltageRange>
 8021ff8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8021ffa:	4b20      	ldr	r3, [pc, #128]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8021ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021ffe:	4a1f      	ldr	r2, [pc, #124]	; (802207c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8022000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8022006:	693b      	ldr	r3, [r7, #16]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d003      	beq.n	8022014 <RCC_SetFlashLatencyFromMSIRange+0x58>
 802200c:	693b      	ldr	r3, [r7, #16]
 802200e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022012:	d10b      	bne.n	802202c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	2b80      	cmp	r3, #128	; 0x80
 8022018:	d919      	bls.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	2ba0      	cmp	r3, #160	; 0xa0
 802201e:	d902      	bls.n	8022026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022020:	2302      	movs	r3, #2
 8022022:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8022024:	e013      	b.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022026:	2301      	movs	r3, #1
 8022028:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 802202a:	e010      	b.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	2b80      	cmp	r3, #128	; 0x80
 8022030:	d902      	bls.n	8022038 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8022032:	2303      	movs	r3, #3
 8022034:	617b      	str	r3, [r7, #20]
 8022036:	e00a      	b.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	2b80      	cmp	r3, #128	; 0x80
 802203c:	d102      	bne.n	8022044 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 802203e:	2302      	movs	r3, #2
 8022040:	617b      	str	r3, [r7, #20]
 8022042:	e004      	b.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	2b70      	cmp	r3, #112	; 0x70
 8022048:	d101      	bne.n	802204e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 802204a:	2301      	movs	r3, #1
 802204c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 802204e:	4b0c      	ldr	r3, [pc, #48]	; (8022080 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8022050:	681b      	ldr	r3, [r3, #0]
 8022052:	f023 020f 	bic.w	r2, r3, #15
 8022056:	490a      	ldr	r1, [pc, #40]	; (8022080 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8022058:	697b      	ldr	r3, [r7, #20]
 802205a:	4313      	orrs	r3, r2
 802205c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 802205e:	4b08      	ldr	r3, [pc, #32]	; (8022080 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	f003 030f 	and.w	r3, r3, #15
 8022066:	697a      	ldr	r2, [r7, #20]
 8022068:	429a      	cmp	r2, r3
 802206a:	d001      	beq.n	8022070 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 802206c:	2301      	movs	r3, #1
 802206e:	e000      	b.n	8022072 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8022070:	2300      	movs	r3, #0
}
 8022072:	4618      	mov	r0, r3
 8022074:	3718      	adds	r7, #24
 8022076:	46bd      	mov	sp, r7
 8022078:	bd80      	pop	{r7, pc}
 802207a:	bf00      	nop
 802207c:	40021000 	.word	0x40021000
 8022080:	40022000 	.word	0x40022000

08022084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8022084:	b480      	push	{r7}
 8022086:	b087      	sub	sp, #28
 8022088:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802208a:	4b31      	ldr	r3, [pc, #196]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 802208c:	68db      	ldr	r3, [r3, #12]
 802208e:	f003 0303 	and.w	r3, r3, #3
 8022092:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022094:	4b2e      	ldr	r3, [pc, #184]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8022096:	68db      	ldr	r3, [r3, #12]
 8022098:	091b      	lsrs	r3, r3, #4
 802209a:	f003 030f 	and.w	r3, r3, #15
 802209e:	3301      	adds	r3, #1
 80220a0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80220a2:	68fb      	ldr	r3, [r7, #12]
 80220a4:	2b03      	cmp	r3, #3
 80220a6:	d015      	beq.n	80220d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	2b03      	cmp	r3, #3
 80220ac:	d839      	bhi.n	8022122 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	2b01      	cmp	r3, #1
 80220b2:	d01c      	beq.n	80220ee <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	2b02      	cmp	r3, #2
 80220b8:	d133      	bne.n	8022122 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80220ba:	4a26      	ldr	r2, [pc, #152]	; (8022154 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80220bc:	68bb      	ldr	r3, [r7, #8]
 80220be:	fbb2 f3f3 	udiv	r3, r2, r3
 80220c2:	4a23      	ldr	r2, [pc, #140]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80220c4:	68d2      	ldr	r2, [r2, #12]
 80220c6:	0a12      	lsrs	r2, r2, #8
 80220c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80220cc:	fb02 f303 	mul.w	r3, r2, r3
 80220d0:	613b      	str	r3, [r7, #16]
      break;
 80220d2:	e029      	b.n	8022128 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80220d4:	4a20      	ldr	r2, [pc, #128]	; (8022158 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80220d6:	68bb      	ldr	r3, [r7, #8]
 80220d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80220dc:	4a1c      	ldr	r2, [pc, #112]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80220de:	68d2      	ldr	r2, [r2, #12]
 80220e0:	0a12      	lsrs	r2, r2, #8
 80220e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80220e6:	fb02 f303 	mul.w	r3, r2, r3
 80220ea:	613b      	str	r3, [r7, #16]
      break;
 80220ec:	e01c      	b.n	8022128 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80220ee:	4b18      	ldr	r3, [pc, #96]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	f003 0308 	and.w	r3, r3, #8
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d107      	bne.n	802210a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80220fa:	4b15      	ldr	r3, [pc, #84]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80220fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8022100:	0a1b      	lsrs	r3, r3, #8
 8022102:	f003 030f 	and.w	r3, r3, #15
 8022106:	617b      	str	r3, [r7, #20]
 8022108:	e005      	b.n	8022116 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802210a:	4b11      	ldr	r3, [pc, #68]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	091b      	lsrs	r3, r3, #4
 8022110:	f003 030f 	and.w	r3, r3, #15
 8022114:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8022116:	4a11      	ldr	r2, [pc, #68]	; (802215c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8022118:	697b      	ldr	r3, [r7, #20]
 802211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802211e:	613b      	str	r3, [r7, #16]
        break;
 8022120:	e002      	b.n	8022128 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8022122:	2300      	movs	r3, #0
 8022124:	613b      	str	r3, [r7, #16]
      break;
 8022126:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8022128:	4b09      	ldr	r3, [pc, #36]	; (8022150 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 802212a:	68db      	ldr	r3, [r3, #12]
 802212c:	0e5b      	lsrs	r3, r3, #25
 802212e:	f003 0303 	and.w	r3, r3, #3
 8022132:	3301      	adds	r3, #1
 8022134:	005b      	lsls	r3, r3, #1
 8022136:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8022138:	693a      	ldr	r2, [r7, #16]
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8022140:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8022142:	683b      	ldr	r3, [r7, #0]
}
 8022144:	4618      	mov	r0, r3
 8022146:	371c      	adds	r7, #28
 8022148:	46bd      	mov	sp, r7
 802214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802214e:	4770      	bx	lr
 8022150:	40021000 	.word	0x40021000
 8022154:	00f42400 	.word	0x00f42400
 8022158:	007a1200 	.word	0x007a1200
 802215c:	08023bc8 	.word	0x08023bc8

08022160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022160:	b580      	push	{r7, lr}
 8022162:	b088      	sub	sp, #32
 8022164:	af00      	add	r7, sp, #0
 8022166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8022168:	2300      	movs	r3, #0
 802216a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 802216c:	2300      	movs	r3, #0
 802216e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8022178:	2b00      	cmp	r3, #0
 802217a:	d040      	beq.n	80221fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022180:	2b80      	cmp	r3, #128	; 0x80
 8022182:	d02a      	beq.n	80221da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8022184:	2b80      	cmp	r3, #128	; 0x80
 8022186:	d825      	bhi.n	80221d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8022188:	2b60      	cmp	r3, #96	; 0x60
 802218a:	d026      	beq.n	80221da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 802218c:	2b60      	cmp	r3, #96	; 0x60
 802218e:	d821      	bhi.n	80221d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8022190:	2b40      	cmp	r3, #64	; 0x40
 8022192:	d006      	beq.n	80221a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8022194:	2b40      	cmp	r3, #64	; 0x40
 8022196:	d81d      	bhi.n	80221d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8022198:	2b00      	cmp	r3, #0
 802219a:	d009      	beq.n	80221b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 802219c:	2b20      	cmp	r3, #32
 802219e:	d010      	beq.n	80221c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80221a0:	e018      	b.n	80221d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80221a2:	4b8f      	ldr	r3, [pc, #572]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221a4:	68db      	ldr	r3, [r3, #12]
 80221a6:	4a8e      	ldr	r2, [pc, #568]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80221ac:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80221ae:	e015      	b.n	80221dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	3304      	adds	r3, #4
 80221b4:	2100      	movs	r1, #0
 80221b6:	4618      	mov	r0, r3
 80221b8:	f000 fb56 	bl	8022868 <RCCEx_PLLSAI1_Config>
 80221bc:	4603      	mov	r3, r0
 80221be:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80221c0:	e00c      	b.n	80221dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80221c2:	687b      	ldr	r3, [r7, #4]
 80221c4:	3320      	adds	r3, #32
 80221c6:	2100      	movs	r1, #0
 80221c8:	4618      	mov	r0, r3
 80221ca:	f000 fc33 	bl	8022a34 <RCCEx_PLLSAI2_Config>
 80221ce:	4603      	mov	r3, r0
 80221d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80221d2:	e003      	b.n	80221dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80221d4:	2301      	movs	r3, #1
 80221d6:	77fb      	strb	r3, [r7, #31]
        break;
 80221d8:	e000      	b.n	80221dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80221da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80221dc:	7ffb      	ldrb	r3, [r7, #31]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d10b      	bne.n	80221fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80221e2:	4b7f      	ldr	r3, [pc, #508]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80221e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221f0:	497b      	ldr	r1, [pc, #492]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80221f2:	4313      	orrs	r3, r2
 80221f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80221f8:	e001      	b.n	80221fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80221fa:	7ffb      	ldrb	r3, [r7, #31]
 80221fc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022206:	2b00      	cmp	r3, #0
 8022208:	d047      	beq.n	802229a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022212:	d030      	beq.n	8022276 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8022214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022218:	d82a      	bhi.n	8022270 <HAL_RCCEx_PeriphCLKConfig+0x110>
 802221a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802221e:	d02a      	beq.n	8022276 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8022220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022224:	d824      	bhi.n	8022270 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8022226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802222a:	d008      	beq.n	802223e <HAL_RCCEx_PeriphCLKConfig+0xde>
 802222c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022230:	d81e      	bhi.n	8022270 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8022232:	2b00      	cmp	r3, #0
 8022234:	d00a      	beq.n	802224c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8022236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802223a:	d010      	beq.n	802225e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 802223c:	e018      	b.n	8022270 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 802223e:	4b68      	ldr	r3, [pc, #416]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022240:	68db      	ldr	r3, [r3, #12]
 8022242:	4a67      	ldr	r2, [pc, #412]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022248:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 802224a:	e015      	b.n	8022278 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	3304      	adds	r3, #4
 8022250:	2100      	movs	r1, #0
 8022252:	4618      	mov	r0, r3
 8022254:	f000 fb08 	bl	8022868 <RCCEx_PLLSAI1_Config>
 8022258:	4603      	mov	r3, r0
 802225a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 802225c:	e00c      	b.n	8022278 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	3320      	adds	r3, #32
 8022262:	2100      	movs	r1, #0
 8022264:	4618      	mov	r0, r3
 8022266:	f000 fbe5 	bl	8022a34 <RCCEx_PLLSAI2_Config>
 802226a:	4603      	mov	r3, r0
 802226c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 802226e:	e003      	b.n	8022278 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022270:	2301      	movs	r3, #1
 8022272:	77fb      	strb	r3, [r7, #31]
        break;
 8022274:	e000      	b.n	8022278 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8022276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022278:	7ffb      	ldrb	r3, [r7, #31]
 802227a:	2b00      	cmp	r3, #0
 802227c:	d10b      	bne.n	8022296 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 802227e:	4b58      	ldr	r3, [pc, #352]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802228c:	4954      	ldr	r1, [pc, #336]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802228e:	4313      	orrs	r3, r2
 8022290:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8022294:	e001      	b.n	802229a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022296:	7ffb      	ldrb	r3, [r7, #31]
 8022298:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	f000 80ab 	beq.w	80223fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80222a8:	2300      	movs	r3, #0
 80222aa:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80222ac:	4b4c      	ldr	r3, [pc, #304]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d10d      	bne.n	80222d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80222b8:	4b49      	ldr	r3, [pc, #292]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222bc:	4a48      	ldr	r2, [pc, #288]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80222c2:	6593      	str	r3, [r2, #88]	; 0x58
 80222c4:	4b46      	ldr	r3, [pc, #280]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80222c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80222cc:	60fb      	str	r3, [r7, #12]
 80222ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80222d0:	2301      	movs	r3, #1
 80222d2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80222d4:	4b43      	ldr	r3, [pc, #268]	; (80223e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80222d6:	681b      	ldr	r3, [r3, #0]
 80222d8:	4a42      	ldr	r2, [pc, #264]	; (80223e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80222da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80222de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80222e0:	f7fe fc76 	bl	8020bd0 <HAL_GetTick>
 80222e4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80222e6:	e00f      	b.n	8022308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80222e8:	f7fe fc72 	bl	8020bd0 <HAL_GetTick>
 80222ec:	4602      	mov	r2, r0
 80222ee:	693b      	ldr	r3, [r7, #16]
 80222f0:	1ad3      	subs	r3, r2, r3
 80222f2:	2b02      	cmp	r3, #2
 80222f4:	d908      	bls.n	8022308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80222f6:	4b3b      	ldr	r3, [pc, #236]	; (80223e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80222f8:	681b      	ldr	r3, [r3, #0]
 80222fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d109      	bne.n	8022316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8022302:	2303      	movs	r3, #3
 8022304:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8022306:	e006      	b.n	8022316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8022308:	4b36      	ldr	r3, [pc, #216]	; (80223e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022310:	2b00      	cmp	r3, #0
 8022312:	d0e9      	beq.n	80222e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8022314:	e000      	b.n	8022318 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8022316:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8022318:	7ffb      	ldrb	r3, [r7, #31]
 802231a:	2b00      	cmp	r3, #0
 802231c:	d164      	bne.n	80223e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 802231e:	4b30      	ldr	r3, [pc, #192]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022328:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 802232a:	69bb      	ldr	r3, [r7, #24]
 802232c:	2b00      	cmp	r3, #0
 802232e:	d01f      	beq.n	8022370 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022336:	69ba      	ldr	r2, [r7, #24]
 8022338:	429a      	cmp	r2, r3
 802233a:	d019      	beq.n	8022370 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 802233c:	4b28      	ldr	r3, [pc, #160]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022346:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8022348:	4b25      	ldr	r3, [pc, #148]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802234e:	4a24      	ldr	r2, [pc, #144]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8022358:	4b21      	ldr	r3, [pc, #132]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802235e:	4a20      	ldr	r2, [pc, #128]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8022364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8022368:	4a1d      	ldr	r2, [pc, #116]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802236a:	69bb      	ldr	r3, [r7, #24]
 802236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8022370:	69bb      	ldr	r3, [r7, #24]
 8022372:	f003 0301 	and.w	r3, r3, #1
 8022376:	2b00      	cmp	r3, #0
 8022378:	d01f      	beq.n	80223ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802237a:	f7fe fc29 	bl	8020bd0 <HAL_GetTick>
 802237e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022380:	e012      	b.n	80223a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022382:	f7fe fc25 	bl	8020bd0 <HAL_GetTick>
 8022386:	4602      	mov	r2, r0
 8022388:	693b      	ldr	r3, [r7, #16]
 802238a:	1ad3      	subs	r3, r2, r3
 802238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8022390:	4293      	cmp	r3, r2
 8022392:	d909      	bls.n	80223a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022394:	4b12      	ldr	r3, [pc, #72]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8022396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802239a:	f003 0302 	and.w	r3, r3, #2
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d10a      	bne.n	80223b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80223a2:	2303      	movs	r3, #3
 80223a4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80223a6:	e007      	b.n	80223b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80223a8:	4b0d      	ldr	r3, [pc, #52]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80223aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80223ae:	f003 0302 	and.w	r3, r3, #2
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	d0e5      	beq.n	8022382 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80223b6:	e000      	b.n	80223ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80223b8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80223ba:	7ffb      	ldrb	r3, [r7, #31]
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d10c      	bne.n	80223da <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80223c0:	4b07      	ldr	r3, [pc, #28]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80223c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80223c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80223d0:	4903      	ldr	r1, [pc, #12]	; (80223e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80223d2:	4313      	orrs	r3, r2
 80223d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80223d8:	e008      	b.n	80223ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80223da:	7ffb      	ldrb	r3, [r7, #31]
 80223dc:	77bb      	strb	r3, [r7, #30]
 80223de:	e005      	b.n	80223ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80223e0:	40021000 	.word	0x40021000
 80223e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80223e8:	7ffb      	ldrb	r3, [r7, #31]
 80223ea:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80223ec:	7dfb      	ldrb	r3, [r7, #23]
 80223ee:	2b01      	cmp	r3, #1
 80223f0:	d105      	bne.n	80223fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80223f2:	4b9c      	ldr	r3, [pc, #624]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80223f6:	4a9b      	ldr	r2, [pc, #620]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80223f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80223fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	681b      	ldr	r3, [r3, #0]
 8022402:	f003 0301 	and.w	r3, r3, #1
 8022406:	2b00      	cmp	r3, #0
 8022408:	d00a      	beq.n	8022420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 802240a:	4b96      	ldr	r3, [pc, #600]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022410:	f023 0203 	bic.w	r2, r3, #3
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022418:	4992      	ldr	r1, [pc, #584]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802241a:	4313      	orrs	r3, r2
 802241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	f003 0302 	and.w	r3, r3, #2
 8022428:	2b00      	cmp	r3, #0
 802242a:	d00a      	beq.n	8022442 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 802242c:	4b8d      	ldr	r3, [pc, #564]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022432:	f023 020c 	bic.w	r2, r3, #12
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802243a:	498a      	ldr	r1, [pc, #552]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802243c:	4313      	orrs	r3, r2
 802243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	f003 0304 	and.w	r3, r3, #4
 802244a:	2b00      	cmp	r3, #0
 802244c:	d00a      	beq.n	8022464 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 802244e:	4b85      	ldr	r3, [pc, #532]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802245c:	4981      	ldr	r1, [pc, #516]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802245e:	4313      	orrs	r3, r2
 8022460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	f003 0308 	and.w	r3, r3, #8
 802246c:	2b00      	cmp	r3, #0
 802246e:	d00a      	beq.n	8022486 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8022470:	4b7c      	ldr	r3, [pc, #496]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802247e:	4979      	ldr	r1, [pc, #484]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022480:	4313      	orrs	r3, r2
 8022482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	681b      	ldr	r3, [r3, #0]
 802248a:	f003 0310 	and.w	r3, r3, #16
 802248e:	2b00      	cmp	r3, #0
 8022490:	d00a      	beq.n	80224a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8022492:	4b74      	ldr	r3, [pc, #464]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224a0:	4970      	ldr	r1, [pc, #448]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224a2:	4313      	orrs	r3, r2
 80224a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	f003 0320 	and.w	r3, r3, #32
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d00a      	beq.n	80224ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80224b4:	4b6b      	ldr	r3, [pc, #428]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80224c2:	4968      	ldr	r1, [pc, #416]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224c4:	4313      	orrs	r3, r2
 80224c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	d00a      	beq.n	80224ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80224d6:	4b63      	ldr	r3, [pc, #396]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80224e4:	495f      	ldr	r1, [pc, #380]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224e6:	4313      	orrs	r3, r2
 80224e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d00a      	beq.n	802250e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80224f8:	4b5a      	ldr	r3, [pc, #360]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80224fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80224fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022506:	4957      	ldr	r1, [pc, #348]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022508:	4313      	orrs	r3, r2
 802250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022516:	2b00      	cmp	r3, #0
 8022518:	d00a      	beq.n	8022530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 802251a:	4b52      	ldr	r3, [pc, #328]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022528:	494e      	ldr	r1, [pc, #312]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802252a:	4313      	orrs	r3, r2
 802252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	681b      	ldr	r3, [r3, #0]
 8022534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022538:	2b00      	cmp	r3, #0
 802253a:	d031      	beq.n	80225a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8022544:	d00e      	beq.n	8022564 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8022546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802254a:	d814      	bhi.n	8022576 <HAL_RCCEx_PeriphCLKConfig+0x416>
 802254c:	2b00      	cmp	r3, #0
 802254e:	d015      	beq.n	802257c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8022550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022554:	d10f      	bne.n	8022576 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022556:	4b43      	ldr	r3, [pc, #268]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022558:	68db      	ldr	r3, [r3, #12]
 802255a:	4a42      	ldr	r2, [pc, #264]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802255c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022560:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8022562:	e00c      	b.n	802257e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	3304      	adds	r3, #4
 8022568:	2100      	movs	r1, #0
 802256a:	4618      	mov	r0, r3
 802256c:	f000 f97c 	bl	8022868 <RCCEx_PLLSAI1_Config>
 8022570:	4603      	mov	r3, r0
 8022572:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8022574:	e003      	b.n	802257e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8022576:	2301      	movs	r3, #1
 8022578:	77fb      	strb	r3, [r7, #31]
        break;
 802257a:	e000      	b.n	802257e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 802257c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802257e:	7ffb      	ldrb	r3, [r7, #31]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d10b      	bne.n	802259c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8022584:	4b37      	ldr	r3, [pc, #220]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802258a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022592:	4934      	ldr	r1, [pc, #208]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022594:	4313      	orrs	r3, r2
 8022596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 802259a:	e001      	b.n	80225a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802259c:	7ffb      	ldrb	r3, [r7, #31]
 802259e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d00a      	beq.n	80225c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80225ac:	4b2d      	ldr	r3, [pc, #180]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80225b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80225ba:	492a      	ldr	r1, [pc, #168]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225bc:	4313      	orrs	r3, r2
 80225be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	d00a      	beq.n	80225e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80225ce:	4b25      	ldr	r3, [pc, #148]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80225d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80225dc:	4921      	ldr	r1, [pc, #132]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225de:	4313      	orrs	r3, r2
 80225e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	681b      	ldr	r3, [r3, #0]
 80225e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d00a      	beq.n	8022606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80225f0:	4b1c      	ldr	r3, [pc, #112]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80225f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80225f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80225fe:	4919      	ldr	r1, [pc, #100]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022600:	4313      	orrs	r3, r2
 8022602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	681b      	ldr	r3, [r3, #0]
 802260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802260e:	2b00      	cmp	r3, #0
 8022610:	d00a      	beq.n	8022628 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8022612:	4b14      	ldr	r3, [pc, #80]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022618:	f023 0203 	bic.w	r2, r3, #3
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022620:	4910      	ldr	r1, [pc, #64]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022622:	4313      	orrs	r3, r2
 8022624:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	681b      	ldr	r3, [r3, #0]
 802262c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022630:	2b00      	cmp	r3, #0
 8022632:	d02b      	beq.n	802268c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8022634:	4b0b      	ldr	r3, [pc, #44]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802263a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022642:	4908      	ldr	r1, [pc, #32]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022644:	4313      	orrs	r3, r2
 8022646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022652:	d109      	bne.n	8022668 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022654:	4b03      	ldr	r3, [pc, #12]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8022656:	68db      	ldr	r3, [r3, #12]
 8022658:	4a02      	ldr	r2, [pc, #8]	; (8022664 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 802265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802265e:	60d3      	str	r3, [r2, #12]
 8022660:	e014      	b.n	802268c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8022662:	bf00      	nop
 8022664:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802266c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8022670:	d10c      	bne.n	802268c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	3304      	adds	r3, #4
 8022676:	2101      	movs	r1, #1
 8022678:	4618      	mov	r0, r3
 802267a:	f000 f8f5 	bl	8022868 <RCCEx_PLLSAI1_Config>
 802267e:	4603      	mov	r3, r0
 8022680:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8022682:	7ffb      	ldrb	r3, [r7, #31]
 8022684:	2b00      	cmp	r3, #0
 8022686:	d001      	beq.n	802268c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8022688:	7ffb      	ldrb	r3, [r7, #31]
 802268a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	681b      	ldr	r3, [r3, #0]
 8022690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022694:	2b00      	cmp	r3, #0
 8022696:	d04a      	beq.n	802272e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802269c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80226a0:	d108      	bne.n	80226b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80226a2:	4b70      	ldr	r3, [pc, #448]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80226a8:	4a6e      	ldr	r2, [pc, #440]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80226ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80226b2:	e012      	b.n	80226da <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80226b4:	4b6b      	ldr	r3, [pc, #428]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80226ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80226c2:	4968      	ldr	r1, [pc, #416]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226c4:	4313      	orrs	r3, r2
 80226c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80226ca:	4b66      	ldr	r3, [pc, #408]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80226d0:	4a64      	ldr	r2, [pc, #400]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80226d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80226d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80226de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80226e2:	d10d      	bne.n	8022700 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	3304      	adds	r3, #4
 80226e8:	2101      	movs	r1, #1
 80226ea:	4618      	mov	r0, r3
 80226ec:	f000 f8bc 	bl	8022868 <RCCEx_PLLSAI1_Config>
 80226f0:	4603      	mov	r3, r0
 80226f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80226f4:	7ffb      	ldrb	r3, [r7, #31]
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d019      	beq.n	802272e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80226fa:	7ffb      	ldrb	r3, [r7, #31]
 80226fc:	77bb      	strb	r3, [r7, #30]
 80226fe:	e016      	b.n	802272e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022708:	d106      	bne.n	8022718 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 802270a:	4b56      	ldr	r3, [pc, #344]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802270c:	68db      	ldr	r3, [r3, #12]
 802270e:	4a55      	ldr	r2, [pc, #340]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022714:	60d3      	str	r3, [r2, #12]
 8022716:	e00a      	b.n	802272e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802271c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022720:	d105      	bne.n	802272e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8022722:	4b50      	ldr	r3, [pc, #320]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022724:	68db      	ldr	r3, [r3, #12]
 8022726:	4a4f      	ldr	r2, [pc, #316]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802272c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	681b      	ldr	r3, [r3, #0]
 8022732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022736:	2b00      	cmp	r3, #0
 8022738:	d028      	beq.n	802278c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802273a:	4b4a      	ldr	r3, [pc, #296]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022740:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022748:	4946      	ldr	r1, [pc, #280]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802274a:	4313      	orrs	r3, r2
 802274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022758:	d106      	bne.n	8022768 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 802275a:	4b42      	ldr	r3, [pc, #264]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802275c:	68db      	ldr	r3, [r3, #12]
 802275e:	4a41      	ldr	r2, [pc, #260]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022764:	60d3      	str	r3, [r2, #12]
 8022766:	e011      	b.n	802278c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802276c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8022770:	d10c      	bne.n	802278c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	3304      	adds	r3, #4
 8022776:	2101      	movs	r1, #1
 8022778:	4618      	mov	r0, r3
 802277a:	f000 f875 	bl	8022868 <RCCEx_PLLSAI1_Config>
 802277e:	4603      	mov	r3, r0
 8022780:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022782:	7ffb      	ldrb	r3, [r7, #31]
 8022784:	2b00      	cmp	r3, #0
 8022786:	d001      	beq.n	802278c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8022788:	7ffb      	ldrb	r3, [r7, #31]
 802278a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802278c:	687b      	ldr	r3, [r7, #4]
 802278e:	681b      	ldr	r3, [r3, #0]
 8022790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022794:	2b00      	cmp	r3, #0
 8022796:	d01e      	beq.n	80227d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8022798:	4b32      	ldr	r3, [pc, #200]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802279e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80227a8:	492e      	ldr	r1, [pc, #184]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227aa:	4313      	orrs	r3, r2
 80227ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80227b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80227ba:	d10c      	bne.n	80227d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	3304      	adds	r3, #4
 80227c0:	2102      	movs	r1, #2
 80227c2:	4618      	mov	r0, r3
 80227c4:	f000 f850 	bl	8022868 <RCCEx_PLLSAI1_Config>
 80227c8:	4603      	mov	r3, r0
 80227ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80227cc:	7ffb      	ldrb	r3, [r7, #31]
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	d001      	beq.n	80227d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80227d2:	7ffb      	ldrb	r3, [r7, #31]
 80227d4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d00b      	beq.n	80227fa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80227e2:	4b20      	ldr	r3, [pc, #128]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80227e8:	f023 0204 	bic.w	r2, r3, #4
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80227f2:	491c      	ldr	r1, [pc, #112]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80227f4:	4313      	orrs	r3, r2
 80227f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022802:	2b00      	cmp	r3, #0
 8022804:	d00b      	beq.n	802281e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8022806:	4b17      	ldr	r3, [pc, #92]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802280c:	f023 0218 	bic.w	r2, r3, #24
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022816:	4913      	ldr	r1, [pc, #76]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022818:	4313      	orrs	r3, r2
 802281a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022826:	2b00      	cmp	r3, #0
 8022828:	d017      	beq.n	802285a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 802282a:	4b0e      	ldr	r3, [pc, #56]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802282c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8022830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802283a:	490a      	ldr	r1, [pc, #40]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 802283c:	4313      	orrs	r3, r2
 802283e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802284c:	d105      	bne.n	802285a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 802284e:	4b05      	ldr	r3, [pc, #20]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022850:	68db      	ldr	r3, [r3, #12]
 8022852:	4a04      	ldr	r2, [pc, #16]	; (8022864 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8022854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022858:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 802285a:	7fbb      	ldrb	r3, [r7, #30]
}
 802285c:	4618      	mov	r0, r3
 802285e:	3720      	adds	r7, #32
 8022860:	46bd      	mov	sp, r7
 8022862:	bd80      	pop	{r7, pc}
 8022864:	40021000 	.word	0x40021000

08022868 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b084      	sub	sp, #16
 802286c:	af00      	add	r7, sp, #0
 802286e:	6078      	str	r0, [r7, #4]
 8022870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022872:	2300      	movs	r3, #0
 8022874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	681b      	ldr	r3, [r3, #0]
 802287a:	2b03      	cmp	r3, #3
 802287c:	d018      	beq.n	80228b0 <RCCEx_PLLSAI1_Config+0x48>
 802287e:	2b03      	cmp	r3, #3
 8022880:	d81f      	bhi.n	80228c2 <RCCEx_PLLSAI1_Config+0x5a>
 8022882:	2b01      	cmp	r3, #1
 8022884:	d002      	beq.n	802288c <RCCEx_PLLSAI1_Config+0x24>
 8022886:	2b02      	cmp	r3, #2
 8022888:	d009      	beq.n	802289e <RCCEx_PLLSAI1_Config+0x36>
 802288a:	e01a      	b.n	80228c2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 802288c:	4b65      	ldr	r3, [pc, #404]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	f003 0302 	and.w	r3, r3, #2
 8022894:	2b00      	cmp	r3, #0
 8022896:	d117      	bne.n	80228c8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8022898:	2301      	movs	r3, #1
 802289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802289c:	e014      	b.n	80228c8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 802289e:	4b61      	ldr	r3, [pc, #388]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d110      	bne.n	80228cc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80228aa:	2301      	movs	r3, #1
 80228ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80228ae:	e00d      	b.n	80228cc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80228b0:	4b5c      	ldr	r3, [pc, #368]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d109      	bne.n	80228d0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80228bc:	2301      	movs	r3, #1
 80228be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80228c0:	e006      	b.n	80228d0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80228c2:	2301      	movs	r3, #1
 80228c4:	73fb      	strb	r3, [r7, #15]
      break;
 80228c6:	e004      	b.n	80228d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80228c8:	bf00      	nop
 80228ca:	e002      	b.n	80228d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80228cc:	bf00      	nop
 80228ce:	e000      	b.n	80228d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80228d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80228d2:	7bfb      	ldrb	r3, [r7, #15]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	f040 809f 	bne.w	8022a18 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80228da:	4b52      	ldr	r3, [pc, #328]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	4a51      	ldr	r2, [pc, #324]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80228e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80228e6:	f7fe f973 	bl	8020bd0 <HAL_GetTick>
 80228ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80228ec:	e00f      	b.n	802290e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80228ee:	f7fe f96f 	bl	8020bd0 <HAL_GetTick>
 80228f2:	4602      	mov	r2, r0
 80228f4:	68bb      	ldr	r3, [r7, #8]
 80228f6:	1ad3      	subs	r3, r2, r3
 80228f8:	2b02      	cmp	r3, #2
 80228fa:	d908      	bls.n	802290e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80228fc:	4b49      	ldr	r3, [pc, #292]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80228fe:	681b      	ldr	r3, [r3, #0]
 8022900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022904:	2b00      	cmp	r3, #0
 8022906:	d009      	beq.n	802291c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8022908:	2303      	movs	r3, #3
 802290a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802290c:	e006      	b.n	802291c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 802290e:	4b45      	ldr	r3, [pc, #276]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022910:	681b      	ldr	r3, [r3, #0]
 8022912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022916:	2b00      	cmp	r3, #0
 8022918:	d1e9      	bne.n	80228ee <RCCEx_PLLSAI1_Config+0x86>
 802291a:	e000      	b.n	802291e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 802291c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 802291e:	7bfb      	ldrb	r3, [r7, #15]
 8022920:	2b00      	cmp	r3, #0
 8022922:	d179      	bne.n	8022a18 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8022924:	683b      	ldr	r3, [r7, #0]
 8022926:	2b00      	cmp	r3, #0
 8022928:	d116      	bne.n	8022958 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802292a:	4b3e      	ldr	r3, [pc, #248]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 802292c:	691a      	ldr	r2, [r3, #16]
 802292e:	4b3e      	ldr	r3, [pc, #248]	; (8022a28 <RCCEx_PLLSAI1_Config+0x1c0>)
 8022930:	4013      	ands	r3, r2
 8022932:	687a      	ldr	r2, [r7, #4]
 8022934:	6892      	ldr	r2, [r2, #8]
 8022936:	0211      	lsls	r1, r2, #8
 8022938:	687a      	ldr	r2, [r7, #4]
 802293a:	68d2      	ldr	r2, [r2, #12]
 802293c:	06d2      	lsls	r2, r2, #27
 802293e:	4311      	orrs	r1, r2
 8022940:	687a      	ldr	r2, [r7, #4]
 8022942:	6852      	ldr	r2, [r2, #4]
 8022944:	3a01      	subs	r2, #1
 8022946:	0112      	lsls	r2, r2, #4
 8022948:	4311      	orrs	r1, r2
 802294a:	687a      	ldr	r2, [r7, #4]
 802294c:	6812      	ldr	r2, [r2, #0]
 802294e:	430a      	orrs	r2, r1
 8022950:	4934      	ldr	r1, [pc, #208]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022952:	4313      	orrs	r3, r2
 8022954:	610b      	str	r3, [r1, #16]
 8022956:	e033      	b.n	80229c0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8022958:	683b      	ldr	r3, [r7, #0]
 802295a:	2b01      	cmp	r3, #1
 802295c:	d118      	bne.n	8022990 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802295e:	4b31      	ldr	r3, [pc, #196]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022960:	691a      	ldr	r2, [r3, #16]
 8022962:	4b32      	ldr	r3, [pc, #200]	; (8022a2c <RCCEx_PLLSAI1_Config+0x1c4>)
 8022964:	4013      	ands	r3, r2
 8022966:	687a      	ldr	r2, [r7, #4]
 8022968:	6892      	ldr	r2, [r2, #8]
 802296a:	0211      	lsls	r1, r2, #8
 802296c:	687a      	ldr	r2, [r7, #4]
 802296e:	6912      	ldr	r2, [r2, #16]
 8022970:	0852      	lsrs	r2, r2, #1
 8022972:	3a01      	subs	r2, #1
 8022974:	0552      	lsls	r2, r2, #21
 8022976:	4311      	orrs	r1, r2
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	6852      	ldr	r2, [r2, #4]
 802297c:	3a01      	subs	r2, #1
 802297e:	0112      	lsls	r2, r2, #4
 8022980:	4311      	orrs	r1, r2
 8022982:	687a      	ldr	r2, [r7, #4]
 8022984:	6812      	ldr	r2, [r2, #0]
 8022986:	430a      	orrs	r2, r1
 8022988:	4926      	ldr	r1, [pc, #152]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 802298a:	4313      	orrs	r3, r2
 802298c:	610b      	str	r3, [r1, #16]
 802298e:	e017      	b.n	80229c0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8022990:	4b24      	ldr	r3, [pc, #144]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022992:	691a      	ldr	r2, [r3, #16]
 8022994:	4b26      	ldr	r3, [pc, #152]	; (8022a30 <RCCEx_PLLSAI1_Config+0x1c8>)
 8022996:	4013      	ands	r3, r2
 8022998:	687a      	ldr	r2, [r7, #4]
 802299a:	6892      	ldr	r2, [r2, #8]
 802299c:	0211      	lsls	r1, r2, #8
 802299e:	687a      	ldr	r2, [r7, #4]
 80229a0:	6952      	ldr	r2, [r2, #20]
 80229a2:	0852      	lsrs	r2, r2, #1
 80229a4:	3a01      	subs	r2, #1
 80229a6:	0652      	lsls	r2, r2, #25
 80229a8:	4311      	orrs	r1, r2
 80229aa:	687a      	ldr	r2, [r7, #4]
 80229ac:	6852      	ldr	r2, [r2, #4]
 80229ae:	3a01      	subs	r2, #1
 80229b0:	0112      	lsls	r2, r2, #4
 80229b2:	4311      	orrs	r1, r2
 80229b4:	687a      	ldr	r2, [r7, #4]
 80229b6:	6812      	ldr	r2, [r2, #0]
 80229b8:	430a      	orrs	r2, r1
 80229ba:	491a      	ldr	r1, [pc, #104]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80229bc:	4313      	orrs	r3, r2
 80229be:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80229c0:	4b18      	ldr	r3, [pc, #96]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	4a17      	ldr	r2, [pc, #92]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80229c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80229ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80229cc:	f7fe f900 	bl	8020bd0 <HAL_GetTick>
 80229d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80229d2:	e00f      	b.n	80229f4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80229d4:	f7fe f8fc 	bl	8020bd0 <HAL_GetTick>
 80229d8:	4602      	mov	r2, r0
 80229da:	68bb      	ldr	r3, [r7, #8]
 80229dc:	1ad3      	subs	r3, r2, r3
 80229de:	2b02      	cmp	r3, #2
 80229e0:	d908      	bls.n	80229f4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80229e2:	4b10      	ldr	r3, [pc, #64]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d109      	bne.n	8022a02 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80229ee:	2303      	movs	r3, #3
 80229f0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80229f2:	e006      	b.n	8022a02 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80229f4:	4b0b      	ldr	r3, [pc, #44]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80229fc:	2b00      	cmp	r3, #0
 80229fe:	d0e9      	beq.n	80229d4 <RCCEx_PLLSAI1_Config+0x16c>
 8022a00:	e000      	b.n	8022a04 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8022a02:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8022a04:	7bfb      	ldrb	r3, [r7, #15]
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d106      	bne.n	8022a18 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8022a0a:	4b06      	ldr	r3, [pc, #24]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022a0c:	691a      	ldr	r2, [r3, #16]
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	699b      	ldr	r3, [r3, #24]
 8022a12:	4904      	ldr	r1, [pc, #16]	; (8022a24 <RCCEx_PLLSAI1_Config+0x1bc>)
 8022a14:	4313      	orrs	r3, r2
 8022a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8022a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a1a:	4618      	mov	r0, r3
 8022a1c:	3710      	adds	r7, #16
 8022a1e:	46bd      	mov	sp, r7
 8022a20:	bd80      	pop	{r7, pc}
 8022a22:	bf00      	nop
 8022a24:	40021000 	.word	0x40021000
 8022a28:	07ff800c 	.word	0x07ff800c
 8022a2c:	ff9f800c 	.word	0xff9f800c
 8022a30:	f9ff800c 	.word	0xf9ff800c

08022a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b084      	sub	sp, #16
 8022a38:	af00      	add	r7, sp, #0
 8022a3a:	6078      	str	r0, [r7, #4]
 8022a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022a3e:	2300      	movs	r3, #0
 8022a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	2b03      	cmp	r3, #3
 8022a48:	d018      	beq.n	8022a7c <RCCEx_PLLSAI2_Config+0x48>
 8022a4a:	2b03      	cmp	r3, #3
 8022a4c:	d81f      	bhi.n	8022a8e <RCCEx_PLLSAI2_Config+0x5a>
 8022a4e:	2b01      	cmp	r3, #1
 8022a50:	d002      	beq.n	8022a58 <RCCEx_PLLSAI2_Config+0x24>
 8022a52:	2b02      	cmp	r3, #2
 8022a54:	d009      	beq.n	8022a6a <RCCEx_PLLSAI2_Config+0x36>
 8022a56:	e01a      	b.n	8022a8e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8022a58:	4b4a      	ldr	r3, [pc, #296]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	f003 0302 	and.w	r3, r3, #2
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d117      	bne.n	8022a94 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8022a64:	2301      	movs	r3, #1
 8022a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022a68:	e014      	b.n	8022a94 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8022a6a:	4b46      	ldr	r3, [pc, #280]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d110      	bne.n	8022a98 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8022a76:	2301      	movs	r3, #1
 8022a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022a7a:	e00d      	b.n	8022a98 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8022a7c:	4b41      	ldr	r3, [pc, #260]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8022a84:	2b00      	cmp	r3, #0
 8022a86:	d109      	bne.n	8022a9c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8022a88:	2301      	movs	r3, #1
 8022a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022a8c:	e006      	b.n	8022a9c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8022a8e:	2301      	movs	r3, #1
 8022a90:	73fb      	strb	r3, [r7, #15]
      break;
 8022a92:	e004      	b.n	8022a9e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a94:	bf00      	nop
 8022a96:	e002      	b.n	8022a9e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a98:	bf00      	nop
 8022a9a:	e000      	b.n	8022a9e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8022a9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8022a9e:	7bfb      	ldrb	r3, [r7, #15]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d169      	bne.n	8022b78 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8022aa4:	4b37      	ldr	r3, [pc, #220]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	4a36      	ldr	r2, [pc, #216]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022ab0:	f7fe f88e 	bl	8020bd0 <HAL_GetTick>
 8022ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022ab6:	e00f      	b.n	8022ad8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022ab8:	f7fe f88a 	bl	8020bd0 <HAL_GetTick>
 8022abc:	4602      	mov	r2, r0
 8022abe:	68bb      	ldr	r3, [r7, #8]
 8022ac0:	1ad3      	subs	r3, r2, r3
 8022ac2:	2b02      	cmp	r3, #2
 8022ac4:	d908      	bls.n	8022ad8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022ac6:	4b2f      	ldr	r3, [pc, #188]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022ac8:	681b      	ldr	r3, [r3, #0]
 8022aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	d009      	beq.n	8022ae6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8022ad2:	2303      	movs	r3, #3
 8022ad4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8022ad6:	e006      	b.n	8022ae6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8022ad8:	4b2a      	ldr	r3, [pc, #168]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022ada:	681b      	ldr	r3, [r3, #0]
 8022adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d1e9      	bne.n	8022ab8 <RCCEx_PLLSAI2_Config+0x84>
 8022ae4:	e000      	b.n	8022ae8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8022ae6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8022ae8:	7bfb      	ldrb	r3, [r7, #15]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d144      	bne.n	8022b78 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8022aee:	683b      	ldr	r3, [r7, #0]
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	d115      	bne.n	8022b20 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8022af4:	4b23      	ldr	r3, [pc, #140]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022af6:	695a      	ldr	r2, [r3, #20]
 8022af8:	4b23      	ldr	r3, [pc, #140]	; (8022b88 <RCCEx_PLLSAI2_Config+0x154>)
 8022afa:	4013      	ands	r3, r2
 8022afc:	687a      	ldr	r2, [r7, #4]
 8022afe:	6892      	ldr	r2, [r2, #8]
 8022b00:	0211      	lsls	r1, r2, #8
 8022b02:	687a      	ldr	r2, [r7, #4]
 8022b04:	68d2      	ldr	r2, [r2, #12]
 8022b06:	06d2      	lsls	r2, r2, #27
 8022b08:	4311      	orrs	r1, r2
 8022b0a:	687a      	ldr	r2, [r7, #4]
 8022b0c:	6852      	ldr	r2, [r2, #4]
 8022b0e:	3a01      	subs	r2, #1
 8022b10:	0112      	lsls	r2, r2, #4
 8022b12:	4311      	orrs	r1, r2
 8022b14:	687a      	ldr	r2, [r7, #4]
 8022b16:	6812      	ldr	r2, [r2, #0]
 8022b18:	430a      	orrs	r2, r1
 8022b1a:	491a      	ldr	r1, [pc, #104]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b1c:	4313      	orrs	r3, r2
 8022b1e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8022b20:	4b18      	ldr	r3, [pc, #96]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	4a17      	ldr	r2, [pc, #92]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022b2c:	f7fe f850 	bl	8020bd0 <HAL_GetTick>
 8022b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022b32:	e00f      	b.n	8022b54 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022b34:	f7fe f84c 	bl	8020bd0 <HAL_GetTick>
 8022b38:	4602      	mov	r2, r0
 8022b3a:	68bb      	ldr	r3, [r7, #8]
 8022b3c:	1ad3      	subs	r3, r2, r3
 8022b3e:	2b02      	cmp	r3, #2
 8022b40:	d908      	bls.n	8022b54 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022b42:	4b10      	ldr	r3, [pc, #64]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d109      	bne.n	8022b62 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8022b4e:	2303      	movs	r3, #3
 8022b50:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8022b52:	e006      	b.n	8022b62 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8022b54:	4b0b      	ldr	r3, [pc, #44]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d0e9      	beq.n	8022b34 <RCCEx_PLLSAI2_Config+0x100>
 8022b60:	e000      	b.n	8022b64 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8022b62:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8022b64:	7bfb      	ldrb	r3, [r7, #15]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d106      	bne.n	8022b78 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8022b6a:	4b06      	ldr	r3, [pc, #24]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b6c:	695a      	ldr	r2, [r3, #20]
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	691b      	ldr	r3, [r3, #16]
 8022b72:	4904      	ldr	r1, [pc, #16]	; (8022b84 <RCCEx_PLLSAI2_Config+0x150>)
 8022b74:	4313      	orrs	r3, r2
 8022b76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8022b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b7a:	4618      	mov	r0, r3
 8022b7c:	3710      	adds	r7, #16
 8022b7e:	46bd      	mov	sp, r7
 8022b80:	bd80      	pop	{r7, pc}
 8022b82:	bf00      	nop
 8022b84:	40021000 	.word	0x40021000
 8022b88:	07ff800c 	.word	0x07ff800c

08022b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022b8c:	b580      	push	{r7, lr}
 8022b8e:	b082      	sub	sp, #8
 8022b90:	af00      	add	r7, sp, #0
 8022b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	d101      	bne.n	8022b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022b9a:	2301      	movs	r3, #1
 8022b9c:	e042      	b.n	8022c24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d106      	bne.n	8022bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	2200      	movs	r2, #0
 8022bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022bb0:	6878      	ldr	r0, [r7, #4]
 8022bb2:	f7fd fe2f 	bl	8020814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	2224      	movs	r2, #36	; 0x24
 8022bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	681a      	ldr	r2, [r3, #0]
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	f022 0201 	bic.w	r2, r2, #1
 8022bcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d002      	beq.n	8022bdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8022bd6:	6878      	ldr	r0, [r7, #4]
 8022bd8:	f000 fc7e 	bl	80234d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022bdc:	6878      	ldr	r0, [r7, #4]
 8022bde:	f000 f97b 	bl	8022ed8 <UART_SetConfig>
 8022be2:	4603      	mov	r3, r0
 8022be4:	2b01      	cmp	r3, #1
 8022be6:	d101      	bne.n	8022bec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8022be8:	2301      	movs	r3, #1
 8022bea:	e01b      	b.n	8022c24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	681b      	ldr	r3, [r3, #0]
 8022bf0:	685a      	ldr	r2, [r3, #4]
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	689a      	ldr	r2, [r3, #8]
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	681a      	ldr	r2, [r3, #0]
 8022c12:	687b      	ldr	r3, [r7, #4]
 8022c14:	681b      	ldr	r3, [r3, #0]
 8022c16:	f042 0201 	orr.w	r2, r2, #1
 8022c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022c1c:	6878      	ldr	r0, [r7, #4]
 8022c1e:	f000 fcfd 	bl	802361c <UART_CheckIdleState>
 8022c22:	4603      	mov	r3, r0
}
 8022c24:	4618      	mov	r0, r3
 8022c26:	3708      	adds	r7, #8
 8022c28:	46bd      	mov	sp, r7
 8022c2a:	bd80      	pop	{r7, pc}

08022c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022c2c:	b580      	push	{r7, lr}
 8022c2e:	b08a      	sub	sp, #40	; 0x28
 8022c30:	af02      	add	r7, sp, #8
 8022c32:	60f8      	str	r0, [r7, #12]
 8022c34:	60b9      	str	r1, [r7, #8]
 8022c36:	603b      	str	r3, [r7, #0]
 8022c38:	4613      	mov	r3, r2
 8022c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022c3c:	68fb      	ldr	r3, [r7, #12]
 8022c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022c42:	2b20      	cmp	r3, #32
 8022c44:	d17b      	bne.n	8022d3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8022c46:	68bb      	ldr	r3, [r7, #8]
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d002      	beq.n	8022c52 <HAL_UART_Transmit+0x26>
 8022c4c:	88fb      	ldrh	r3, [r7, #6]
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d101      	bne.n	8022c56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8022c52:	2301      	movs	r3, #1
 8022c54:	e074      	b.n	8022d40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022c56:	68fb      	ldr	r3, [r7, #12]
 8022c58:	2200      	movs	r2, #0
 8022c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022c5e:	68fb      	ldr	r3, [r7, #12]
 8022c60:	2221      	movs	r2, #33	; 0x21
 8022c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8022c66:	f7fd ffb3 	bl	8020bd0 <HAL_GetTick>
 8022c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8022c6c:	68fb      	ldr	r3, [r7, #12]
 8022c6e:	88fa      	ldrh	r2, [r7, #6]
 8022c70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	88fa      	ldrh	r2, [r7, #6]
 8022c78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022c7c:	68fb      	ldr	r3, [r7, #12]
 8022c7e:	689b      	ldr	r3, [r3, #8]
 8022c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022c84:	d108      	bne.n	8022c98 <HAL_UART_Transmit+0x6c>
 8022c86:	68fb      	ldr	r3, [r7, #12]
 8022c88:	691b      	ldr	r3, [r3, #16]
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d104      	bne.n	8022c98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8022c8e:	2300      	movs	r3, #0
 8022c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8022c92:	68bb      	ldr	r3, [r7, #8]
 8022c94:	61bb      	str	r3, [r7, #24]
 8022c96:	e003      	b.n	8022ca0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8022c98:	68bb      	ldr	r3, [r7, #8]
 8022c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8022ca0:	e030      	b.n	8022d04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022ca2:	683b      	ldr	r3, [r7, #0]
 8022ca4:	9300      	str	r3, [sp, #0]
 8022ca6:	697b      	ldr	r3, [r7, #20]
 8022ca8:	2200      	movs	r2, #0
 8022caa:	2180      	movs	r1, #128	; 0x80
 8022cac:	68f8      	ldr	r0, [r7, #12]
 8022cae:	f000 fd5f 	bl	8023770 <UART_WaitOnFlagUntilTimeout>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	d005      	beq.n	8022cc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8022cb8:	68fb      	ldr	r3, [r7, #12]
 8022cba:	2220      	movs	r2, #32
 8022cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8022cc0:	2303      	movs	r3, #3
 8022cc2:	e03d      	b.n	8022d40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8022cc4:	69fb      	ldr	r3, [r7, #28]
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d10b      	bne.n	8022ce2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8022cca:	69bb      	ldr	r3, [r7, #24]
 8022ccc:	881b      	ldrh	r3, [r3, #0]
 8022cce:	461a      	mov	r2, r3
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	681b      	ldr	r3, [r3, #0]
 8022cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022cd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8022cda:	69bb      	ldr	r3, [r7, #24]
 8022cdc:	3302      	adds	r3, #2
 8022cde:	61bb      	str	r3, [r7, #24]
 8022ce0:	e007      	b.n	8022cf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8022ce2:	69fb      	ldr	r3, [r7, #28]
 8022ce4:	781a      	ldrb	r2, [r3, #0]
 8022ce6:	68fb      	ldr	r3, [r7, #12]
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8022cec:	69fb      	ldr	r3, [r7, #28]
 8022cee:	3301      	adds	r3, #1
 8022cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022cf2:	68fb      	ldr	r3, [r7, #12]
 8022cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8022cf8:	b29b      	uxth	r3, r3
 8022cfa:	3b01      	subs	r3, #1
 8022cfc:	b29a      	uxth	r2, r3
 8022cfe:	68fb      	ldr	r3, [r7, #12]
 8022d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8022d04:	68fb      	ldr	r3, [r7, #12]
 8022d06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8022d0a:	b29b      	uxth	r3, r3
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	d1c8      	bne.n	8022ca2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022d10:	683b      	ldr	r3, [r7, #0]
 8022d12:	9300      	str	r3, [sp, #0]
 8022d14:	697b      	ldr	r3, [r7, #20]
 8022d16:	2200      	movs	r2, #0
 8022d18:	2140      	movs	r1, #64	; 0x40
 8022d1a:	68f8      	ldr	r0, [r7, #12]
 8022d1c:	f000 fd28 	bl	8023770 <UART_WaitOnFlagUntilTimeout>
 8022d20:	4603      	mov	r3, r0
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d005      	beq.n	8022d32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	2220      	movs	r2, #32
 8022d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8022d2e:	2303      	movs	r3, #3
 8022d30:	e006      	b.n	8022d40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022d32:	68fb      	ldr	r3, [r7, #12]
 8022d34:	2220      	movs	r2, #32
 8022d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	e000      	b.n	8022d40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8022d3e:	2302      	movs	r3, #2
  }
}
 8022d40:	4618      	mov	r0, r3
 8022d42:	3720      	adds	r7, #32
 8022d44:	46bd      	mov	sp, r7
 8022d46:	bd80      	pop	{r7, pc}

08022d48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022d48:	b580      	push	{r7, lr}
 8022d4a:	b08a      	sub	sp, #40	; 0x28
 8022d4c:	af02      	add	r7, sp, #8
 8022d4e:	60f8      	str	r0, [r7, #12]
 8022d50:	60b9      	str	r1, [r7, #8]
 8022d52:	603b      	str	r3, [r7, #0]
 8022d54:	4613      	mov	r3, r2
 8022d56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022d5e:	2b20      	cmp	r3, #32
 8022d60:	f040 80b5 	bne.w	8022ece <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8022d64:	68bb      	ldr	r3, [r7, #8]
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	d002      	beq.n	8022d70 <HAL_UART_Receive+0x28>
 8022d6a:	88fb      	ldrh	r3, [r7, #6]
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d101      	bne.n	8022d74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8022d70:	2301      	movs	r3, #1
 8022d72:	e0ad      	b.n	8022ed0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022d74:	68fb      	ldr	r3, [r7, #12]
 8022d76:	2200      	movs	r2, #0
 8022d78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	2222      	movs	r2, #34	; 0x22
 8022d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022d84:	68fb      	ldr	r3, [r7, #12]
 8022d86:	2200      	movs	r2, #0
 8022d88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8022d8a:	f7fd ff21 	bl	8020bd0 <HAL_GetTick>
 8022d8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8022d90:	68fb      	ldr	r3, [r7, #12]
 8022d92:	88fa      	ldrh	r2, [r7, #6]
 8022d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8022d98:	68fb      	ldr	r3, [r7, #12]
 8022d9a:	88fa      	ldrh	r2, [r7, #6]
 8022d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8022da0:	68fb      	ldr	r3, [r7, #12]
 8022da2:	689b      	ldr	r3, [r3, #8]
 8022da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022da8:	d10e      	bne.n	8022dc8 <HAL_UART_Receive+0x80>
 8022daa:	68fb      	ldr	r3, [r7, #12]
 8022dac:	691b      	ldr	r3, [r3, #16]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d105      	bne.n	8022dbe <HAL_UART_Receive+0x76>
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8022db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022dbc:	e02d      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022dbe:	68fb      	ldr	r3, [r7, #12]
 8022dc0:	22ff      	movs	r2, #255	; 0xff
 8022dc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022dc6:	e028      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022dc8:	68fb      	ldr	r3, [r7, #12]
 8022dca:	689b      	ldr	r3, [r3, #8]
 8022dcc:	2b00      	cmp	r3, #0
 8022dce:	d10d      	bne.n	8022dec <HAL_UART_Receive+0xa4>
 8022dd0:	68fb      	ldr	r3, [r7, #12]
 8022dd2:	691b      	ldr	r3, [r3, #16]
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d104      	bne.n	8022de2 <HAL_UART_Receive+0x9a>
 8022dd8:	68fb      	ldr	r3, [r7, #12]
 8022dda:	22ff      	movs	r2, #255	; 0xff
 8022ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022de0:	e01b      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022de2:	68fb      	ldr	r3, [r7, #12]
 8022de4:	227f      	movs	r2, #127	; 0x7f
 8022de6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022dea:	e016      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	689b      	ldr	r3, [r3, #8]
 8022df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8022df4:	d10d      	bne.n	8022e12 <HAL_UART_Receive+0xca>
 8022df6:	68fb      	ldr	r3, [r7, #12]
 8022df8:	691b      	ldr	r3, [r3, #16]
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	d104      	bne.n	8022e08 <HAL_UART_Receive+0xc0>
 8022dfe:	68fb      	ldr	r3, [r7, #12]
 8022e00:	227f      	movs	r2, #127	; 0x7f
 8022e02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022e06:	e008      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022e08:	68fb      	ldr	r3, [r7, #12]
 8022e0a:	223f      	movs	r2, #63	; 0x3f
 8022e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8022e10:	e003      	b.n	8022e1a <HAL_UART_Receive+0xd2>
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	2200      	movs	r2, #0
 8022e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8022e1a:	68fb      	ldr	r3, [r7, #12]
 8022e1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8022e20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022e22:	68fb      	ldr	r3, [r7, #12]
 8022e24:	689b      	ldr	r3, [r3, #8]
 8022e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022e2a:	d108      	bne.n	8022e3e <HAL_UART_Receive+0xf6>
 8022e2c:	68fb      	ldr	r3, [r7, #12]
 8022e2e:	691b      	ldr	r3, [r3, #16]
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d104      	bne.n	8022e3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8022e34:	2300      	movs	r3, #0
 8022e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8022e38:	68bb      	ldr	r3, [r7, #8]
 8022e3a:	61bb      	str	r3, [r7, #24]
 8022e3c:	e003      	b.n	8022e46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8022e3e:	68bb      	ldr	r3, [r7, #8]
 8022e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022e42:	2300      	movs	r3, #0
 8022e44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8022e46:	e036      	b.n	8022eb6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8022e48:	683b      	ldr	r3, [r7, #0]
 8022e4a:	9300      	str	r3, [sp, #0]
 8022e4c:	697b      	ldr	r3, [r7, #20]
 8022e4e:	2200      	movs	r2, #0
 8022e50:	2120      	movs	r1, #32
 8022e52:	68f8      	ldr	r0, [r7, #12]
 8022e54:	f000 fc8c 	bl	8023770 <UART_WaitOnFlagUntilTimeout>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d005      	beq.n	8022e6a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	2220      	movs	r2, #32
 8022e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8022e66:	2303      	movs	r3, #3
 8022e68:	e032      	b.n	8022ed0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8022e6a:	69fb      	ldr	r3, [r7, #28]
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	d10c      	bne.n	8022e8a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8022e70:	68fb      	ldr	r3, [r7, #12]
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e76:	b29a      	uxth	r2, r3
 8022e78:	8a7b      	ldrh	r3, [r7, #18]
 8022e7a:	4013      	ands	r3, r2
 8022e7c:	b29a      	uxth	r2, r3
 8022e7e:	69bb      	ldr	r3, [r7, #24]
 8022e80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8022e82:	69bb      	ldr	r3, [r7, #24]
 8022e84:	3302      	adds	r3, #2
 8022e86:	61bb      	str	r3, [r7, #24]
 8022e88:	e00c      	b.n	8022ea4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8022e8a:	68fb      	ldr	r3, [r7, #12]
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e90:	b2da      	uxtb	r2, r3
 8022e92:	8a7b      	ldrh	r3, [r7, #18]
 8022e94:	b2db      	uxtb	r3, r3
 8022e96:	4013      	ands	r3, r2
 8022e98:	b2da      	uxtb	r2, r3
 8022e9a:	69fb      	ldr	r3, [r7, #28]
 8022e9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8022e9e:	69fb      	ldr	r3, [r7, #28]
 8022ea0:	3301      	adds	r3, #1
 8022ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8022ea4:	68fb      	ldr	r3, [r7, #12]
 8022ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022eaa:	b29b      	uxth	r3, r3
 8022eac:	3b01      	subs	r3, #1
 8022eae:	b29a      	uxth	r2, r3
 8022eb0:	68fb      	ldr	r3, [r7, #12]
 8022eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8022eb6:	68fb      	ldr	r3, [r7, #12]
 8022eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022ebc:	b29b      	uxth	r3, r3
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d1c2      	bne.n	8022e48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	2220      	movs	r2, #32
 8022ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8022eca:	2300      	movs	r3, #0
 8022ecc:	e000      	b.n	8022ed0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8022ece:	2302      	movs	r3, #2
  }
}
 8022ed0:	4618      	mov	r0, r3
 8022ed2:	3720      	adds	r7, #32
 8022ed4:	46bd      	mov	sp, r7
 8022ed6:	bd80      	pop	{r7, pc}

08022ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022edc:	b08c      	sub	sp, #48	; 0x30
 8022ede:	af00      	add	r7, sp, #0
 8022ee0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022ee8:	697b      	ldr	r3, [r7, #20]
 8022eea:	689a      	ldr	r2, [r3, #8]
 8022eec:	697b      	ldr	r3, [r7, #20]
 8022eee:	691b      	ldr	r3, [r3, #16]
 8022ef0:	431a      	orrs	r2, r3
 8022ef2:	697b      	ldr	r3, [r7, #20]
 8022ef4:	695b      	ldr	r3, [r3, #20]
 8022ef6:	431a      	orrs	r2, r3
 8022ef8:	697b      	ldr	r3, [r7, #20]
 8022efa:	69db      	ldr	r3, [r3, #28]
 8022efc:	4313      	orrs	r3, r2
 8022efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022f00:	697b      	ldr	r3, [r7, #20]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	681a      	ldr	r2, [r3, #0]
 8022f06:	4baa      	ldr	r3, [pc, #680]	; (80231b0 <UART_SetConfig+0x2d8>)
 8022f08:	4013      	ands	r3, r2
 8022f0a:	697a      	ldr	r2, [r7, #20]
 8022f0c:	6812      	ldr	r2, [r2, #0]
 8022f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022f10:	430b      	orrs	r3, r1
 8022f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022f14:	697b      	ldr	r3, [r7, #20]
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	685b      	ldr	r3, [r3, #4]
 8022f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022f1e:	697b      	ldr	r3, [r7, #20]
 8022f20:	68da      	ldr	r2, [r3, #12]
 8022f22:	697b      	ldr	r3, [r7, #20]
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	430a      	orrs	r2, r1
 8022f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8022f2a:	697b      	ldr	r3, [r7, #20]
 8022f2c:	699b      	ldr	r3, [r3, #24]
 8022f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8022f30:	697b      	ldr	r3, [r7, #20]
 8022f32:	681b      	ldr	r3, [r3, #0]
 8022f34:	4a9f      	ldr	r2, [pc, #636]	; (80231b4 <UART_SetConfig+0x2dc>)
 8022f36:	4293      	cmp	r3, r2
 8022f38:	d004      	beq.n	8022f44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8022f3a:	697b      	ldr	r3, [r7, #20]
 8022f3c:	6a1b      	ldr	r3, [r3, #32]
 8022f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f40:	4313      	orrs	r3, r2
 8022f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8022f44:	697b      	ldr	r3, [r7, #20]
 8022f46:	681b      	ldr	r3, [r3, #0]
 8022f48:	689b      	ldr	r3, [r3, #8]
 8022f4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8022f4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8022f52:	697a      	ldr	r2, [r7, #20]
 8022f54:	6812      	ldr	r2, [r2, #0]
 8022f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022f58:	430b      	orrs	r3, r1
 8022f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8022f5c:	697b      	ldr	r3, [r7, #20]
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f62:	f023 010f 	bic.w	r1, r3, #15
 8022f66:	697b      	ldr	r3, [r7, #20]
 8022f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022f6a:	697b      	ldr	r3, [r7, #20]
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	430a      	orrs	r2, r1
 8022f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022f72:	697b      	ldr	r3, [r7, #20]
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	4a90      	ldr	r2, [pc, #576]	; (80231b8 <UART_SetConfig+0x2e0>)
 8022f78:	4293      	cmp	r3, r2
 8022f7a:	d125      	bne.n	8022fc8 <UART_SetConfig+0xf0>
 8022f7c:	4b8f      	ldr	r3, [pc, #572]	; (80231bc <UART_SetConfig+0x2e4>)
 8022f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022f82:	f003 0303 	and.w	r3, r3, #3
 8022f86:	2b03      	cmp	r3, #3
 8022f88:	d81a      	bhi.n	8022fc0 <UART_SetConfig+0xe8>
 8022f8a:	a201      	add	r2, pc, #4	; (adr r2, 8022f90 <UART_SetConfig+0xb8>)
 8022f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f90:	08022fa1 	.word	0x08022fa1
 8022f94:	08022fb1 	.word	0x08022fb1
 8022f98:	08022fa9 	.word	0x08022fa9
 8022f9c:	08022fb9 	.word	0x08022fb9
 8022fa0:	2301      	movs	r3, #1
 8022fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fa6:	e116      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8022fa8:	2302      	movs	r3, #2
 8022faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fae:	e112      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8022fb0:	2304      	movs	r3, #4
 8022fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fb6:	e10e      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8022fb8:	2308      	movs	r3, #8
 8022fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fbe:	e10a      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8022fc0:	2310      	movs	r3, #16
 8022fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022fc6:	e106      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8022fc8:	697b      	ldr	r3, [r7, #20]
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	4a7c      	ldr	r2, [pc, #496]	; (80231c0 <UART_SetConfig+0x2e8>)
 8022fce:	4293      	cmp	r3, r2
 8022fd0:	d138      	bne.n	8023044 <UART_SetConfig+0x16c>
 8022fd2:	4b7a      	ldr	r3, [pc, #488]	; (80231bc <UART_SetConfig+0x2e4>)
 8022fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022fd8:	f003 030c 	and.w	r3, r3, #12
 8022fdc:	2b0c      	cmp	r3, #12
 8022fde:	d82d      	bhi.n	802303c <UART_SetConfig+0x164>
 8022fe0:	a201      	add	r2, pc, #4	; (adr r2, 8022fe8 <UART_SetConfig+0x110>)
 8022fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fe6:	bf00      	nop
 8022fe8:	0802301d 	.word	0x0802301d
 8022fec:	0802303d 	.word	0x0802303d
 8022ff0:	0802303d 	.word	0x0802303d
 8022ff4:	0802303d 	.word	0x0802303d
 8022ff8:	0802302d 	.word	0x0802302d
 8022ffc:	0802303d 	.word	0x0802303d
 8023000:	0802303d 	.word	0x0802303d
 8023004:	0802303d 	.word	0x0802303d
 8023008:	08023025 	.word	0x08023025
 802300c:	0802303d 	.word	0x0802303d
 8023010:	0802303d 	.word	0x0802303d
 8023014:	0802303d 	.word	0x0802303d
 8023018:	08023035 	.word	0x08023035
 802301c:	2300      	movs	r3, #0
 802301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023022:	e0d8      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023024:	2302      	movs	r3, #2
 8023026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802302a:	e0d4      	b.n	80231d6 <UART_SetConfig+0x2fe>
 802302c:	2304      	movs	r3, #4
 802302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023032:	e0d0      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023034:	2308      	movs	r3, #8
 8023036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802303a:	e0cc      	b.n	80231d6 <UART_SetConfig+0x2fe>
 802303c:	2310      	movs	r3, #16
 802303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023042:	e0c8      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023044:	697b      	ldr	r3, [r7, #20]
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	4a5e      	ldr	r2, [pc, #376]	; (80231c4 <UART_SetConfig+0x2ec>)
 802304a:	4293      	cmp	r3, r2
 802304c:	d125      	bne.n	802309a <UART_SetConfig+0x1c2>
 802304e:	4b5b      	ldr	r3, [pc, #364]	; (80231bc <UART_SetConfig+0x2e4>)
 8023050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023054:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8023058:	2b30      	cmp	r3, #48	; 0x30
 802305a:	d016      	beq.n	802308a <UART_SetConfig+0x1b2>
 802305c:	2b30      	cmp	r3, #48	; 0x30
 802305e:	d818      	bhi.n	8023092 <UART_SetConfig+0x1ba>
 8023060:	2b20      	cmp	r3, #32
 8023062:	d00a      	beq.n	802307a <UART_SetConfig+0x1a2>
 8023064:	2b20      	cmp	r3, #32
 8023066:	d814      	bhi.n	8023092 <UART_SetConfig+0x1ba>
 8023068:	2b00      	cmp	r3, #0
 802306a:	d002      	beq.n	8023072 <UART_SetConfig+0x19a>
 802306c:	2b10      	cmp	r3, #16
 802306e:	d008      	beq.n	8023082 <UART_SetConfig+0x1aa>
 8023070:	e00f      	b.n	8023092 <UART_SetConfig+0x1ba>
 8023072:	2300      	movs	r3, #0
 8023074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023078:	e0ad      	b.n	80231d6 <UART_SetConfig+0x2fe>
 802307a:	2302      	movs	r3, #2
 802307c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023080:	e0a9      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023082:	2304      	movs	r3, #4
 8023084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023088:	e0a5      	b.n	80231d6 <UART_SetConfig+0x2fe>
 802308a:	2308      	movs	r3, #8
 802308c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023090:	e0a1      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023092:	2310      	movs	r3, #16
 8023094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023098:	e09d      	b.n	80231d6 <UART_SetConfig+0x2fe>
 802309a:	697b      	ldr	r3, [r7, #20]
 802309c:	681b      	ldr	r3, [r3, #0]
 802309e:	4a4a      	ldr	r2, [pc, #296]	; (80231c8 <UART_SetConfig+0x2f0>)
 80230a0:	4293      	cmp	r3, r2
 80230a2:	d125      	bne.n	80230f0 <UART_SetConfig+0x218>
 80230a4:	4b45      	ldr	r3, [pc, #276]	; (80231bc <UART_SetConfig+0x2e4>)
 80230a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80230aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80230ae:	2bc0      	cmp	r3, #192	; 0xc0
 80230b0:	d016      	beq.n	80230e0 <UART_SetConfig+0x208>
 80230b2:	2bc0      	cmp	r3, #192	; 0xc0
 80230b4:	d818      	bhi.n	80230e8 <UART_SetConfig+0x210>
 80230b6:	2b80      	cmp	r3, #128	; 0x80
 80230b8:	d00a      	beq.n	80230d0 <UART_SetConfig+0x1f8>
 80230ba:	2b80      	cmp	r3, #128	; 0x80
 80230bc:	d814      	bhi.n	80230e8 <UART_SetConfig+0x210>
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d002      	beq.n	80230c8 <UART_SetConfig+0x1f0>
 80230c2:	2b40      	cmp	r3, #64	; 0x40
 80230c4:	d008      	beq.n	80230d8 <UART_SetConfig+0x200>
 80230c6:	e00f      	b.n	80230e8 <UART_SetConfig+0x210>
 80230c8:	2300      	movs	r3, #0
 80230ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80230ce:	e082      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80230d0:	2302      	movs	r3, #2
 80230d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80230d6:	e07e      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80230d8:	2304      	movs	r3, #4
 80230da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80230de:	e07a      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80230e0:	2308      	movs	r3, #8
 80230e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80230e6:	e076      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80230e8:	2310      	movs	r3, #16
 80230ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80230ee:	e072      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80230f0:	697b      	ldr	r3, [r7, #20]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4a35      	ldr	r2, [pc, #212]	; (80231cc <UART_SetConfig+0x2f4>)
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d12a      	bne.n	8023150 <UART_SetConfig+0x278>
 80230fa:	4b30      	ldr	r3, [pc, #192]	; (80231bc <UART_SetConfig+0x2e4>)
 80230fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023108:	d01a      	beq.n	8023140 <UART_SetConfig+0x268>
 802310a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802310e:	d81b      	bhi.n	8023148 <UART_SetConfig+0x270>
 8023110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023114:	d00c      	beq.n	8023130 <UART_SetConfig+0x258>
 8023116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802311a:	d815      	bhi.n	8023148 <UART_SetConfig+0x270>
 802311c:	2b00      	cmp	r3, #0
 802311e:	d003      	beq.n	8023128 <UART_SetConfig+0x250>
 8023120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023124:	d008      	beq.n	8023138 <UART_SetConfig+0x260>
 8023126:	e00f      	b.n	8023148 <UART_SetConfig+0x270>
 8023128:	2300      	movs	r3, #0
 802312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802312e:	e052      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023130:	2302      	movs	r3, #2
 8023132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023136:	e04e      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023138:	2304      	movs	r3, #4
 802313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802313e:	e04a      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023140:	2308      	movs	r3, #8
 8023142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023146:	e046      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023148:	2310      	movs	r3, #16
 802314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802314e:	e042      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023150:	697b      	ldr	r3, [r7, #20]
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	4a17      	ldr	r2, [pc, #92]	; (80231b4 <UART_SetConfig+0x2dc>)
 8023156:	4293      	cmp	r3, r2
 8023158:	d13a      	bne.n	80231d0 <UART_SetConfig+0x2f8>
 802315a:	4b18      	ldr	r3, [pc, #96]	; (80231bc <UART_SetConfig+0x2e4>)
 802315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8023164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8023168:	d01a      	beq.n	80231a0 <UART_SetConfig+0x2c8>
 802316a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802316e:	d81b      	bhi.n	80231a8 <UART_SetConfig+0x2d0>
 8023170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023174:	d00c      	beq.n	8023190 <UART_SetConfig+0x2b8>
 8023176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802317a:	d815      	bhi.n	80231a8 <UART_SetConfig+0x2d0>
 802317c:	2b00      	cmp	r3, #0
 802317e:	d003      	beq.n	8023188 <UART_SetConfig+0x2b0>
 8023180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023184:	d008      	beq.n	8023198 <UART_SetConfig+0x2c0>
 8023186:	e00f      	b.n	80231a8 <UART_SetConfig+0x2d0>
 8023188:	2300      	movs	r3, #0
 802318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802318e:	e022      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023190:	2302      	movs	r3, #2
 8023192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8023196:	e01e      	b.n	80231d6 <UART_SetConfig+0x2fe>
 8023198:	2304      	movs	r3, #4
 802319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802319e:	e01a      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80231a0:	2308      	movs	r3, #8
 80231a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80231a6:	e016      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80231a8:	2310      	movs	r3, #16
 80231aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80231ae:	e012      	b.n	80231d6 <UART_SetConfig+0x2fe>
 80231b0:	cfff69f3 	.word	0xcfff69f3
 80231b4:	40008000 	.word	0x40008000
 80231b8:	40013800 	.word	0x40013800
 80231bc:	40021000 	.word	0x40021000
 80231c0:	40004400 	.word	0x40004400
 80231c4:	40004800 	.word	0x40004800
 80231c8:	40004c00 	.word	0x40004c00
 80231cc:	40005000 	.word	0x40005000
 80231d0:	2310      	movs	r3, #16
 80231d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80231d6:	697b      	ldr	r3, [r7, #20]
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	4ab0      	ldr	r2, [pc, #704]	; (802349c <UART_SetConfig+0x5c4>)
 80231dc:	4293      	cmp	r3, r2
 80231de:	f040 809b 	bne.w	8023318 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80231e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80231e6:	2b08      	cmp	r3, #8
 80231e8:	d827      	bhi.n	802323a <UART_SetConfig+0x362>
 80231ea:	a201      	add	r2, pc, #4	; (adr r2, 80231f0 <UART_SetConfig+0x318>)
 80231ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80231f0:	08023215 	.word	0x08023215
 80231f4:	0802321d 	.word	0x0802321d
 80231f8:	08023225 	.word	0x08023225
 80231fc:	0802323b 	.word	0x0802323b
 8023200:	0802322b 	.word	0x0802322b
 8023204:	0802323b 	.word	0x0802323b
 8023208:	0802323b 	.word	0x0802323b
 802320c:	0802323b 	.word	0x0802323b
 8023210:	08023233 	.word	0x08023233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023214:	f7fe feaa 	bl	8021f6c <HAL_RCC_GetPCLK1Freq>
 8023218:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802321a:	e014      	b.n	8023246 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802321c:	f7fe feba 	bl	8021f94 <HAL_RCC_GetPCLK2Freq>
 8023220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023222:	e010      	b.n	8023246 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023224:	4b9e      	ldr	r3, [pc, #632]	; (80234a0 <UART_SetConfig+0x5c8>)
 8023226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023228:	e00d      	b.n	8023246 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802322a:	f7fe fded 	bl	8021e08 <HAL_RCC_GetSysClockFreq>
 802322e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023230:	e009      	b.n	8023246 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023238:	e005      	b.n	8023246 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 802323a:	2300      	movs	r3, #0
 802323c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802323e:	2301      	movs	r3, #1
 8023240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8023246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023248:	2b00      	cmp	r3, #0
 802324a:	f000 8130 	beq.w	80234ae <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802324e:	697b      	ldr	r3, [r7, #20]
 8023250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023252:	4a94      	ldr	r2, [pc, #592]	; (80234a4 <UART_SetConfig+0x5cc>)
 8023254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023258:	461a      	mov	r2, r3
 802325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802325c:	fbb3 f3f2 	udiv	r3, r3, r2
 8023260:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023262:	697b      	ldr	r3, [r7, #20]
 8023264:	685a      	ldr	r2, [r3, #4]
 8023266:	4613      	mov	r3, r2
 8023268:	005b      	lsls	r3, r3, #1
 802326a:	4413      	add	r3, r2
 802326c:	69ba      	ldr	r2, [r7, #24]
 802326e:	429a      	cmp	r2, r3
 8023270:	d305      	bcc.n	802327e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8023272:	697b      	ldr	r3, [r7, #20]
 8023274:	685b      	ldr	r3, [r3, #4]
 8023276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023278:	69ba      	ldr	r2, [r7, #24]
 802327a:	429a      	cmp	r2, r3
 802327c:	d903      	bls.n	8023286 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 802327e:	2301      	movs	r3, #1
 8023280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8023284:	e113      	b.n	80234ae <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023288:	2200      	movs	r2, #0
 802328a:	60bb      	str	r3, [r7, #8]
 802328c:	60fa      	str	r2, [r7, #12]
 802328e:	697b      	ldr	r3, [r7, #20]
 8023290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023292:	4a84      	ldr	r2, [pc, #528]	; (80234a4 <UART_SetConfig+0x5cc>)
 8023294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023298:	b29b      	uxth	r3, r3
 802329a:	2200      	movs	r2, #0
 802329c:	603b      	str	r3, [r7, #0]
 802329e:	607a      	str	r2, [r7, #4]
 80232a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80232a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80232a8:	f7fc ffc4 	bl	8020234 <__aeabi_uldivmod>
 80232ac:	4602      	mov	r2, r0
 80232ae:	460b      	mov	r3, r1
 80232b0:	4610      	mov	r0, r2
 80232b2:	4619      	mov	r1, r3
 80232b4:	f04f 0200 	mov.w	r2, #0
 80232b8:	f04f 0300 	mov.w	r3, #0
 80232bc:	020b      	lsls	r3, r1, #8
 80232be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80232c2:	0202      	lsls	r2, r0, #8
 80232c4:	6979      	ldr	r1, [r7, #20]
 80232c6:	6849      	ldr	r1, [r1, #4]
 80232c8:	0849      	lsrs	r1, r1, #1
 80232ca:	2000      	movs	r0, #0
 80232cc:	460c      	mov	r4, r1
 80232ce:	4605      	mov	r5, r0
 80232d0:	eb12 0804 	adds.w	r8, r2, r4
 80232d4:	eb43 0905 	adc.w	r9, r3, r5
 80232d8:	697b      	ldr	r3, [r7, #20]
 80232da:	685b      	ldr	r3, [r3, #4]
 80232dc:	2200      	movs	r2, #0
 80232de:	469a      	mov	sl, r3
 80232e0:	4693      	mov	fp, r2
 80232e2:	4652      	mov	r2, sl
 80232e4:	465b      	mov	r3, fp
 80232e6:	4640      	mov	r0, r8
 80232e8:	4649      	mov	r1, r9
 80232ea:	f7fc ffa3 	bl	8020234 <__aeabi_uldivmod>
 80232ee:	4602      	mov	r2, r0
 80232f0:	460b      	mov	r3, r1
 80232f2:	4613      	mov	r3, r2
 80232f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80232f6:	6a3b      	ldr	r3, [r7, #32]
 80232f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80232fc:	d308      	bcc.n	8023310 <UART_SetConfig+0x438>
 80232fe:	6a3b      	ldr	r3, [r7, #32]
 8023300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023304:	d204      	bcs.n	8023310 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8023306:	697b      	ldr	r3, [r7, #20]
 8023308:	681b      	ldr	r3, [r3, #0]
 802330a:	6a3a      	ldr	r2, [r7, #32]
 802330c:	60da      	str	r2, [r3, #12]
 802330e:	e0ce      	b.n	80234ae <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8023310:	2301      	movs	r3, #1
 8023312:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8023316:	e0ca      	b.n	80234ae <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023318:	697b      	ldr	r3, [r7, #20]
 802331a:	69db      	ldr	r3, [r3, #28]
 802331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023320:	d166      	bne.n	80233f0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8023322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8023326:	2b08      	cmp	r3, #8
 8023328:	d827      	bhi.n	802337a <UART_SetConfig+0x4a2>
 802332a:	a201      	add	r2, pc, #4	; (adr r2, 8023330 <UART_SetConfig+0x458>)
 802332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023330:	08023355 	.word	0x08023355
 8023334:	0802335d 	.word	0x0802335d
 8023338:	08023365 	.word	0x08023365
 802333c:	0802337b 	.word	0x0802337b
 8023340:	0802336b 	.word	0x0802336b
 8023344:	0802337b 	.word	0x0802337b
 8023348:	0802337b 	.word	0x0802337b
 802334c:	0802337b 	.word	0x0802337b
 8023350:	08023373 	.word	0x08023373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023354:	f7fe fe0a 	bl	8021f6c <HAL_RCC_GetPCLK1Freq>
 8023358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802335a:	e014      	b.n	8023386 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802335c:	f7fe fe1a 	bl	8021f94 <HAL_RCC_GetPCLK2Freq>
 8023360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023362:	e010      	b.n	8023386 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023364:	4b4e      	ldr	r3, [pc, #312]	; (80234a0 <UART_SetConfig+0x5c8>)
 8023366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023368:	e00d      	b.n	8023386 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802336a:	f7fe fd4d 	bl	8021e08 <HAL_RCC_GetSysClockFreq>
 802336e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023370:	e009      	b.n	8023386 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023378:	e005      	b.n	8023386 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 802337a:	2300      	movs	r3, #0
 802337c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802337e:	2301      	movs	r3, #1
 8023380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8023386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023388:	2b00      	cmp	r3, #0
 802338a:	f000 8090 	beq.w	80234ae <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802338e:	697b      	ldr	r3, [r7, #20]
 8023390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023392:	4a44      	ldr	r2, [pc, #272]	; (80234a4 <UART_SetConfig+0x5cc>)
 8023394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023398:	461a      	mov	r2, r3
 802339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802339c:	fbb3 f3f2 	udiv	r3, r3, r2
 80233a0:	005a      	lsls	r2, r3, #1
 80233a2:	697b      	ldr	r3, [r7, #20]
 80233a4:	685b      	ldr	r3, [r3, #4]
 80233a6:	085b      	lsrs	r3, r3, #1
 80233a8:	441a      	add	r2, r3
 80233aa:	697b      	ldr	r3, [r7, #20]
 80233ac:	685b      	ldr	r3, [r3, #4]
 80233ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80233b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80233b4:	6a3b      	ldr	r3, [r7, #32]
 80233b6:	2b0f      	cmp	r3, #15
 80233b8:	d916      	bls.n	80233e8 <UART_SetConfig+0x510>
 80233ba:	6a3b      	ldr	r3, [r7, #32]
 80233bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80233c0:	d212      	bcs.n	80233e8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80233c2:	6a3b      	ldr	r3, [r7, #32]
 80233c4:	b29b      	uxth	r3, r3
 80233c6:	f023 030f 	bic.w	r3, r3, #15
 80233ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80233cc:	6a3b      	ldr	r3, [r7, #32]
 80233ce:	085b      	lsrs	r3, r3, #1
 80233d0:	b29b      	uxth	r3, r3
 80233d2:	f003 0307 	and.w	r3, r3, #7
 80233d6:	b29a      	uxth	r2, r3
 80233d8:	8bfb      	ldrh	r3, [r7, #30]
 80233da:	4313      	orrs	r3, r2
 80233dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80233de:	697b      	ldr	r3, [r7, #20]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	8bfa      	ldrh	r2, [r7, #30]
 80233e4:	60da      	str	r2, [r3, #12]
 80233e6:	e062      	b.n	80234ae <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80233e8:	2301      	movs	r3, #1
 80233ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80233ee:	e05e      	b.n	80234ae <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80233f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80233f4:	2b08      	cmp	r3, #8
 80233f6:	d828      	bhi.n	802344a <UART_SetConfig+0x572>
 80233f8:	a201      	add	r2, pc, #4	; (adr r2, 8023400 <UART_SetConfig+0x528>)
 80233fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80233fe:	bf00      	nop
 8023400:	08023425 	.word	0x08023425
 8023404:	0802342d 	.word	0x0802342d
 8023408:	08023435 	.word	0x08023435
 802340c:	0802344b 	.word	0x0802344b
 8023410:	0802343b 	.word	0x0802343b
 8023414:	0802344b 	.word	0x0802344b
 8023418:	0802344b 	.word	0x0802344b
 802341c:	0802344b 	.word	0x0802344b
 8023420:	08023443 	.word	0x08023443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023424:	f7fe fda2 	bl	8021f6c <HAL_RCC_GetPCLK1Freq>
 8023428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802342a:	e014      	b.n	8023456 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802342c:	f7fe fdb2 	bl	8021f94 <HAL_RCC_GetPCLK2Freq>
 8023430:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023432:	e010      	b.n	8023456 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023434:	4b1a      	ldr	r3, [pc, #104]	; (80234a0 <UART_SetConfig+0x5c8>)
 8023436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023438:	e00d      	b.n	8023456 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802343a:	f7fe fce5 	bl	8021e08 <HAL_RCC_GetSysClockFreq>
 802343e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8023440:	e009      	b.n	8023456 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8023448:	e005      	b.n	8023456 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 802344a:	2300      	movs	r3, #0
 802344c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802344e:	2301      	movs	r3, #1
 8023450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8023454:	bf00      	nop
    }

    if (pclk != 0U)
 8023456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023458:	2b00      	cmp	r3, #0
 802345a:	d028      	beq.n	80234ae <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802345c:	697b      	ldr	r3, [r7, #20]
 802345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023460:	4a10      	ldr	r2, [pc, #64]	; (80234a4 <UART_SetConfig+0x5cc>)
 8023462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023466:	461a      	mov	r2, r3
 8023468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802346a:	fbb3 f2f2 	udiv	r2, r3, r2
 802346e:	697b      	ldr	r3, [r7, #20]
 8023470:	685b      	ldr	r3, [r3, #4]
 8023472:	085b      	lsrs	r3, r3, #1
 8023474:	441a      	add	r2, r3
 8023476:	697b      	ldr	r3, [r7, #20]
 8023478:	685b      	ldr	r3, [r3, #4]
 802347a:	fbb2 f3f3 	udiv	r3, r2, r3
 802347e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023480:	6a3b      	ldr	r3, [r7, #32]
 8023482:	2b0f      	cmp	r3, #15
 8023484:	d910      	bls.n	80234a8 <UART_SetConfig+0x5d0>
 8023486:	6a3b      	ldr	r3, [r7, #32]
 8023488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802348c:	d20c      	bcs.n	80234a8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802348e:	6a3b      	ldr	r3, [r7, #32]
 8023490:	b29a      	uxth	r2, r3
 8023492:	697b      	ldr	r3, [r7, #20]
 8023494:	681b      	ldr	r3, [r3, #0]
 8023496:	60da      	str	r2, [r3, #12]
 8023498:	e009      	b.n	80234ae <UART_SetConfig+0x5d6>
 802349a:	bf00      	nop
 802349c:	40008000 	.word	0x40008000
 80234a0:	00f42400 	.word	0x00f42400
 80234a4:	08023c08 	.word	0x08023c08
      }
      else
      {
        ret = HAL_ERROR;
 80234a8:	2301      	movs	r3, #1
 80234aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80234ae:	697b      	ldr	r3, [r7, #20]
 80234b0:	2201      	movs	r2, #1
 80234b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80234b6:	697b      	ldr	r3, [r7, #20]
 80234b8:	2201      	movs	r2, #1
 80234ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80234be:	697b      	ldr	r3, [r7, #20]
 80234c0:	2200      	movs	r2, #0
 80234c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80234c4:	697b      	ldr	r3, [r7, #20]
 80234c6:	2200      	movs	r2, #0
 80234c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80234ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80234ce:	4618      	mov	r0, r3
 80234d0:	3730      	adds	r7, #48	; 0x30
 80234d2:	46bd      	mov	sp, r7
 80234d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080234d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80234d8:	b480      	push	{r7}
 80234da:	b083      	sub	sp, #12
 80234dc:	af00      	add	r7, sp, #0
 80234de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234e4:	f003 0308 	and.w	r3, r3, #8
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d00a      	beq.n	8023502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	685b      	ldr	r3, [r3, #4]
 80234f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80234f6:	687b      	ldr	r3, [r7, #4]
 80234f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	430a      	orrs	r2, r1
 8023500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023506:	f003 0301 	and.w	r3, r3, #1
 802350a:	2b00      	cmp	r3, #0
 802350c:	d00a      	beq.n	8023524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	685b      	ldr	r3, [r3, #4]
 8023514:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	430a      	orrs	r2, r1
 8023522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023528:	f003 0302 	and.w	r3, r3, #2
 802352c:	2b00      	cmp	r3, #0
 802352e:	d00a      	beq.n	8023546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	685b      	ldr	r3, [r3, #4]
 8023536:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	681b      	ldr	r3, [r3, #0]
 8023542:	430a      	orrs	r2, r1
 8023544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802354a:	f003 0304 	and.w	r3, r3, #4
 802354e:	2b00      	cmp	r3, #0
 8023550:	d00a      	beq.n	8023568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	681b      	ldr	r3, [r3, #0]
 8023556:	685b      	ldr	r3, [r3, #4]
 8023558:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	430a      	orrs	r2, r1
 8023566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802356c:	f003 0310 	and.w	r3, r3, #16
 8023570:	2b00      	cmp	r3, #0
 8023572:	d00a      	beq.n	802358a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	689b      	ldr	r3, [r3, #8]
 802357a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	430a      	orrs	r2, r1
 8023588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802358a:	687b      	ldr	r3, [r7, #4]
 802358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802358e:	f003 0320 	and.w	r3, r3, #32
 8023592:	2b00      	cmp	r3, #0
 8023594:	d00a      	beq.n	80235ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	689b      	ldr	r3, [r3, #8]
 802359c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	430a      	orrs	r2, r1
 80235aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80235ac:	687b      	ldr	r3, [r7, #4]
 80235ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	d01a      	beq.n	80235ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	681b      	ldr	r3, [r3, #0]
 80235bc:	685b      	ldr	r3, [r3, #4]
 80235be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80235c6:	687b      	ldr	r3, [r7, #4]
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	430a      	orrs	r2, r1
 80235cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80235d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80235d6:	d10a      	bne.n	80235ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	685b      	ldr	r3, [r3, #4]
 80235de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	430a      	orrs	r2, r1
 80235ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d00a      	beq.n	8023610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	685b      	ldr	r3, [r3, #4]
 8023600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	430a      	orrs	r2, r1
 802360e:	605a      	str	r2, [r3, #4]
  }
}
 8023610:	bf00      	nop
 8023612:	370c      	adds	r7, #12
 8023614:	46bd      	mov	sp, r7
 8023616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802361a:	4770      	bx	lr

0802361c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802361c:	b580      	push	{r7, lr}
 802361e:	b098      	sub	sp, #96	; 0x60
 8023620:	af02      	add	r7, sp, #8
 8023622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	2200      	movs	r2, #0
 8023628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802362c:	f7fd fad0 	bl	8020bd0 <HAL_GetTick>
 8023630:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	f003 0308 	and.w	r3, r3, #8
 802363c:	2b08      	cmp	r3, #8
 802363e:	d12f      	bne.n	80236a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8023644:	9300      	str	r3, [sp, #0]
 8023646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023648:	2200      	movs	r2, #0
 802364a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802364e:	6878      	ldr	r0, [r7, #4]
 8023650:	f000 f88e 	bl	8023770 <UART_WaitOnFlagUntilTimeout>
 8023654:	4603      	mov	r3, r0
 8023656:	2b00      	cmp	r3, #0
 8023658:	d022      	beq.n	80236a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023662:	e853 3f00 	ldrex	r3, [r3]
 8023666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8023668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802366a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802366e:	653b      	str	r3, [r7, #80]	; 0x50
 8023670:	687b      	ldr	r3, [r7, #4]
 8023672:	681b      	ldr	r3, [r3, #0]
 8023674:	461a      	mov	r2, r3
 8023676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023678:	647b      	str	r3, [r7, #68]	; 0x44
 802367a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802367c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802367e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023680:	e841 2300 	strex	r3, r2, [r1]
 8023684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8023686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023688:	2b00      	cmp	r3, #0
 802368a:	d1e6      	bne.n	802365a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	2220      	movs	r2, #32
 8023690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	2200      	movs	r2, #0
 8023698:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802369c:	2303      	movs	r3, #3
 802369e:	e063      	b.n	8023768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	681b      	ldr	r3, [r3, #0]
 80236a6:	f003 0304 	and.w	r3, r3, #4
 80236aa:	2b04      	cmp	r3, #4
 80236ac:	d149      	bne.n	8023742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80236ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80236b2:	9300      	str	r3, [sp, #0]
 80236b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80236b6:	2200      	movs	r2, #0
 80236b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80236bc:	6878      	ldr	r0, [r7, #4]
 80236be:	f000 f857 	bl	8023770 <UART_WaitOnFlagUntilTimeout>
 80236c2:	4603      	mov	r3, r0
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d03c      	beq.n	8023742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80236ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80236d0:	e853 3f00 	ldrex	r3, [r3]
 80236d4:	623b      	str	r3, [r7, #32]
   return(result);
 80236d6:	6a3b      	ldr	r3, [r7, #32]
 80236d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80236dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80236de:	687b      	ldr	r3, [r7, #4]
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	461a      	mov	r2, r3
 80236e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80236e6:	633b      	str	r3, [r7, #48]	; 0x30
 80236e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80236ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80236ee:	e841 2300 	strex	r3, r2, [r1]
 80236f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80236f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d1e6      	bne.n	80236c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	681b      	ldr	r3, [r3, #0]
 80236fe:	3308      	adds	r3, #8
 8023700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023702:	693b      	ldr	r3, [r7, #16]
 8023704:	e853 3f00 	ldrex	r3, [r3]
 8023708:	60fb      	str	r3, [r7, #12]
   return(result);
 802370a:	68fb      	ldr	r3, [r7, #12]
 802370c:	f023 0301 	bic.w	r3, r3, #1
 8023710:	64bb      	str	r3, [r7, #72]	; 0x48
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	3308      	adds	r3, #8
 8023718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802371a:	61fa      	str	r2, [r7, #28]
 802371c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802371e:	69b9      	ldr	r1, [r7, #24]
 8023720:	69fa      	ldr	r2, [r7, #28]
 8023722:	e841 2300 	strex	r3, r2, [r1]
 8023726:	617b      	str	r3, [r7, #20]
   return(result);
 8023728:	697b      	ldr	r3, [r7, #20]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d1e5      	bne.n	80236fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	2220      	movs	r2, #32
 8023732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	2200      	movs	r2, #0
 802373a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802373e:	2303      	movs	r3, #3
 8023740:	e012      	b.n	8023768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	2220      	movs	r2, #32
 8023746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	2220      	movs	r2, #32
 802374e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023752:	687b      	ldr	r3, [r7, #4]
 8023754:	2200      	movs	r2, #0
 8023756:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	2200      	movs	r2, #0
 802375c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	2200      	movs	r2, #0
 8023762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8023766:	2300      	movs	r3, #0
}
 8023768:	4618      	mov	r0, r3
 802376a:	3758      	adds	r7, #88	; 0x58
 802376c:	46bd      	mov	sp, r7
 802376e:	bd80      	pop	{r7, pc}

08023770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8023770:	b580      	push	{r7, lr}
 8023772:	b084      	sub	sp, #16
 8023774:	af00      	add	r7, sp, #0
 8023776:	60f8      	str	r0, [r7, #12]
 8023778:	60b9      	str	r1, [r7, #8]
 802377a:	603b      	str	r3, [r7, #0]
 802377c:	4613      	mov	r3, r2
 802377e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023780:	e04f      	b.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023782:	69bb      	ldr	r3, [r7, #24]
 8023784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023788:	d04b      	beq.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802378a:	f7fd fa21 	bl	8020bd0 <HAL_GetTick>
 802378e:	4602      	mov	r2, r0
 8023790:	683b      	ldr	r3, [r7, #0]
 8023792:	1ad3      	subs	r3, r2, r3
 8023794:	69ba      	ldr	r2, [r7, #24]
 8023796:	429a      	cmp	r2, r3
 8023798:	d302      	bcc.n	80237a0 <UART_WaitOnFlagUntilTimeout+0x30>
 802379a:	69bb      	ldr	r3, [r7, #24]
 802379c:	2b00      	cmp	r3, #0
 802379e:	d101      	bne.n	80237a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80237a0:	2303      	movs	r3, #3
 80237a2:	e04e      	b.n	8023842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	f003 0304 	and.w	r3, r3, #4
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	d037      	beq.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80237b2:	68bb      	ldr	r3, [r7, #8]
 80237b4:	2b80      	cmp	r3, #128	; 0x80
 80237b6:	d034      	beq.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
 80237b8:	68bb      	ldr	r3, [r7, #8]
 80237ba:	2b40      	cmp	r3, #64	; 0x40
 80237bc:	d031      	beq.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80237be:	68fb      	ldr	r3, [r7, #12]
 80237c0:	681b      	ldr	r3, [r3, #0]
 80237c2:	69db      	ldr	r3, [r3, #28]
 80237c4:	f003 0308 	and.w	r3, r3, #8
 80237c8:	2b08      	cmp	r3, #8
 80237ca:	d110      	bne.n	80237ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	2208      	movs	r2, #8
 80237d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80237d4:	68f8      	ldr	r0, [r7, #12]
 80237d6:	f000 f838 	bl	802384a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80237da:	68fb      	ldr	r3, [r7, #12]
 80237dc:	2208      	movs	r2, #8
 80237de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	2200      	movs	r2, #0
 80237e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80237ea:	2301      	movs	r3, #1
 80237ec:	e029      	b.n	8023842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80237ee:	68fb      	ldr	r3, [r7, #12]
 80237f0:	681b      	ldr	r3, [r3, #0]
 80237f2:	69db      	ldr	r3, [r3, #28]
 80237f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80237f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80237fc:	d111      	bne.n	8023822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80237fe:	68fb      	ldr	r3, [r7, #12]
 8023800:	681b      	ldr	r3, [r3, #0]
 8023802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023808:	68f8      	ldr	r0, [r7, #12]
 802380a:	f000 f81e 	bl	802384a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802380e:	68fb      	ldr	r3, [r7, #12]
 8023810:	2220      	movs	r2, #32
 8023812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8023816:	68fb      	ldr	r3, [r7, #12]
 8023818:	2200      	movs	r2, #0
 802381a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 802381e:	2303      	movs	r3, #3
 8023820:	e00f      	b.n	8023842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023822:	68fb      	ldr	r3, [r7, #12]
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	69da      	ldr	r2, [r3, #28]
 8023828:	68bb      	ldr	r3, [r7, #8]
 802382a:	4013      	ands	r3, r2
 802382c:	68ba      	ldr	r2, [r7, #8]
 802382e:	429a      	cmp	r2, r3
 8023830:	bf0c      	ite	eq
 8023832:	2301      	moveq	r3, #1
 8023834:	2300      	movne	r3, #0
 8023836:	b2db      	uxtb	r3, r3
 8023838:	461a      	mov	r2, r3
 802383a:	79fb      	ldrb	r3, [r7, #7]
 802383c:	429a      	cmp	r2, r3
 802383e:	d0a0      	beq.n	8023782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023840:	2300      	movs	r3, #0
}
 8023842:	4618      	mov	r0, r3
 8023844:	3710      	adds	r7, #16
 8023846:	46bd      	mov	sp, r7
 8023848:	bd80      	pop	{r7, pc}

0802384a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802384a:	b480      	push	{r7}
 802384c:	b095      	sub	sp, #84	; 0x54
 802384e:	af00      	add	r7, sp, #0
 8023850:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023852:	687b      	ldr	r3, [r7, #4]
 8023854:	681b      	ldr	r3, [r3, #0]
 8023856:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802385a:	e853 3f00 	ldrex	r3, [r3]
 802385e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8023860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8023866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	681b      	ldr	r3, [r3, #0]
 802386c:	461a      	mov	r2, r3
 802386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023870:	643b      	str	r3, [r7, #64]	; 0x40
 8023872:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8023876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023878:	e841 2300 	strex	r3, r2, [r1]
 802387c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023880:	2b00      	cmp	r3, #0
 8023882:	d1e6      	bne.n	8023852 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	681b      	ldr	r3, [r3, #0]
 8023888:	3308      	adds	r3, #8
 802388a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802388c:	6a3b      	ldr	r3, [r7, #32]
 802388e:	e853 3f00 	ldrex	r3, [r3]
 8023892:	61fb      	str	r3, [r7, #28]
   return(result);
 8023894:	69fb      	ldr	r3, [r7, #28]
 8023896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802389a:	f023 0301 	bic.w	r3, r3, #1
 802389e:	64bb      	str	r3, [r7, #72]	; 0x48
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	3308      	adds	r3, #8
 80238a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80238a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80238aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80238ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80238ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80238b0:	e841 2300 	strex	r3, r2, [r1]
 80238b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80238b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	d1e3      	bne.n	8023884 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80238bc:	687b      	ldr	r3, [r7, #4]
 80238be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80238c0:	2b01      	cmp	r3, #1
 80238c2:	d118      	bne.n	80238f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	e853 3f00 	ldrex	r3, [r3]
 80238d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80238d2:	68bb      	ldr	r3, [r7, #8]
 80238d4:	f023 0310 	bic.w	r3, r3, #16
 80238d8:	647b      	str	r3, [r7, #68]	; 0x44
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	681b      	ldr	r3, [r3, #0]
 80238de:	461a      	mov	r2, r3
 80238e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80238e2:	61bb      	str	r3, [r7, #24]
 80238e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80238e6:	6979      	ldr	r1, [r7, #20]
 80238e8:	69ba      	ldr	r2, [r7, #24]
 80238ea:	e841 2300 	strex	r3, r2, [r1]
 80238ee:	613b      	str	r3, [r7, #16]
   return(result);
 80238f0:	693b      	ldr	r3, [r7, #16]
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d1e6      	bne.n	80238c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80238f6:	687b      	ldr	r3, [r7, #4]
 80238f8:	2220      	movs	r2, #32
 80238fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80238fe:	687b      	ldr	r3, [r7, #4]
 8023900:	2200      	movs	r2, #0
 8023902:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	2200      	movs	r2, #0
 8023908:	675a      	str	r2, [r3, #116]	; 0x74
}
 802390a:	bf00      	nop
 802390c:	3754      	adds	r7, #84	; 0x54
 802390e:	46bd      	mov	sp, r7
 8023910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023914:	4770      	bx	lr

08023916 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8023916:	b480      	push	{r7}
 8023918:	b085      	sub	sp, #20
 802391a:	af00      	add	r7, sp, #0
 802391c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023924:	2b01      	cmp	r3, #1
 8023926:	d101      	bne.n	802392c <HAL_UARTEx_DisableFifoMode+0x16>
 8023928:	2302      	movs	r3, #2
 802392a:	e027      	b.n	802397c <HAL_UARTEx_DisableFifoMode+0x66>
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	2201      	movs	r2, #1
 8023930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	2224      	movs	r2, #36	; 0x24
 8023938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	681b      	ldr	r3, [r3, #0]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	681a      	ldr	r2, [r3, #0]
 802394a:	687b      	ldr	r3, [r7, #4]
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	f022 0201 	bic.w	r2, r2, #1
 8023952:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802395a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802395c:	687b      	ldr	r3, [r7, #4]
 802395e:	2200      	movs	r2, #0
 8023960:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	68fa      	ldr	r2, [r7, #12]
 8023968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	2220      	movs	r2, #32
 802396e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8023972:	687b      	ldr	r3, [r7, #4]
 8023974:	2200      	movs	r2, #0
 8023976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802397a:	2300      	movs	r3, #0
}
 802397c:	4618      	mov	r0, r3
 802397e:	3714      	adds	r7, #20
 8023980:	46bd      	mov	sp, r7
 8023982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023986:	4770      	bx	lr

08023988 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8023988:	b580      	push	{r7, lr}
 802398a:	b084      	sub	sp, #16
 802398c:	af00      	add	r7, sp, #0
 802398e:	6078      	str	r0, [r7, #4]
 8023990:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023998:	2b01      	cmp	r3, #1
 802399a:	d101      	bne.n	80239a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802399c:	2302      	movs	r3, #2
 802399e:	e02d      	b.n	80239fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	2201      	movs	r2, #1
 80239a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	2224      	movs	r2, #36	; 0x24
 80239ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	681b      	ldr	r3, [r3, #0]
 80239b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	681a      	ldr	r2, [r3, #0]
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	f022 0201 	bic.w	r2, r2, #1
 80239c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	689b      	ldr	r3, [r3, #8]
 80239ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	683a      	ldr	r2, [r7, #0]
 80239d8:	430a      	orrs	r2, r1
 80239da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80239dc:	6878      	ldr	r0, [r7, #4]
 80239de:	f000 f84f 	bl	8023a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	68fa      	ldr	r2, [r7, #12]
 80239e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	2220      	movs	r2, #32
 80239ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	2200      	movs	r2, #0
 80239f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80239fa:	2300      	movs	r3, #0
}
 80239fc:	4618      	mov	r0, r3
 80239fe:	3710      	adds	r7, #16
 8023a00:	46bd      	mov	sp, r7
 8023a02:	bd80      	pop	{r7, pc}

08023a04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8023a04:	b580      	push	{r7, lr}
 8023a06:	b084      	sub	sp, #16
 8023a08:	af00      	add	r7, sp, #0
 8023a0a:	6078      	str	r0, [r7, #4]
 8023a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023a14:	2b01      	cmp	r3, #1
 8023a16:	d101      	bne.n	8023a1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8023a18:	2302      	movs	r3, #2
 8023a1a:	e02d      	b.n	8023a78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	2201      	movs	r2, #1
 8023a20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8023a24:	687b      	ldr	r3, [r7, #4]
 8023a26:	2224      	movs	r2, #36	; 0x24
 8023a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	681a      	ldr	r2, [r3, #0]
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	f022 0201 	bic.w	r2, r2, #1
 8023a42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	689b      	ldr	r3, [r3, #8]
 8023a4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	681b      	ldr	r3, [r3, #0]
 8023a52:	683a      	ldr	r2, [r7, #0]
 8023a54:	430a      	orrs	r2, r1
 8023a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8023a58:	6878      	ldr	r0, [r7, #4]
 8023a5a:	f000 f811 	bl	8023a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	68fa      	ldr	r2, [r7, #12]
 8023a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	2220      	movs	r2, #32
 8023a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	2200      	movs	r2, #0
 8023a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8023a76:	2300      	movs	r3, #0
}
 8023a78:	4618      	mov	r0, r3
 8023a7a:	3710      	adds	r7, #16
 8023a7c:	46bd      	mov	sp, r7
 8023a7e:	bd80      	pop	{r7, pc}

08023a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8023a80:	b480      	push	{r7}
 8023a82:	b085      	sub	sp, #20
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d108      	bne.n	8023aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	2201      	movs	r2, #1
 8023a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	2201      	movs	r2, #1
 8023a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8023aa0:	e031      	b.n	8023b06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8023aa2:	2308      	movs	r3, #8
 8023aa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8023aa6:	2308      	movs	r3, #8
 8023aa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	689b      	ldr	r3, [r3, #8]
 8023ab0:	0e5b      	lsrs	r3, r3, #25
 8023ab2:	b2db      	uxtb	r3, r3
 8023ab4:	f003 0307 	and.w	r3, r3, #7
 8023ab8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	689b      	ldr	r3, [r3, #8]
 8023ac0:	0f5b      	lsrs	r3, r3, #29
 8023ac2:	b2db      	uxtb	r3, r3
 8023ac4:	f003 0307 	and.w	r3, r3, #7
 8023ac8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8023aca:	7bbb      	ldrb	r3, [r7, #14]
 8023acc:	7b3a      	ldrb	r2, [r7, #12]
 8023ace:	4911      	ldr	r1, [pc, #68]	; (8023b14 <UARTEx_SetNbDataToProcess+0x94>)
 8023ad0:	5c8a      	ldrb	r2, [r1, r2]
 8023ad2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8023ad6:	7b3a      	ldrb	r2, [r7, #12]
 8023ad8:	490f      	ldr	r1, [pc, #60]	; (8023b18 <UARTEx_SetNbDataToProcess+0x98>)
 8023ada:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8023adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8023ae0:	b29a      	uxth	r2, r3
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8023ae8:	7bfb      	ldrb	r3, [r7, #15]
 8023aea:	7b7a      	ldrb	r2, [r7, #13]
 8023aec:	4909      	ldr	r1, [pc, #36]	; (8023b14 <UARTEx_SetNbDataToProcess+0x94>)
 8023aee:	5c8a      	ldrb	r2, [r1, r2]
 8023af0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8023af4:	7b7a      	ldrb	r2, [r7, #13]
 8023af6:	4908      	ldr	r1, [pc, #32]	; (8023b18 <UARTEx_SetNbDataToProcess+0x98>)
 8023af8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8023afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8023afe:	b29a      	uxth	r2, r3
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8023b06:	bf00      	nop
 8023b08:	3714      	adds	r7, #20
 8023b0a:	46bd      	mov	sp, r7
 8023b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b10:	4770      	bx	lr
 8023b12:	bf00      	nop
 8023b14:	08023c20 	.word	0x08023c20
 8023b18:	08023c28 	.word	0x08023c28

08023b1c <__libc_init_array>:
 8023b1c:	b570      	push	{r4, r5, r6, lr}
 8023b1e:	4d0d      	ldr	r5, [pc, #52]	; (8023b54 <__libc_init_array+0x38>)
 8023b20:	2600      	movs	r6, #0
 8023b22:	4c0d      	ldr	r4, [pc, #52]	; (8023b58 <__libc_init_array+0x3c>)
 8023b24:	1b64      	subs	r4, r4, r5
 8023b26:	10a4      	asrs	r4, r4, #2
 8023b28:	42a6      	cmp	r6, r4
 8023b2a:	d109      	bne.n	8023b40 <__libc_init_array+0x24>
 8023b2c:	4d0b      	ldr	r5, [pc, #44]	; (8023b5c <__libc_init_array+0x40>)
 8023b2e:	2600      	movs	r6, #0
 8023b30:	4c0b      	ldr	r4, [pc, #44]	; (8023b60 <__libc_init_array+0x44>)
 8023b32:	f000 f81f 	bl	8023b74 <_init>
 8023b36:	1b64      	subs	r4, r4, r5
 8023b38:	10a4      	asrs	r4, r4, #2
 8023b3a:	42a6      	cmp	r6, r4
 8023b3c:	d105      	bne.n	8023b4a <__libc_init_array+0x2e>
 8023b3e:	bd70      	pop	{r4, r5, r6, pc}
 8023b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8023b44:	3601      	adds	r6, #1
 8023b46:	4798      	blx	r3
 8023b48:	e7ee      	b.n	8023b28 <__libc_init_array+0xc>
 8023b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8023b4e:	3601      	adds	r6, #1
 8023b50:	4798      	blx	r3
 8023b52:	e7f2      	b.n	8023b3a <__libc_init_array+0x1e>
 8023b54:	08023c38 	.word	0x08023c38
 8023b58:	08023c38 	.word	0x08023c38
 8023b5c:	08023c38 	.word	0x08023c38
 8023b60:	08023c3c 	.word	0x08023c3c

08023b64 <memset>:
 8023b64:	4402      	add	r2, r0
 8023b66:	4603      	mov	r3, r0
 8023b68:	4293      	cmp	r3, r2
 8023b6a:	d100      	bne.n	8023b6e <memset+0xa>
 8023b6c:	4770      	bx	lr
 8023b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8023b72:	e7f9      	b.n	8023b68 <memset+0x4>

08023b74 <_init>:
 8023b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b76:	bf00      	nop
 8023b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b7a:	bc08      	pop	{r3}
 8023b7c:	469e      	mov	lr, r3
 8023b7e:	4770      	bx	lr

08023b80 <_fini>:
 8023b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b82:	bf00      	nop
 8023b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b86:	bc08      	pop	{r3}
 8023b88:	469e      	mov	lr, r3
 8023b8a:	4770      	bx	lr
